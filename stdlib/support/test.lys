struct TestStruct()

fun identity(x: i32): i32 = x
fun identity(x: f32): f32 = x
fun identity(x: f64): f64 = x
fun identity(x: f32): f32 = x

enum ErrorMessage {
  EmptyMessage
  Message(message: string)
}

var lastErrorMessage: ErrorMessage = EmptyMessage

fun mustEqual(given: f64, expected: f64, message: string): void = {
  verify(given == expected, message)
  if (given != expected) {
    support::env::printf("  given: %d", given)
    support::env::printf("  expected: %d", expected)
  }
}

fun mustEqual(given: f32, expected: f32, message: string): void = {
  verify(given == expected, message)
  if (given != expected) {
    support::env::printf("  given: %d", given)
    support::env::printf("  expected: %d", expected)
  }
}
fun mustEqual(given: u64, expected: u64, message: string): void = {
  verify(given == expected, message)
  if (given != expected) {
    support::env::printf("  given LSB: %X", (given >> 32) as u32)
    support::env::printf("  expected LSB: %X", (expected >> 32) as u32)
    support::env::printf("  given MSB: %X", (given & 0xFFFFFFFF))
    support::env::printf("  expected MSB: %X", (expected & 0xFFFFFFFF))
  }
}

fun mustEqual(given: i64, expected: i64, message: string): void = {
  verify(given == expected, message)
  if (given != expected) {
    support::env::printf("  given LSB: %X", (given as u64 >> 32) as u32)
    support::env::printf("  expected LSB: %X", (expected as u64 >> 32) as u32)
    support::env::printf("  given MSB: %X", (given & 0xFFFFFFFF))
    support::env::printf("  expected MSB: %X", (expected & 0xFFFFFFFF))
  }
}

fun mustEqual(given: u32, expected: u32, message: string): void = {
  verify(given == expected, message)
  if (given != expected) {
    support::env::printf("  given: %X", given)
    support::env::printf("  expected: %X", expected)
  }
}
fun mustEqual(given: i32, expected: i32, message: string): void = {
  verify(given == expected, message)
  if (given != expected) {
    support::env::printf("  given: %d", given)
    support::env::printf("  expected: %d", expected)
  }
}

fun mustEqual(given: boolean, expected: boolean, message: string): void = {
  verify(given == expected, message)
}
fun mustEqual(given: string, expected: string, message: string): void = {
  verify(given == expected, message)
  if (given != expected) {
    support::env::printf(given)
    support::env::printf(expected)
  }
}

#[export "test_getLastErrorMessage"]
fun getLastErrorMessage(): u32 = {
  match lastErrorMessage {
    case m is Message -> m.message.ptr - 4 as u32
    else -> 0 as u32
  }
}

#[extern "test" "printNumber"]
fun printNumber(number: f32): void = panic()
#[extern "test" "printNumber"]
fun printNumber(number: f64): void = panic()
#[extern "test" "printNumber"]
fun printNumber(number: u32): void = panic()
#[extern "test" "printNumber"]
fun printNumber(number: i32): void = panic()

#[extern "test" "printString"]
fun printString(number: u32): void = panic()
fun printString(str: string): void = printString(str.ptr - 4 as u32)

#[extern "test" "printMemory"]
fun printMemory(start: u32, length: i32): void = panic()
#[extern "test" "printMemory"]
fun printMemory(start: u32, length: u32): void = panic()


/// TESTING FRAMEWORK

#[extern "test" "pushTest"]
fun START(title: u32): void = panic()
fun START(title: string): void = START(title.ptr - 4 as u32)

#[extern "test" "registerAssertion"]
fun verify(passed: boolean, title: u32): void = panic()
fun verify(passed: boolean, title: string): void = verify(passed, title.ptr - 4 as u32)

#[extern "test" "popTest"]
fun END(): void = panic()

fun assert(condition: boolean): void = assert(condition, "assert(false)")
fun assert(condition: boolean, message: string): void = {
  verify(condition, message)
  if (condition == false) {
    lastErrorMessage = Message(message)
    panic()
  }
}