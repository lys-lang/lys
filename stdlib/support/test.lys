import system::string

struct TestStruct()

fun identity(x: i32): i32 = x
fun identity(x: f32): f32 = x
fun identity(x: f64): f64 = x
fun identity(x: f32): f32 = x

enum ErrorMessage {
  EmptyMessage
  Message(message: bytes)
}

var lastErrorMessage: ErrorMessage = EmptyMessage

private fun mustEqual(given: f64, expected: f64): void =
  assert(given == expected)
private fun mustEqual(given: f32, expected: f32): void =
  assert(given == expected)
private fun mustEqual(given: u64, expected: u64): void =
  assert(given == expected)
private fun mustEqual(given: i64, expected: i64): void =
  assert(given == expected)
private fun mustEqual(given: u32, expected: u32): void =
  assert(given == expected)
private fun mustEqual(given: i32, expected: i32): void =
  assert(given == expected)
private fun mustEqual(given: u16, expected: u16): void =
  assert(given == expected)
private fun mustEqual(given: i16, expected: i16): void =
  assert(given == expected)
private fun mustEqual(given: u8, expected: u8): void =
  assert(given == expected)
private fun mustEqual(given: boolean, expected: boolean): void =
  assert(given == expected)
private fun mustEqual(given: bytes, expected: bytes): void =
  assert(given == expected)

#[export "test_getLastErrorMessage"]
fun getLastErrorMessage(): i32 = {
  match lastErrorMessage {
    case m is Message -> m.message.ptr - 4
    else -> 0
  }
}

#[extern "test" "printNumber"]
fun printNumber(number: u8): void = panic()
#[extern "test" "printNumber"]
fun printNumber(number: u16): void = panic()
#[extern "test" "printNumber"]
fun printNumber(number: i16): void = panic()
#[extern "test" "printNumber"]
fun printNumber(number: f32): void = panic()
#[extern "test" "printNumber"]
fun printNumber(number: f64): void = panic()
#[extern "test" "printNumber"]
fun printNumber(number: u32): void = panic()
#[extern "test" "printNumber"]
fun printNumber(number: i32): void = panic()

#[extern "test" "printString"]
fun printString(number: i32): void = panic()
fun printString(str: bytes): void = printString(str.ptr - 4)

#[extern "test" "printMemory"]
fun printMemory(start: i32, length: i32): void = panic()
#[extern "test" "printMemory"]
fun printMemory(start: u32, length: i32): void = panic()


/// TESTING FRAMEWORK

#[extern "test" "pushTest"]
fun START(title: i32): void = panic()
fun START(title: bytes): void = START(title.ptr - 4)

#[extern "test" "registerAssertion"]
fun verify(passed: boolean, title: i32): void = panic()
fun verify(passed: boolean, title: bytes): void = verify(passed, title.ptr - 4)

#[extern "test" "popTest"]
fun END(): void = panic()

fun assert(condition: boolean): void = assert(condition, "assert(false)")
fun assert(condition: boolean, message: bytes): void = {
  verify(condition, message)
  if (condition == false) {
    lastErrorMessage = Message(message)
    panic()
  }
}