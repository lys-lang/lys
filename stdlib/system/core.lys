type void = %stack { lowLevelType="void" byteSize=0 }
type u8 = %stack { lowLevelType="i32" byteSize=1 }
type i16 = %stack { lowLevelType="i32" byteSize=2 }
type u16 = %stack { lowLevelType="i32" byteSize=2 }
type i32 = %stack { lowLevelType="i32" byteSize=4 }
type u32 = %stack { lowLevelType="i32" byteSize=4 }
type i64 = %stack { lowLevelType="i64" byteSize=8 }
type u64 = %stack { lowLevelType="i64" byteSize=8 }
type f32 = %stack { lowLevelType="f32" byteSize=4 }
type f64 = %stack { lowLevelType="f64" byteSize=8 }
type bytes = %stack { lowLevelType="i64" byteSize=8 }
type boolean = %stack { lowLevelType="i32" byteSize=1 }
type ref = %injected
type never = %injected

fun addressFromRef(pointer: ref): u32 = %wasm {
  (i32.wrap_i64 (get_local $pointer))
}

fun panic(): never = %wasm { (unreachable) }

impl u8 {
  fun as(lhs: u8): i16 = %wasm { (get_local $lhs) }
  fun as(lhs: u8): u16 = %wasm { (get_local $lhs) }
  fun as(lhs: u8): i32 = %wasm { (get_local $lhs) }
  fun as(lhs: u8): u32 = %wasm { (get_local $lhs) }
  fun as(lhs: u8): i64 = %wasm { (i64.extend_i32_u (get_local $lhs)) }
  fun as(lhs: u8): u64 = %wasm { (i64.extend_i32_s (get_local $lhs)) }
  fun as(lhs: u8): f32 = %wasm { (f32.convert_i32_u (get_local $lhs)) }
  fun as(lhs: u8): f64 = %wasm { (f64.convert_i32_u (get_local $lhs)) }

  fun |(lhs: u8, rhs: u8): u8 = %wasm { (i32.or (get_local $lhs) (get_local $rhs)) }
  fun &(lhs: u8, rhs: u8): u8 = %wasm { (i32.and (get_local $lhs) (get_local $rhs)) }
  fun ^(lhs: u8, rhs: u8): u8 = %wasm { (i32.xor (get_local $lhs) (get_local $rhs)) }

  fun ==(lhs: u8, rhs: u32): boolean = %wasm { (i32.eq (get_local $lhs) (get_local $rhs)) }
  fun ==(lhs: u8, rhs: u16): boolean = %wasm { (i32.eq (get_local $lhs) (get_local $rhs)) }
  fun ==(lhs: u8, rhs: u8): boolean = %wasm { (i32.eq (get_local $lhs) (get_local $rhs)) }

  fun !=(lhs: u8, rhs: u32): boolean = %wasm { (i32.ne (get_local $lhs) (get_local $rhs)) }
  fun !=(lhs: u8, rhs: u16): boolean = %wasm { (i32.ne (get_local $lhs) (get_local $rhs)) }
  fun !=(lhs: u8, rhs: u8): boolean = %wasm { (i32.ne (get_local $lhs) (get_local $rhs)) }

  fun store(lhs: ref, rhs: u8): void = %wasm {
    (i32.store8 (call $addressFromRef (get_local $lhs)) (get_local $rhs))
  }

  fun store(lhs: ref, rhs: u8, offset: u32): void = %wasm {
    (i32.store8
      (i32.add
        (get_local $offset)
        (call $addressFromRef (get_local $lhs))
      )
      (get_local $rhs)
    )
  }

  fun load(lhs: ref): u8 = %wasm {
    (i32.load8_u (call $addressFromRef (get_local $lhs)))
  }

  fun load(lhs: ref, offset: u32): u8 = %wasm {
    (i32.load8_u
      (i32.add
        (get_local $offset)
        (call $addressFromRef (get_local $lhs))
      )
    )
  }
}

impl i16 {
  fun as(lhs: i16): i32 = %wasm { (get_local $lhs) }
  fun as(lhs: i16): i64 = %wasm { (i64.extend_i32_s (get_local $lhs)) }
  fun as(lhs: i16): f32 = %wasm { (f32.convert_i32_s (get_local $lhs)) }
  fun as(lhs: i16): f64 = %wasm { (f64.convert_i32_s (get_local $lhs)) }

  #[explicit]
  fun as(lhs: i16): u8 = %wasm { (i32.and (i32.const 0xFF) (get_local $lhs)) }

  #[explicit]
  fun as(lhs: i16): u32 = %wasm { (get_local $lhs) }

  fun ==(lhs: i16, rhs: i16): boolean = %wasm { (i32.eq (get_local $lhs) (get_local $rhs)) }
  fun ==(lhs: i16, rhs: i32): boolean = %wasm { (i32.eq (get_local $lhs) (get_local $rhs)) }

  fun !=(lhs: i16, rhs: i32): boolean = %wasm { (i32.ne (get_local $lhs) (get_local $rhs)) }
  fun !=(lhs: i16, rhs: i16): boolean = %wasm { (i32.ne (get_local $lhs) (get_local $rhs)) }

  fun &(lhs: i16, rhs: i16): i16 = %wasm { (i32.and (get_local $lhs) (get_local $rhs)) }
  fun |(lhs: i16, rhs: i16): i16 = %wasm { (i32.or (get_local $lhs) (get_local $rhs)) }
  fun ^(lhs: i16, rhs: i16): i16 = %wasm { (i32.xor (get_local $lhs) (get_local $rhs)) }

  fun +(lhs: i16, rhs: i16): i16 = %wasm {
    (i32.shr_s (i32.shl (i32.add (get_local $lhs) (get_local $rhs)) (i32.const 16)) (i32.const 16))
  }

  fun -(lhs: i16, rhs: i16): i16 = %wasm {
    (i32.shr_s (i32.shl (i32.sub (get_local $lhs) (get_local $rhs)) (i32.const 16)) (i32.const 16))
  }

  fun *(lhs: i16, rhs: i16): i16 = %wasm {
    (i32.shr_s (i32.shl (i32.mul (get_local $lhs) (get_local $rhs)) (i32.const 16)) (i32.const 16))
  }

  // if RHS is 0, then panic()
  fun /(lhs: i16, rhs: i16): i16 = %wasm { (i32.div_s (get_local $lhs) (get_local $rhs)) }

  fun ~(rhs: i16): i16 = %wasm { (i32.xor (i32.const 0xFFFFFFFF) (get_local $rhs)) }

  fun >>(lhs: i16, rhs: i16): i16 = %wasm {
    (i32.shr_s
      (get_local $lhs)
      (i32.and (get_local $rhs) (i32.const 15))
    )
  }

  fun <<(lhs: i16, rhs: i16): i16 = %wasm {
    (i32.shr_s
      (i32.shl
        (i32.shl
          (get_local $lhs)
          (i32.and (get_local $rhs) (i32.const 15))
        )
        (i32.const 16)
      )
      (i32.const 16)
    )
  }

  fun ^(lhs: i16, rhs: i16): i16 = %wasm { (i32.xor (get_local $lhs) (get_local $rhs)) }
  fun >=(lhs: i16, rhs: i16): boolean = %wasm { (i32.ge_s (get_local $lhs) (get_local $rhs)) }
  fun <=(lhs: i16, rhs: i16): boolean = %wasm { (i32.le_s (get_local $lhs) (get_local $rhs)) }
  fun >(lhs: i16, rhs: i16): boolean = %wasm { (i32.gt_s (get_local $lhs) (get_local $rhs)) }
  fun <(lhs: i16, rhs: i16): boolean = %wasm { (i32.lt_s (get_local $lhs) (get_local $rhs)) }
  fun %(lhs: i16, rhs: i16): i16 = %wasm { (i32.rem_s (get_local $lhs) (get_local $rhs)) }

  fun -(rhs: i16): i16 = %wasm {
    // (0 - rhs) << 16 >> 16
    (i32.shr_s (i32.shl (i32.sub (i32.const 0) (get_local $rhs)) (i32.const 16)) (i32.const 16))
  }


  fun store(lhs: ref, rhs: i16): void = %wasm {
    (i32.store16 (call $addressFromRef (get_local $lhs)) (get_local $rhs))
  }

  fun store(lhs: ref, rhs: i16, offset: u32): void = %wasm {
    (i32.store16
      (i32.add
        (get_local $offset)
        (call $addressFromRef (get_local $lhs))
      )
      (get_local $rhs)
    )
  }

  fun load(lhs: ref): i16 = %wasm {
    (i32.load16_s (call $addressFromRef (get_local $lhs)))
  }

  fun load(lhs: ref, offset: u32): i16 = %wasm {
    (i32.load16_s
      (i32.add
        (get_local $offset)
        (call $addressFromRef (get_local $lhs))
      )
    )
  }
}

impl u16 {
  fun as(lhs: u16): i32 = %wasm { (get_local $lhs) }
  fun as(lhs: u16): u32 = %wasm { (get_local $lhs) }
  fun as(lhs: u16): i64 = %wasm { (i64.extend_i32_u (get_local $lhs)) }
  fun as(lhs: u16): u64 = %wasm { (i64.extend_i32_u (get_local $lhs)) }
  fun as(lhs: u16): f32 = %wasm { (f32.convert_i32_u (get_local $lhs)) }
  fun as(lhs: u16): f64 = %wasm { (f64.convert_i32_u (get_local $lhs)) }

  #[explicit]
  fun as(lhs: u16): u8 = %wasm { (i32.and (i32.const 0xFF) (get_local $lhs)) }

  fun ==(lhs: u16, rhs: u32): boolean = %wasm { (i32.eq (get_local $lhs) (get_local $rhs)) }
  fun ==(lhs: u16, rhs: u16): boolean = %wasm { (i32.eq (get_local $lhs) (get_local $rhs)) }
  fun ==(lhs: u16, rhs: u8): boolean = %wasm { (i32.eq (get_local $lhs) (get_local $rhs)) }

  fun !=(lhs: u16, rhs: u32): boolean = %wasm { (i32.ne (get_local $lhs) (get_local $rhs)) }
  fun !=(lhs: u16, rhs: u16): boolean = %wasm { (i32.ne (get_local $lhs) (get_local $rhs)) }
  fun !=(lhs: u16, rhs: u8): boolean = %wasm { (i32.ne (get_local $lhs) (get_local $rhs)) }

  fun &(lhs: u16, rhs: u16): u16 = %wasm { (i32.and (get_local $lhs) (get_local $rhs)) }
  fun |(lhs: u16, rhs: u16): u16 = %wasm { (i32.or (get_local $lhs) (get_local $rhs)) }
  fun ^(lhs: u16, rhs: u16): u16 = %wasm { (i32.xor (get_local $lhs) (get_local $rhs)) }

  fun +(lhs: u16, rhs: u16): u16 = %wasm {
    (i32.and (i32.const 0xFFFF)
      (i32.add (get_local $lhs) (get_local $rhs))
    )
  }

  fun -(lhs: u16, rhs: u16): u16 = %wasm {
    (i32.and
      (i32.const 0xFFFF)
      (i32.sub (get_local $lhs) (get_local $rhs))
    )
  }

  fun *(lhs: u16, rhs: u16): u16 = %wasm {
    (i32.and (i32.const 0xFFFF) (i32.mul (get_local $lhs) (get_local $rhs)))
  }

  // if RHS is 0, then panic()
  fun /(lhs: u16, rhs: u16): u16 = %wasm { (i32.div_s (get_local $lhs) (get_local $rhs)) }

  fun ~(rhs: u16): u16 = %wasm { (i32.xor (i32.const 0xFFFF) (get_local $rhs)) }

  fun >>(lhs: u16, rhs: u16): u16 = %wasm {
    (i32.and
      (i32.const 0xFFFF)
      (i32.shr_u
        (get_local $lhs)
        (i32.and (get_local $rhs) (i32.const 15))
      )
    )
  }

  fun <<(lhs: u16, rhs: u16): u16 = %wasm {
    (i32.and
      (i32.const 0xFFFF)
      (i32.shl
        (get_local $lhs)
        (i32.and (get_local $rhs) (i32.const 15))
      )
    )
  }

  fun ^(lhs: u16, rhs: u16): u16 = %wasm { (i32.xor (get_local $lhs) (get_local $rhs)) }
  fun >=(lhs: u16, rhs: u16): boolean = %wasm { (i32.ge_u (get_local $lhs) (get_local $rhs)) }
  fun <=(lhs: u16, rhs: u16): boolean = %wasm { (i32.le_u (get_local $lhs) (get_local $rhs)) }
  fun >(lhs: u16, rhs: u16): boolean = %wasm { (i32.gt_u (get_local $lhs) (get_local $rhs)) }
  fun <(lhs: u16, rhs: u16): boolean = %wasm { (i32.lt_u (get_local $lhs) (get_local $rhs)) }
  fun %(lhs: u16, rhs: u16): u16 = %wasm { (i32.rem_u (get_local $lhs) (get_local $rhs)) }

  fun store(lhs: ref, rhs: u16): void = %wasm {
    (i32.store16 (call $addressFromRef (get_local $lhs)) (get_local $rhs))
  }

  fun store(lhs: ref, rhs: u16, offset: u32): void = %wasm {
    (i32.store16
      (i32.add
        (get_local $offset)
        (call $addressFromRef (get_local $lhs))
      )
      (get_local $rhs)
    )
  }

  fun load(lhs: ref): u16 = %wasm {
    (i32.load16_u (call $addressFromRef (get_local $lhs)))
  }

  fun load(lhs: ref, offset: u32): u16 = %wasm {
    (i32.load16_u
      (i32.add
        (get_local $offset)
        (call $addressFromRef (get_local $lhs))
      )
    )
  }
}

impl i32 {
  fun as(lhs: i32): i64 = %wasm { (i64.extend_i32_s (get_local $lhs)) }
  fun as(lhs: i32): f32 = %wasm { (f32.convert_i32_s (get_local $lhs)) }
  fun as(lhs: i32): f64 = %wasm { (f64.convert_i32_s (get_local $lhs)) }

  #[explicit]
  fun as(lhs: i32): u32 = %wasm { (get_local $lhs) }

  #[explicit]
  fun as(lhs: i32): u64 = %wasm { (i64.extend_i32_s (get_local $lhs)) }

  #[explicit]
  fun as(lhs: i32): f32 = %wasm { (f32.convert_i32_s (get_local $lhs)) }

  #[explicit]
  fun as(lhs: i32): ref = %wasm { (i64.extend_i32_s (get_local $lhs)) }

  #[explicit]
  fun as(lhs: i32): u8 = %wasm { (i32.and (i32.const 0xFF) (get_local $lhs)) }

  #[explicit]
  fun as(lhs: i32): u16 = %wasm { (i32.and (i32.const 0xFFFF) (get_local $lhs)) }

  #[explicit]
  fun as(lhs: i32): i16 = %wasm {
    (i32.shr_s (i32.shl (get_local $lhs) (i32.const 16)) (i32.const 16))
  }

  fun ==(lhs: i32, rhs: i32): boolean = %wasm { (i32.eq (get_local $lhs) (get_local $rhs)) }
  fun ==(lhs: i32, rhs: i16): boolean = %wasm { (i32.eq (get_local $lhs) (get_local $rhs)) }
  fun ==(lhs: i32, rhs: i32): boolean = %wasm { (i32.eq (get_local $lhs) (get_local $rhs)) }
  fun !=(lhs: i32, rhs: i32): boolean = %wasm { (i32.ne (get_local $lhs) (get_local $rhs)) }
  fun !=(lhs: i32, rhs: i16): boolean = %wasm { (i32.ne (get_local $lhs) (get_local $rhs)) }
  fun &(lhs: i32, rhs: i32): i32 = %wasm { (i32.and (get_local $lhs) (get_local $rhs)) }
  fun |(lhs: i32, rhs: i32): i32 = %wasm { (i32.or (get_local $lhs) (get_local $rhs)) }
  fun ^(lhs: i32, rhs: i32): i32 = %wasm { (i32.xor (get_local $lhs) (get_local $rhs)) }
  fun +(lhs: i32, rhs: i32): i32 = %wasm { (i32.add (get_local $lhs) (get_local $rhs)) }
  fun -(lhs: i32, rhs: i32): i32 = %wasm { (i32.sub (get_local $lhs) (get_local $rhs)) }
  fun *(lhs: i32, rhs: i32): i32 = %wasm { (i32.mul (get_local $lhs) (get_local $rhs)) }
  fun /(lhs: i32, rhs: i32): i32 = %wasm { (i32.div_s (get_local $lhs) (get_local $rhs)) }
  fun ~(rhs: i32): i32 = %wasm { (i32.xor (i32.const 0xFFFFFFFF) (get_local $rhs)) }
  fun -(rhs: i32): i32 = %wasm { (i32.sub (i32.const 0) (get_local $rhs)) }
  fun >>>(lhs: i32, rhs: i32): i32 = %wasm { (i32.shr_u (get_local $lhs) (get_local $rhs)) }
  fun >>(lhs: i32, rhs: i32): i32 = %wasm { (i32.shr_s (get_local $lhs) (get_local $rhs)) }
  fun <<(lhs: i32, rhs: i32): i32 = %wasm { (i32.shl (get_local $lhs) (get_local $rhs)) }
  fun >=(lhs: i32, rhs: i32): boolean = %wasm { (i32.ge_s (get_local $lhs) (get_local $rhs)) }
  fun <=(lhs: i32, rhs: i32): boolean = %wasm { (i32.le_s (get_local $lhs) (get_local $rhs)) }
  fun >(lhs: i32, rhs: i32): boolean = %wasm { (i32.gt_s (get_local $lhs) (get_local $rhs)) }
  fun <(lhs: i32, rhs: i32): boolean = %wasm { (i32.lt_s (get_local $lhs) (get_local $rhs)) }
  fun %(lhs: i32, rhs: i32): i32 = %wasm { (i32.rem_s (get_local $lhs) (get_local $rhs)) }

  fun store(lhs: ref, rhs: i32): void = %wasm {
    (i32.store (call $addressFromRef (get_local $lhs)) (get_local $rhs))
  }

  fun store(lhs: ref, rhs: i32, offset: u32): void = %wasm {
    (i32.store
      (i32.add
        (get_local $offset)
        (call $addressFromRef (get_local $lhs))
      )
      (get_local $rhs)
    )
  }

  fun load(lhs: ref): i32 = %wasm {
    (i32.load (call $addressFromRef (get_local $lhs)))
  }

  fun load(lhs: ref, offset: u32): i32 = %wasm {
    (i32.load
      (i32.add
        (get_local $offset)
        (call $addressFromRef (get_local $lhs))
      )
    )
  }
}


impl u32 {
  fun as(lhs: u32): i64 = %wasm { (i64.extend_i32_u (get_local $lhs)) }
  fun as(lhs: u32): u64 = %wasm { (i64.extend_i32_u (get_local $lhs)) }
  fun as(lhs: u32): f32 = %wasm { (f32.convert_i32_u (get_local $lhs)) }
  fun as(lhs: u32): f64 = %wasm { (f64.convert_i32_u (get_local $lhs)) }


  #[explicit]
  fun as(lhs: u32): i32 = %wasm { (get_local $lhs) }

  #[explicit]
  fun as(lhs: u32): i16 = %wasm { (i32.shr_s (i32.shl (get_local $lhs) (i32.const 16)) (i32.const 16)) }

  #[explicit]
  fun as(lhs: i32): u8 = %wasm { (i32.and (i32.const 0xFF) (get_local $lhs)) }

  #[explicit]
  fun as(lhs: u32): ref = %wasm { (i64.extend_i32_s (get_local $lhs)) }


  fun ==(lhs: u32, rhs: u32): boolean = %wasm { (i32.eq (get_local $lhs) (get_local $rhs)) }
  fun ==(lhs: u32, rhs: u16): boolean = %wasm { (i32.eq (get_local $lhs) (get_local $rhs)) }
  fun ==(lhs: u32, rhs: u8): boolean = %wasm { (i32.eq (get_local $lhs) (get_local $rhs)) }
  fun !=(lhs: u32, rhs: u32): boolean = %wasm { (i32.ne (get_local $lhs) (get_local $rhs)) }
  fun &(lhs: u32, rhs: u32): u32 = %wasm { (i32.and (get_local $lhs) (get_local $rhs)) }
  fun |(lhs: u32, rhs: u32): u32 = %wasm { (i32.or (get_local $lhs) (get_local $rhs)) }
  fun ^(lhs: u32, rhs: u32): u32 = %wasm { (i32.xor (get_local $lhs) (get_local $rhs)) }
  fun +(lhs: u32, rhs: u32): u32 = %wasm { (i32.add (get_local $lhs) (get_local $rhs)) }
  fun -(lhs: u32, rhs: u32): u32 = %wasm { (i32.sub (get_local $lhs) (get_local $rhs)) }
  fun *(lhs: u32, rhs: u32): u32 = %wasm { (i32.mul (get_local $lhs) (get_local $rhs)) }
  fun /(lhs: u32, rhs: u32): u32 = %wasm { (i32.div_u (get_local $lhs) (get_local $rhs)) }
  fun ~(rhs: u32): u32 = %wasm { (i32.xor (i32.const 0xFFFFFFFF) (get_local $rhs)) }
  fun >>>(lhs: u32, rhs: i32): u32 = %wasm { (i32.shr_u (get_local $lhs) (get_local $rhs)) }
  fun >>(lhs: u32, rhs: i32): u32 = %wasm { (i32.shr_s (get_local $lhs) (get_local $rhs)) }
  fun <<(lhs: u32, rhs: i32): u32 = %wasm { (i32.shl (get_local $lhs) (get_local $rhs)) }
  fun ^(lhs: u32, rhs: u32): u32 = %wasm { (i32.xor (get_local $lhs) (get_local $rhs)) }
  fun >=(lhs: u32, rhs: u32): boolean = %wasm { (i32.ge_u (get_local $lhs) (get_local $rhs)) }
  fun <=(lhs: u32, rhs: u32): boolean = %wasm { (i32.le_u (get_local $lhs) (get_local $rhs)) }
  fun >(lhs: u32, rhs: u32): boolean = %wasm { (i32.gt_u (get_local $lhs) (get_local $rhs)) }
  fun <(lhs: u32, rhs: u32): boolean = %wasm { (i32.lt_u (get_local $lhs) (get_local $rhs)) }
  fun %(lhs: u32, rhs: u32): u32 = %wasm { (i32.rem_u (get_local $lhs) (get_local $rhs)) }

  fun store(lhs: ref, rhs: u32): void = %wasm {
    (i32.store (call $addressFromRef (get_local $lhs)) (get_local $rhs))
  }

  fun store(lhs: ref, rhs: u32, offset: u32): void = %wasm {
    (i32.store
      (i32.add
        (get_local $offset)
        (call $addressFromRef (get_local $lhs))
      )
      (get_local $rhs)
    )
  }

  fun load(lhs: ref): u32 = %wasm {
    (i32.load (call $addressFromRef (get_local $lhs)))
  }

  fun load(lhs: ref, offset: u32): u32 = %wasm {
    (i32.load
      (i32.add
        (get_local $offset)
        (call $addressFromRef (get_local $lhs))
      )
    )
  }

}

impl i64 {
  fun as(lhs: i64): f32 = %wasm { (f32.convert_i64_s (get_local $lhs)) }
  fun as(lhs: i64): f64 = %wasm { (f64.convert_i64_s (get_local $lhs)) }

  #[explicit]
  fun as(lhs: i64): u64 = %wasm { (get_local $lhs) }

  #[explicit]
  fun as(lhs: i64): i32 = %wasm { (i32.wrap_i64 (get_local $lhs)) }

  #[explicit]
  fun as(lhs: i64): u32 = %wasm { (i32.wrap_i64 (get_local $lhs)) }

  fun ==(lhs: i64, rhs: i64): boolean = %wasm { (i64.eq (get_local $lhs) (get_local $rhs)) }
  fun ==(lhs: i64, rhs: i32): boolean = %wasm { (i64.eq (get_local $lhs) (i64.extend_i32_s (get_local $rhs))) }
  // fun ==(lhs: i64, rhs: i16): boolean = %wasm { (i64.eq (get_local $lhs) (i64.extend_i16_s (get_local $rhs))) }
  fun ==(lhs: i64, rhs: u8): boolean = %wasm { (i64.eq (get_local $lhs) (i64.extend_i32_u (get_local $rhs))) }

  fun !=(lhs: i64, rhs: i64): boolean = %wasm { (i64.ne (get_local $lhs) (get_local $rhs)) }
  fun +(lhs: i64, rhs: i64): i64 = %wasm { (i64.add (get_local $lhs) (get_local $rhs)) }
  fun -(lhs: i64): i64 = %wasm { (i64.mul (get_local $lhs) (i64.const -1)) }
  fun -(lhs: i64, rhs: i64): i64 = %wasm { (i64.sub (get_local $lhs) (get_local $rhs)) }
  fun *(lhs: i64, rhs: i64): i64 = %wasm { (i64.mul (get_local $lhs) (get_local $rhs)) }
  fun /(lhs: i64, rhs: i64): i64 = %wasm { (i64.div_s (get_local $lhs) (get_local $rhs)) }
  fun ~(rhs: i64): i64 = %wasm { (i64.xor (i64.const 0xFFFFFFFFFFFFFFFF) (get_local $rhs)) }
  fun >>>(lhs: i64, rhs: i32): i64 = lhs >>> (rhs as i64)
  fun >>(lhs: i64, rhs: i32): i64 = lhs >> (rhs as i64)
  fun <<(lhs: i64, rhs: i32): i64 = lhs << (rhs as i64)
  fun >>>(lhs: i64, rhs: i64): i64 = %wasm { (i64.shr_u (get_local $lhs) (get_local $rhs)) }
  fun >>(lhs: i64, rhs: i64): i64 = %wasm { (i64.shr_s (get_local $lhs) (get_local $rhs)) }
  fun <<(lhs: i64, rhs: i64): i64 = %wasm { (i64.shl (get_local $lhs) (get_local $rhs)) }
  fun >=(lhs: i64, rhs: i64): boolean = %wasm { (i64.ge_s (get_local $lhs) (get_local $rhs)) }
  fun <=(lhs: i64, rhs: i64): boolean = %wasm { (i64.le_s (get_local $lhs) (get_local $rhs)) }
  fun >(lhs: i64, rhs: i64): boolean = %wasm { (i64.gt_s (get_local $lhs) (get_local $rhs)) }
  fun <(lhs: i64, rhs: i64): boolean = %wasm { (i64.lt_s (get_local $lhs) (get_local $rhs)) }
  fun %(lhs: i64, rhs: i64): i64 = %wasm { (i64.rem_s (get_local $lhs) (get_local $rhs)) }
  fun &(lhs: i64, rhs: i64): i64 = %wasm { (i64.and (get_local $lhs) (get_local $rhs)) }
  fun &(lhs: i64, rhs: i32): i32 = (lhs as i32) & rhs
  fun &(lhs: i64, rhs: u32): u32 = (lhs as u32) & rhs
  fun |(lhs: i64, rhs: i64): i64 = %wasm { (i64.or (get_local $lhs) (get_local $rhs)) }
  fun ^(lhs: i64, rhs: i64): i64 = %wasm { (i64.xor (get_local $lhs) (get_local $rhs)) }

  fun rotl(value: i64, shift: i64): i64 = %wasm { (i64.rotl (get_local $value) (get_local $shift))  }
  fun rotr(value: i64, shift: i64): i64 = %wasm { (i64.rotr (get_local $value) (get_local $shift))  }

  fun store(lhs: ref, rhs: i64): void = %wasm {
    (i64.store (call $addressFromRef (get_local $lhs)) (get_local $rhs))
  }

  fun store(lhs: ref, rhs: i64, offset: u32): void = %wasm {
    (i64.store
      (i32.add
        (get_local $offset)
        (call $addressFromRef (get_local $lhs))
      )
      (get_local $rhs)
    )
  }

  fun load(lhs: ref): i64 = %wasm {
    (i64.load (call $addressFromRef (get_local $lhs)))
  }

  fun load(lhs: ref, offset: u32): i64 = %wasm {
    (i64.load
      (i32.add
        (get_local $offset)
        (call $addressFromRef (get_local $lhs))
      )
    )
  }

  fun load8_u(lhs: ref, offset: u32): i64 = %wasm {
    (i64.load8_u
      (i32.add
        (get_local $offset)
        (call $addressFromRef (get_local $lhs))
      )
    )
  }
}

impl u64 {
  fun as(lhs: u64): f32 = %wasm { (f32.convert_i64_u (get_local $lhs)) }
  fun as(lhs: u64): f64 = %wasm { (f64.convert_i64_u (get_local $lhs)) }

  #[explicit]
  fun as(lhs: u64): u8 = %wasm { (i32.and (i32.const 0xFF) (i32.wrap_i64 (get_local $lhs))) }

  #[explicit]
  fun as(lhs: u64): u16 = %wasm { (i32.and (i32.const 0xFFFF) (i32.wrap_i64 (get_local $lhs))) }

  #[explicit]
  fun as(lhs: u64): i64 = %wasm { (get_local $lhs) }

  #[explicit]
  fun as(lhs: u64): f32 = %wasm { (f32.convert_i64_u (get_local $lhs)) }

  #[explicit]
  fun as(lhs: u64): i32 = %wasm { (i32.wrap_i64 (get_local $lhs)) }

  #[explicit]
  fun as(lhs: u64): u32 = %wasm { (i32.wrap_i64 (get_local $lhs)) }

  fun ==(lhs: u64, rhs: u64): boolean = %wasm { (i64.eq (get_local $lhs) (get_local $rhs)) }
  fun ==(lhs: u64, rhs: u32): boolean = %wasm { (i64.eq (get_local $lhs) (i64.extend_i32_u (get_local $rhs))) }
  fun ==(lhs: u64, rhs: u16): boolean = %wasm { (i64.eq (get_local $lhs) (i64.extend_i32_u (get_local $rhs))) }
  fun ==(lhs: u64, rhs: u8): boolean = %wasm { (i64.eq (get_local $lhs) (i64.extend_i32_u (get_local $rhs))) }
  fun !=(lhs: u64, rhs: u64): boolean = %wasm { (i64.ne (get_local $lhs) (get_local $rhs)) }
  fun +(lhs: u64, rhs: u64): u64 = %wasm { (i64.add (get_local $lhs) (get_local $rhs)) }
  fun -(lhs: u64, rhs: u64): u64 = %wasm { (i64.sub (get_local $lhs) (get_local $rhs)) }
  fun *(lhs: u64, rhs: u64): u64 = %wasm { (i64.mul (get_local $lhs) (get_local $rhs)) }
  fun /(lhs: u64, rhs: u64): u64 = %wasm { (i64.div_u (get_local $lhs) (get_local $rhs)) }
  fun ~(rhs: u64): u64 = %wasm { (i64.xor (i64.const 0xFFFFFFFFFFFFFFFF) (get_local $rhs)) }
  fun >>>(lhs: u64, rhs: i32): u64 = lhs >>> (rhs as i64)
  fun >>(lhs: u64, rhs: i32): u64 = lhs >> (rhs as i64)
  fun <<(lhs: u64, rhs: i32): u64 = lhs << (rhs as i64)
  fun >>>(lhs: u64, rhs: i64): u64 = %wasm { (i64.shr_u (get_local $lhs) (get_local $rhs)) }
  fun >>(lhs: u64, rhs: i64): u64 = %wasm { (i64.shr_s (get_local $lhs) (get_local $rhs)) }
  fun <<(lhs: u64, rhs: i64): u64 = %wasm { (i64.shl (get_local $lhs) (get_local $rhs)) }
  fun >=(lhs: u64, rhs: u64): boolean = %wasm { (i64.ge_u (get_local $lhs) (get_local $rhs)) }
  fun <=(lhs: u64, rhs: u64): boolean = %wasm { (i64.le_u (get_local $lhs) (get_local $rhs)) }
  fun >(lhs: u64, rhs: u64): boolean = %wasm { (i64.gt_u (get_local $lhs) (get_local $rhs)) }
  fun <(lhs: u64, rhs: u64): boolean = %wasm { (i64.lt_u (get_local $lhs) (get_local $rhs)) }
  fun %(lhs: u64, rhs: u64): u64 = %wasm { (i64.rem_u (get_local $lhs) (get_local $rhs)) }
  fun &(lhs: u64, rhs: u64): u64 = %wasm { (i64.and (get_local $lhs) (get_local $rhs)) }
  fun &(lhs: u64, rhs: i32): i32 = (lhs as i32) & rhs
  fun &(lhs: u64, rhs: u32): u32 = (lhs as u32) & rhs
  fun |(lhs: u64, rhs: u64): u64 = %wasm { (i64.or (get_local $lhs) (get_local $rhs)) }
  fun ^(lhs: u64, rhs: u64): u64 = %wasm { (i64.xor (get_local $lhs) (get_local $rhs)) }

  fun store(lhs: ref, rhs: u64): void = %wasm {
    (i64.store (call $addressFromRef (get_local $lhs)) (get_local $rhs))
  }

  fun store(lhs: ref, rhs: u64, offset: u32): void = %wasm {
    (i64.store
      (i32.add
        (get_local $offset)
        (call $addressFromRef (get_local $lhs))
      )
      (get_local $rhs)
    )
  }

  fun load(lhs: ref): u64 = %wasm {
    (i64.load (call $addressFromRef (get_local $lhs)))
  }

  fun load(lhs: ref, offset: u32): u64 = %wasm {
    (i64.load
      (i32.add
        (get_local $offset)
        (call $addressFromRef (get_local $lhs))
      )
    )
  }

  fun load8_u(lhs: ref, offset: u32): u64 = %wasm {
    (i64.load8_u
      (i32.add
        (get_local $offset)
        (call $addressFromRef (get_local $lhs))
      )
    )
  }
}

impl f32 {
  fun as(lhs: f32): f64 = %wasm { (f64.promote/f32 (get_local $lhs)) }

  #[explicit]
  fun as(lhs: f32): i64 = %wasm { (i64.trunc_s/f32 (get_local $lhs)) }

  #[explicit]
  fun as(lhs: f32): u64 = %wasm { (i64.trunc_u/f32 (get_local $lhs)) }

  #[explicit]
  fun as(lhs: f32): i32 = %wasm { (i32.trunc_s/f32 (get_local $lhs)) }

  #[explicit]
  fun as(lhs: f32): u32 = %wasm { (i32.trunc_u/f32 (get_local $lhs)) }

  fun +(lhs: f32, rhs: f32): f32 = %wasm { (f32.add (get_local $lhs) (get_local $rhs)) }
  fun -(lhs: f32, rhs: f32): f32 = %wasm { (f32.sub (get_local $lhs) (get_local $rhs)) }
  fun -(rhs: f32): f32 = %wasm { (f32.neg (get_local $rhs)) }
  fun *(lhs: f32, rhs: f32): f32 = %wasm { (f32.mul (get_local $lhs) (get_local $rhs)) }
  fun /(lhs: f32, rhs: f32): f32 = %wasm { (f32.div (get_local $lhs) (get_local $rhs)) }
  fun ==(lhs: f32, rhs: f32): boolean = %wasm { (f32.eq (get_local $lhs) (get_local $rhs)) }
  fun >=(lhs: f32, rhs: f32): boolean = %wasm { (f32.ge (get_local $lhs) (get_local $rhs)) }
  fun <=(lhs: f32, rhs: f32): boolean = %wasm { (f32.le (get_local $lhs) (get_local $rhs)) }
  fun >(lhs: f32, rhs: f32): boolean = %wasm { (f32.gt (get_local $lhs) (get_local $rhs)) }
  fun <(lhs: f32, rhs: f32): boolean = %wasm { (f32.lt (get_local $lhs) (get_local $rhs)) }
  fun !=(lhs: f32, rhs: f32): boolean = %wasm { (f32.ne (get_local $lhs) (get_local $rhs)) }

  fun store(lhs: ref, rhs: f32): void = %wasm {
    (f32.store (call $addressFromRef (get_local $lhs)) (get_local $rhs))
  }

  fun store(lhs: ref, rhs: f32, offset: u32): void = %wasm {
    (f32.store
      (i32.add
        (get_local $offset)
        (call $addressFromRef (get_local $lhs))
      )
      (get_local $rhs)
    )
  }

  fun load(lhs: ref): f32 = %wasm {
    (f32.load (call $addressFromRef (get_local $lhs)))
  }

  fun load(lhs: ref, offset: u32): f32 = %wasm {
    (f32.load
      (i32.add
        (get_local $offset)
        (call $addressFromRef (get_local $lhs))
      )
    )
  }
}

impl f64 {
  #[explicit]
  fun as(lhs: f64): f32 = %wasm { (f32.demote/f64 (get_local $lhs)) }

  #[explicit]
  fun as(lhs: f64): i64 = %wasm { (i64.trunc_s/f64 (get_local $lhs)) }

  #[explicit]
  fun as(lhs: f64): u64 = %wasm { (i64.trunc_u/f64 (get_local $lhs)) }

  #[explicit]
  fun as(lhs: f64): i32 = %wasm { (i32.trunc_s/f64 (get_local $lhs)) }

  #[explicit]
  fun as(lhs: f64): u32 = %wasm { (i32.trunc_u/f64 (get_local $lhs)) }

  fun +(lhs: f64, rhs: f64): f64 = %wasm { (f64.add (get_local $lhs) (get_local $rhs)) }
  fun -(lhs: f64, rhs: f64): f64 = %wasm { (f64.sub (get_local $lhs) (get_local $rhs)) }
  fun -(rhs: f64): f64 = %wasm { (f64.neg (get_local $rhs)) }
  fun *(lhs: f64, rhs: f64): f64 = %wasm { (f64.mul (get_local $lhs) (get_local $rhs)) }
  fun /(lhs: f64, rhs: f64): f64 = %wasm { (f64.div (get_local $lhs) (get_local $rhs)) }
  fun ==(lhs: f64, rhs: f64): boolean = %wasm { (f64.eq (get_local $lhs) (get_local $rhs)) }
  fun >=(lhs: f64, rhs: f64): boolean = %wasm { (f64.ge (get_local $lhs) (get_local $rhs)) }
  fun <=(lhs: f64, rhs: f64): boolean = %wasm { (f64.le (get_local $lhs) (get_local $rhs)) }
  fun >(lhs: f64, rhs: f64): boolean = %wasm { (f64.gt (get_local $lhs) (get_local $rhs)) }
  fun <(lhs: f64, rhs: f64): boolean = %wasm { (f64.lt (get_local $lhs) (get_local $rhs)) }
  fun !=(lhs: f64, rhs: f64): boolean = %wasm { (f64.ne (get_local $lhs) (get_local $rhs)) }

  fun store(lhs: ref, rhs: f64): void = %wasm {
    (f64.store (call $addressFromRef (get_local $lhs)) (get_local $rhs))
  }

  fun store(lhs: ref, rhs: f64, offset: u32): void = %wasm {
    (f64.store
      (i32.add
        (get_local $offset)
        (call $addressFromRef (get_local $lhs))
      )
      (get_local $rhs)
    )
  }

  fun load(lhs: ref): f64 = %wasm {
    (f64.load (call $addressFromRef (get_local $lhs)))
  }

  fun load(lhs: ref, offset: u32): f64 = %wasm {
    (f64.load
      (i32.add
        (get_local $offset)
        (call $addressFromRef (get_local $lhs))
      )
    )
  }
}

impl never {
  fun apply(): never = %wasm {
    (unreachable)
  }
}

impl boolean {
  fun &&(lhs: boolean, rhs: boolean): boolean = %wasm {
    (i32.and
      (i32.ne (get_local $lhs) (i32.const 0))
      (i32.ne (get_local $rhs) (i32.const 0))
    )
  }

  fun ==(lhs: boolean, rhs: boolean): boolean = %wasm {
    (i32.eq
      (i32.eqz (get_local $lhs))
      (i32.eqz (get_local $rhs))
    )
  }

  fun ||(lhs: boolean, rhs: boolean): boolean = %wasm {
    (i32.or
      (i32.ne (get_local $lhs) (i32.const 0))
      (i32.ne (get_local $rhs) (i32.const 0))
    )
  }

  fun !(rhs: boolean): boolean =
    if (rhs)
      false
    else
      true

  fun store(lhs: ref, rhs: boolean): void = %wasm {
    (i32.store8 (call $addressFromRef (get_local $lhs)) (get_local $rhs))
  }

  fun store(lhs: ref, rhs: boolean, offset: u32): void = %wasm {
    (i32.store8
      (i32.add
        (get_local $offset)
        (call $addressFromRef (get_local $lhs))
      )
      (get_local $rhs)
    )
  }

  fun load(lhs: ref): boolean = %wasm {
    (i32.load8_u (call $addressFromRef (get_local $lhs)))
  }

  fun load(lhs: ref, offset: u32): boolean = %wasm {
    (i32.load8_u
      (i32.add
        (get_local $offset)
        (call $addressFromRef (get_local $lhs))
      )
    )
  }
}

impl ref {
  fun is(lhs: ref): boolean = true
  fun ==(lhs: ref, rhs: ref): boolean = %wasm { (i64.eq (get_local $lhs) (get_local $rhs)) }
  fun !=(lhs: ref, rhs: ref): boolean = !(lhs == rhs)

  fun store(lhs: ref, rhs: ref): void = %wasm {
    (i64.store (call $addressFromRef (get_local $lhs)) (get_local $rhs))
  }

  fun store(lhs: ref, rhs: ref, offset: u32): void = %wasm {
    (i64.store
      (i32.add
        (get_local $offset)
        (call $addressFromRef (get_local $lhs))
      )
      (get_local $rhs)
    )
  }

  fun load(lhs: ref): ref = %wasm {
    (i64.load (call $addressFromRef (get_local $lhs)))
  }

  fun load(lhs: ref, offset: u32): ref = %wasm {
    (i64.load
      (i32.add
        (get_local $offset)
        (call $addressFromRef (get_local $lhs))
      )
    )
  }
}

impl bytes {
  // bytes is a structure

  fun toAddr(str: bytes): u32 = %wasm {
    (call $addressFromRef (get_local $str))
  }

  #[explicit]
  fun as(lhs: bytes): ref = %wasm { (get_local $lhs) }

  fun property_length(str: bytes): u32 = u32.load(str as ref)

  fun property_ptr(str: bytes): u32 = {
    toAddr(str) + 4 as u32
  }

  fun get(data: bytes, at: u32): u8 = {
    if (at > data.length) {
      panic()
    }
    u8.load(data.ptr as ref, at)
  }

  fun set(data: bytes, at: u32, value: u16): void = {
    if (at + 1 as u32 > data.length) {
      panic()
    }
    u16.store(data.ptr as ref, value, at)
  }

  fun set(data: bytes, at: u32, value: u8): void = {
    if (at > data.length) {
      panic()
    }
    u8.store(data.ptr as ref, value, at)
  }

  fun store(lhs: ref, rhs: bytes): void = %wasm {
    (i64.store (call $addressFromRef (get_local $lhs)) (get_local $rhs))
  }

  fun store(lhs: ref, rhs: bytes, offset: u32): void = %wasm {
    (i64.store
      (i32.add
        (get_local $offset)
        (call $addressFromRef (get_local $lhs))
      )
      (get_local $rhs)
    )
  }

  fun load(lhs: ref): bytes = %wasm {
    (i64.load (call $addressFromRef (get_local $lhs)))
  }

  fun load(lhs: ref, offset: u32): bytes = %wasm {
    (i64.load
      (i32.add
        (get_local $offset)
        (call $addressFromRef (get_local $lhs))
      )
    )
  }

  fun !=(lhs: bytes, rhs: bytes): boolean = !(lhs == rhs)
  fun ==(lhs: bytes, rhs: bytes): boolean = {
    if (lhs.length == rhs.length) {
      if (lhs.ptr == rhs.ptr) {
        true
      } else {
        val len = lhs.length
        var equals = true
        loop {
          len = len - 1 as u32
          if (bytes.get(lhs, len) != bytes.get(rhs, len)) {
            equals = false
            break
          }
          if (len > 0 as u32) continue
        }
        equals
      }
    } else {
      false
    }
  }
}

/**
 * Safe conversions:
 *   u8     i16, u16, i32, u32, i64, u64, f32, f64
 *   i16    i32, i64, f32, f64
 *   u16    i32, u32, i64, u64, f32, f64
 *   i32    i64, f32, f64
 *   u32    i64, u64, f32, f64
 *   i64    f32, f64
 *   char   u16, i32, u32, i64, u64, f32, f64
 *   f32    f64
 *   u64    f32, f64
 */
/*
struct Range(from: i32, to: i32)

struct IteratorState(currentValue: i32, targetValue: i32, step: i32)

impl IteratorState {
  fun next(state: IteratorState): i32 = {
    state.currentValue = state.currentValue + state.step
    state.currentValue
  }

  fun hasNext(state: IteratorState): boolean =
    if (step > 0)
      state.currentValue < state.targetValue
    else
      state.currentValue > state.targetValue
}
*/
