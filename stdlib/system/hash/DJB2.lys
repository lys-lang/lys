// http://www.cse.yorku.ca/~oz/hash.html

/**
 * this algorithm (k=33) was first reported by dan bernstein many years ago in
 * comp.lang.c. another version of this algorithm (now favored by bernstein)
 * uses xor: hash(i) = hash(i - 1) * 33 ^ str[i]; the magic of number 33
 * (why it works better than many other constants, prime or not) has never been
 * adequately explained.
 */
fun DJB2(input: bytes): u64 = {
  var hash = 5381 as u64
  var i = 0 as u32
  val $ref = input.ptr as ref

  loop {
    if (i >= input.length) break

    hash = ((hash << 5) + hash) + u64.load8_u($ref, i)

    i = i + 1 as u32
    continue
  }

  hash
}