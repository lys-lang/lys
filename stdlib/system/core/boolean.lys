import system::core::native
import system::core::u32
import system::core::i32

type boolean = %stack { lowLevelType="i32" byteSize=1 }

impl boolean {
  fun &&(lhs: boolean, rhs: boolean): boolean = %wasm {
    (i32.and
      (i32.ne (local.get $lhs) (i32.const 0))
      (i32.ne (local.get $rhs) (i32.const 0))
    )
  }

  fun ==(lhs: boolean, rhs: boolean): boolean = %wasm {
    (i32.eq
      (i32.eqz (local.get $lhs))
      (i32.eqz (local.get $rhs))
    )
  }

  fun ||(lhs: boolean, rhs: boolean): boolean = %wasm {
    (i32.or
      (i32.ne (local.get $lhs) (i32.const 0))
      (i32.ne (local.get $rhs) (i32.const 0))
    )
  }

  fun !(rhs: boolean): boolean =
    if (rhs)
      false
    else
      true

  fun store(lhs: ref, rhs: boolean): void = %wasm {
    (i32.store8 (call $addressFromRef (local.get $lhs)) (local.get $rhs))
  }

  fun store(lhs: ref, rhs: boolean, offset: u32): void = %wasm {
    (i32.store8
      (i32.add
        (local.get $offset)
        (call $addressFromRef (local.get $lhs))
      )
      (local.get $rhs)
    )
  }

  fun load(lhs: ref): boolean = %wasm {
    (i32.load8_u (call $addressFromRef (local.get $lhs)))
  }

  fun load(lhs: ref, offset: u32): boolean = %wasm {
    (i32.load8_u
      (i32.add
        (local.get $offset)
        (call $addressFromRef (local.get $lhs))
      )
    )
  }
}