import system::core::boolean
import system::core::u32
import system::core::i32
import system::core::u64

type void = %stack { lowLevelType="void" byteSize=0 }
type ref = %injected
type never = %injected
type UnsafeCPointer = %stack { lowLevelType="i32" byteSize=4 }

fun addressFromRef(pointer: ref): u32 = %wasm {
  (i32.wrap_i64 (local.get $pointer))
}

fun panic(): never = %wasm { (unreachable) }

impl never {
  fun apply(): never = %wasm {
    (unreachable)
  }
}

trait Reference {
  fun is(lhs: ref): boolean
  fun as(lhs: ref): ref
}

impl Reference for ref {
  fun is(lhs: ref): boolean = true
  fun as(lhs: ref): ref = lhs
}

impl ref {
  fun ==(lhs: ref, rhs: ref): boolean = %wasm { (i64.eq (local.get $lhs) (local.get $rhs)) }
  fun !=(lhs: ref, rhs: ref): boolean = %wasm { (i64.ne (local.get $lhs) (local.get $rhs)) }

  /**
   * CPointer implicit coercion.
   */
  fun as(self: ref): UnsafeCPointer = %wasm {
    (call $addressFromRef (local.get $self))
  }

  /**
   * Gets the discriminant of a reference pointer.
   */
  #[inline]
  fun getDiscriminant(reference: ref): u32 = %wasm {
    (i32.wrap_i64
      (i64.shr_u
        (local.get $reference)
        (i64.const 32)
      )
    )
  }

  fun store(lhs: ref, rhs: ref): void = %wasm {
    (i64.store (call $addressFromRef (local.get $lhs)) (local.get $rhs))
  }

  fun store(lhs: ref, rhs: ref, offset: u32): void = %wasm {
    (i64.store
      (i32.add
        (local.get $offset)
        (call $addressFromRef (local.get $lhs))
      )
      (local.get $rhs)
    )
  }

  fun load(lhs: ref): ref = %wasm {
    (i64.load (call $addressFromRef (local.get $lhs)))
  }

  fun load(lhs: ref, offset: u32): ref = %wasm {
    (i64.load
      (i32.add
        (local.get $offset)
        (call $addressFromRef (local.get $lhs))
      )
    )
  }
}

/**
 * Safe conversions:
 *   u8     i16, u16, i32, u32, i64, u64, f32, f64
 *   i16    i32, i64, f32, f64
 *   u16    i32, u32, i64, u64, f32, f64
 *   i32    i64, f32, f64
 *   u32    i64, u64, f32, f64
 *   i64    f32, f64
 *   char   u16, i32, u32, i64, u64, f32, f64
 *   f32    f64
 *   u64    f32, f64
 */