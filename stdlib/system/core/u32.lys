import system::core::boolean
import system::core::bytes
import system::core::f32
import system::core::f64
import system::core::i16
import system::core::i32
import system::core::i64
import system::core::native
import system::core::string
import system::core::u16
import system::core::u64
import system::core::u8

type u32 = %stack { lowLevelType="i32" byteSize=4 }

impl u32 {
  fun as(lhs: u32): i64 = %wasm { (i64.extend_i32_u (local.get $lhs)) }
  fun as(lhs: u32): u64 = %wasm { (i64.extend_i32_u (local.get $lhs)) }
  fun as(lhs: u32): f32 = %wasm { (f32.convert_i32_u (local.get $lhs)) }
  fun as(lhs: u32): f64 = %wasm { (f64.convert_i32_u (local.get $lhs)) }

  #[explicit]
  fun as(lhs: u32): i32 = %wasm { (local.get $lhs) }

  #[explicit]
  fun as(lhs: u32): i16 = %wasm { (i32.shr_s (i32.shl (local.get $lhs) (i32.const 16)) (i32.const 16)) }

  #[explicit]
  fun as(lhs: u32): u8 = %wasm { (i32.and (i32.const 0xFF) (local.get $lhs)) }

  #[explicit]
  fun as(lhs: u32): ref = %wasm { (i64.extend_i32_s (local.get $lhs)) }

  fun ==(lhs: u32, rhs: u32): boolean = %wasm { (i32.eq (local.get $lhs) (local.get $rhs)) }
  fun ==(lhs: u32, rhs: u16): boolean = %wasm { (i32.eq (local.get $lhs) (local.get $rhs)) }
  fun ==(lhs: u32, rhs: u8): boolean = %wasm { (i32.eq (local.get $lhs) (local.get $rhs)) }
  fun !=(lhs: u32, rhs: u32): boolean = %wasm { (i32.ne (local.get $lhs) (local.get $rhs)) }
  fun &(lhs: u32, rhs: u32): u32 = %wasm { (i32.and (local.get $lhs) (local.get $rhs)) }
  fun |(lhs: u32, rhs: u32): u32 = %wasm { (i32.or (local.get $lhs) (local.get $rhs)) }
  fun ^(lhs: u32, rhs: u32): u32 = %wasm { (i32.xor (local.get $lhs) (local.get $rhs)) }
  fun +(lhs: u32, rhs: u32): u32 = %wasm { (i32.add (local.get $lhs) (local.get $rhs)) }
  fun -(lhs: u32, rhs: u32): u32 = %wasm { (i32.sub (local.get $lhs) (local.get $rhs)) }
  fun *(lhs: u32, rhs: u32): u32 = %wasm { (i32.mul (local.get $lhs) (local.get $rhs)) }
  fun /(lhs: u32, rhs: u32): u32 = %wasm { (i32.div_u (local.get $lhs) (local.get $rhs)) }
  fun ~(rhs: u32): u32 = %wasm { (i32.xor (i32.const 0xFFFFFFFF) (local.get $rhs)) }
  fun >>>(lhs: u32, rhs: i32): u32 = %wasm { (i32.shr_u (local.get $lhs) (local.get $rhs)) }
  fun >>(lhs: u32, rhs: i32 | u32): u32 = %wasm { (i32.shr_s (local.get $lhs) (local.get $rhs)) }
  fun <<(lhs: u32, rhs: i32 | u32): u32 = %wasm { (i32.shl (local.get $lhs) (local.get $rhs)) }
  fun ^(lhs: u32, rhs: u32): u32 = %wasm { (i32.xor (local.get $lhs) (local.get $rhs)) }
  fun >=(lhs: u32, rhs: u32): boolean = %wasm { (i32.ge_u (local.get $lhs) (local.get $rhs)) }
  fun <=(lhs: u32, rhs: u32): boolean = %wasm { (i32.le_u (local.get $lhs) (local.get $rhs)) }
  fun >(lhs: u32, rhs: u32): boolean = %wasm { (i32.gt_u (local.get $lhs) (local.get $rhs)) }
  fun <(lhs: u32, rhs: u32): boolean = %wasm { (i32.lt_u (local.get $lhs) (local.get $rhs)) }
  fun %(lhs: u32, rhs: u32): u32 = %wasm { (i32.rem_u (local.get $lhs) (local.get $rhs)) }

  fun store(lhs: ref, rhs: u32): void = %wasm {
    (i32.store (call $addressFromRef (local.get $lhs)) (local.get $rhs))
  }

  fun store(lhs: ref, rhs: u32, offset: u32): void = %wasm {
    (i32.store
      (i32.add
        (local.get $offset)
        (call $addressFromRef (local.get $lhs))
      )
      (local.get $rhs)
    )
  }

  fun load(lhs: ref): u32 = %wasm {
    (i32.load (call $addressFromRef (local.get $lhs)))
  }

  fun load(lhs: ref, offset: u32): u32 = %wasm {
    (i32.load
      (i32.add
        (local.get $offset)
        (call $addressFromRef (local.get $lhs))
      )
    )
  }
}