digraph LYS {
  node [shape=box,fontsize=10];
  subgraph "cluster_test/fixtures/types/structTypes.lys" {
    1 [label="Name: Infinity\n(type (alias Infinity (struct)))", fillcolor=grey];
    2 [label="Name: NDet\n(type (alias NDet (struct)))", fillcolor=grey];
    3 [label="Name: Real\n(type (alias Real (struct number:(type (alias f32 (native f32))))))", fillcolor=grey];
    4 [label="Name: number\n(type (alias f32 (native f32)))", fillcolor=grey];
    5 [label="Ref: f32\n(type (alias f32 (native f32)))", fillcolor=grey];
    6 [label="Name: Natural\n(type (alias Natural (struct number:(type (alias i32 (native i32))))))", fillcolor=grey];
    7 [label="Name: number\n(type (alias i32 (native i32)))", fillcolor=grey];
    8 [label="Ref: i32\n(type (alias i32 (native i32)))", fillcolor=grey];
    9 [label="Name: Complex\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
    10 [label="Name: real\n(type (alias f32 (native f32)))", fillcolor=grey];
    11 [label="Ref: f32\n(type (alias f32 (native f32)))", fillcolor=grey];
    12 [label="Name: imaginary\n(type (alias f32 (native f32)))", fillcolor=grey];
    13 [label="Ref: f32\n(type (alias f32 (native f32)))", fillcolor=grey];
    14 [label="Name: Number\n(type (alias Number (union (alias Infinity (struct)) (alias NDet (struct)) (alias Real (struct number:(type (alias f32 (native f32))))) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))))", fillcolor=grey];
    15 [label="UnionTypeNode\n(type (union (alias Infinity (struct)) (alias NDet (struct)) (alias Real (struct number:(type (alias f32 (native f32))))) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))))", fillcolor=grey];
    16 [label="Ref: Infinity\n(type (alias Infinity (struct)))", fillcolor=grey];
    17 [label="Ref: NDet\n(type (alias NDet (struct)))", fillcolor=grey];
    18 [label="Ref: Real\n(type (alias Real (struct number:(type (alias f32 (native f32))))))", fillcolor=grey];
    19 [label="Ref: Natural\n(type (alias Natural (struct number:(type (alias i32 (native i32))))))", fillcolor=grey];
    20 [label="Ref: Complex\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
    21 [label="FunOverload: isComplex\n(fun 'isComplex' ((alias Number)) (alias boolean))", fillcolor=grey];
    22 [label="FunNode: isComplex\n(fun 'isComplex' ((alias Number)) (alias boolean))", fillcolor=grey];
    23 [label="Ref: Number\n(type (alias Number (union (alias Infinity (struct)) (alias NDet (struct)) (alias Real (struct number:(type (alias f32 (native f32))))) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))))", fillcolor=grey];
    24 [label="Name: number\n(type (alias Number (union (alias Infinity (struct)) (alias NDet (struct)) (alias Real (struct number:(type (alias f32 (native f32))))) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))))", fillcolor=grey];
    25 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
    26 [label="Name: isComplex\n(fun 'isComplex' ((alias Number)) (alias boolean))", fillcolor=grey];
    27 [label="FunOverload: main\n(fun 'main' () (alias void))", fillcolor=grey];
    28 [label="FunNode: main\n(fun 'main' () (alias void))", fillcolor=grey];
    29 [label="Ref: void\n(type (alias void (native void)))", fillcolor=grey];
    30 [label="Name: main\n(fun 'main' () (alias void))", fillcolor=grey];
    subgraph "cluster_test/fixtures/types/structTypes.lys_0" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      31 [label="BlockNode\n(native void)", fillcolor=grey];
      32 [label="FunctionCallNode\n(alias boolean (native boolean))", fillcolor=grey];
      33 [label="Ref: isComplex\n(fun 'isComplex' ((alias Number)) (alias boolean))", fillcolor=grey];
      34 [label="Ref: Infinity\n(alias Infinity (struct))", fillcolor=grey];
      35 [label="FunctionCallNode\n(alias boolean (native boolean))", fillcolor=grey];
      36 [label="Ref: isComplex\n(fun 'isComplex' ((alias Number)) (alias boolean))", fillcolor=grey];
      37 [label="FunctionCallNode\n(alias Real (struct number:(type (alias f32 (native f32)))))", fillcolor=grey];
      38 [label="MemberNode\n(fun 'apply' ((alias f32)) (alias Real))", fillcolor=grey];
      39 [label="Ref: Real\n(type (alias Real (struct number:(type (alias f32 (native f32))))))", fillcolor=grey];
      40 [label="Float: 0.00000\n(alias f32 (native f32))", fillcolor=grey];
      41 [label="FunctionCallNode\n(alias boolean (native boolean))", fillcolor=grey];
      42 [label="Ref: isComplex\n(fun 'isComplex' ((alias Number)) (alias boolean))", fillcolor=grey];
      43 [label="FunctionCallNode\n(alias Natural (struct number:(type (alias i32 (native i32)))))", fillcolor=grey];
      44 [label="MemberNode\n(fun 'apply' ((alias i32)) (alias Natural))", fillcolor=grey];
      45 [label="Ref: Natural\n(type (alias Natural (struct number:(type (alias i32 (native i32))))))", fillcolor=grey];
      46 [label="Int: 123\n(alias i32 (native i32))", fillcolor=grey];
      47 [label="FunctionCallNode\n(alias boolean (native boolean))", fillcolor=grey];
      48 [label="Ref: isComplex\n(fun 'isComplex' ((alias Number)) (alias boolean))", fillcolor=grey];
      49 [label="FunctionCallNode\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
      50 [label="MemberNode\n(fun 'apply' ((alias f32) (alias f32)) (alias Complex))", fillcolor=grey];
      51 [label="Ref: Complex\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
      52 [label="Float: 0.00000\n(alias f32 (native f32))", fillcolor=grey];
      53 [label="Float: 99.10000\n(alias f32 (native f32))", fillcolor=grey];
      54 [label="Ref: void\n(type (alias void (native void)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::main()";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys_1" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys_2" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys_3" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys_4" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys_5" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys_6" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys_7" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys_8" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys_9" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Number.is(Number)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys_10" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys_11" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys_12" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys_13" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys_14" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys_15" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys_16" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys_17" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys_18" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys_19" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys_20" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      55 [label="Name: number\n(type (alias Number (union (alias Infinity (struct)) (alias NDet (struct)) (alias Real (struct number:(type (alias f32 (native f32))))) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))))", fillcolor=grey];
      56 [label="PatternMatcherNode\n(alias boolean (native boolean))", fillcolor=grey];
      57 [label="Ref: number\n(alias Number (union (alias Infinity (struct)) (alias NDet (struct)) (alias Real (struct number:(type (alias f32 (native f32))))) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))))", fillcolor=grey];
      58 [label="MatchCaseIsNode\n(alias boolean (native boolean))", fillcolor=grey];
      59 [label="Ref: Real\n(type (alias Real (struct number:(type (alias f32 (native f32))))))", fillcolor=grey];
      60 [label="BooleanLiteral\n(alias boolean (native boolean))", fillcolor=grey];
      61 [label="MatchCaseIsNode\n(alias boolean (native boolean))", fillcolor=grey];
      62 [label="Ref: Natural\n(type (alias Natural (struct number:(type (alias i32 (native i32))))))", fillcolor=grey];
      63 [label="BooleanLiteral\n(alias boolean (native boolean))", fillcolor=grey];
      64 [label="MatchDefaultNode\n(alias boolean (native boolean))", fillcolor=grey];
      65 [label="BooleanLiteral\n(alias boolean (native boolean))", fillcolor=grey];
      66 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::isComplex(Number)";
    }
    label="test/fixtures/types/structTypes.lys";
  }
  subgraph "cluster_<no-document>" {
    67 [label="StructTypeNode\n(type (struct))", fillcolor=grey];
    68 [label="StructTypeNode\n(type (struct))", fillcolor=grey];
    69 [label="StructTypeNode\n(type (struct number:(type (alias f32 (native f32)))))", fillcolor=grey];
    70 [label="StructTypeNode\n(type (struct number:(type (alias i32 (native i32)))))", fillcolor=grey];
    71 [label="StructTypeNode\n(type (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
    subgraph "cluster_<no-document>_0" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::main()";
    }
    subgraph "cluster_<no-document>_1" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_<no-document>_2" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_<no-document>_3" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_<no-document>_4" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_<no-document>_5" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_<no-document>_6" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_<no-document>_7" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_<no-document>_8" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_<no-document>_9" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Number.is(Number)";
    }
    subgraph "cluster_<no-document>_10" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_<no-document>_11" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_<no-document>_12" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_<no-document>_13" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_<no-document>_14" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_<no-document>_15" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_<no-document>_16" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_<no-document>_17" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_<no-document>_18" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_<no-document>_19" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_<no-document>_20" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      72 [label="Name: $\n(alias Real (struct number:(type (alias f32 (native f32)))))", fillcolor=grey];
      73 [label="TypeReducerNode\n(union (alias Infinity (struct)) (alias NDet (struct)) (alias Real (struct number:(type (alias f32 (native f32))))) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
      74 [label="Name: $\n(alias Natural (struct number:(type (alias i32 (native i32)))))", fillcolor=grey];
      75 [label="TypeReducerNode\n(union (alias Infinity (struct)) (alias NDet (struct)) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
      76 [label="TypeReducerNode\n(union (alias Infinity (struct)) (alias NDet (struct)) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::isComplex(Number)";
    }
    label="<no-document>";
  }
  subgraph "cluster_test/fixtures/types/structTypes.lys#Infinity" {
    77 [label="FunOverload: Infinity$discriminant\n(fun 'Infinity$discriminant' () (alias i64))", fillcolor=grey];
    78 [label="FunNode: Infinity$discriminant\n(fun 'Infinity$discriminant' () (alias i64))", fillcolor=grey];
    79 [label="Ref: i64\n(type (alias i64 (native i64)))", fillcolor=grey];
    80 [label="Name: Infinity$discriminant\n(fun 'Infinity$discriminant' () (alias i64))", fillcolor=grey];
    81 [label="FunOverload: apply\n(fun 'apply' () (alias Infinity))", fillcolor=grey];
    82 [label="FunNode: apply\n(fun 'apply' () (alias Infinity))", fillcolor=grey];
    83 [label="Ref: Infinity\n(type (alias Infinity (struct)))", fillcolor=grey];
    84 [label="Name: apply\n(fun 'apply' () (alias Infinity))", fillcolor=grey];
    85 [label="FunOverload: is\n(fun 'is' ((alias Infinity)) (alias boolean))", fillcolor=grey];
    86 [label="FunNode: is\n(fun 'is' ((alias Infinity)) (alias boolean))", fillcolor=grey];
    87 [label="Ref: Infinity\n(type (alias Infinity (struct)))", fillcolor=grey];
    88 [label="Name: a\n(type (alias Infinity (struct)))", fillcolor=grey];
    89 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
    90 [label="Name: is\n(fun 'is' ((alias Infinity)) (alias boolean))", fillcolor=grey];
    91 [label="FunOverload: ==\n(fun '==' ((alias Infinity) (alias ref)) (alias boolean))", fillcolor=grey];
    92 [label="FunNode: ==\n(fun '==' ((alias Infinity) (alias ref)) (alias boolean))", fillcolor=grey];
    93 [label="Ref: Infinity\n(type (alias Infinity (struct)))", fillcolor=grey];
    94 [label="Name: a\n(alias Infinity (struct))", fillcolor=grey];
    95 [label="Ref: ref\n(type (alias ref (ref ?)))", fillcolor=grey];
    96 [label="Name: b\n(alias ref (ref ?))", fillcolor=grey];
    97 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
    98 [label="Name: ==\n(fun '==' ((alias Infinity) (alias ref)) (alias boolean))", fillcolor=grey];
    99 [label="FunOverload: !=\n(fun '!=' ((alias Infinity) (alias ref)) (alias boolean))", fillcolor=grey];
    100 [label="FunNode: !=\n(fun '!=' ((alias Infinity) (alias ref)) (alias boolean))", fillcolor=grey];
    101 [label="Ref: Infinity\n(type (alias Infinity (struct)))", fillcolor=grey];
    102 [label="Name: a\n(alias Infinity (struct))", fillcolor=grey];
    103 [label="Ref: ref\n(type (alias ref (ref ?)))", fillcolor=grey];
    104 [label="Name: b\n(alias ref (ref ?))", fillcolor=grey];
    105 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
    106 [label="Name: !=\n(fun '!=' ((alias Infinity) (alias ref)) (alias boolean))", fillcolor=grey];
    107 [label="FunOverload: store\n(fun 'store' ((alias ref) (alias Infinity) (alias i32)) (alias void))", fillcolor=grey];
    108 [label="FunNode: store\n(fun 'store' ((alias ref) (alias Infinity) (alias i32)) (alias void))", fillcolor=grey];
    109 [label="Ref: ref\n(type (alias ref (ref ?)))", fillcolor=grey];
    110 [label="Name: lhs\n(alias ref (ref ?))", fillcolor=grey];
    111 [label="Ref: Infinity\n(type (alias Infinity (struct)))", fillcolor=grey];
    112 [label="Name: rhs\n(alias Infinity (struct))", fillcolor=grey];
    113 [label="Ref: i32\n(type (alias i32 (native i32)))", fillcolor=grey];
    114 [label="Name: offset\n(alias i32 (native i32))", fillcolor=grey];
    115 [label="Ref: void\n(type (alias void (native void)))", fillcolor=grey];
    116 [label="Name: store\n(fun 'store' ((alias ref) (alias Infinity) (alias i32)) (alias void))", fillcolor=grey];
    117 [label="FunOverload: load\n(fun 'load' ((alias ref) (alias i32)) (alias Infinity))", fillcolor=grey];
    118 [label="FunNode: load\n(fun 'load' ((alias ref) (alias i32)) (alias Infinity))", fillcolor=grey];
    119 [label="Ref: ref\n(type (alias ref (ref ?)))", fillcolor=grey];
    120 [label="Name: lhs\n(alias ref (ref ?))", fillcolor=grey];
    121 [label="Ref: i32\n(type (alias i32 (native i32)))", fillcolor=grey];
    122 [label="Name: offset\n(alias i32 (native i32))", fillcolor=grey];
    123 [label="Ref: Infinity\n(type (alias Infinity (struct)))", fillcolor=grey];
    124 [label="Name: load\n(fun 'load' ((alias ref) (alias i32)) (alias Infinity))", fillcolor=grey];
    subgraph "cluster_test/fixtures/types/structTypes.lys#Infinity_0" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      125 [label="BlockNode\n(alias i64 (native i64))", fillcolor=grey];
      126 [label="ValDecl: discriminant\n(native void)", fillcolor=grey];
      127 [label="Name: discriminant\n(alias i32 (native i32))", fillcolor=grey];
      128 [label="Ref: i32\n(type (alias i32 (native i32)))", fillcolor=grey];
      129 [label="MemberNode\n(native i32)", fillcolor=grey];
      130 [label="Ref: Infinity\n(type (alias Infinity (struct)))", fillcolor=grey];
      131 [label="BinOp: <<\n(alias i64 (native i64))", fillcolor=grey];
      132 [label="AsExpressionNode\n(alias i64 (native i64))", fillcolor=grey];
      133 [label="Ref: discriminant\n(alias i32 (native i32))", fillcolor=grey];
      134 [label="Ref: i64\n(type (alias i64 (native i64)))", fillcolor=grey];
      135 [label="Int: 32\n(alias i32 (native i32))", fillcolor=grey];
      136 [label="Ref: i64\n(type (alias i64 (native i64)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Infinity.Infinity$discriminant()";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Infinity_1" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::main()";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Infinity_2" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Infinity_3" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      137 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      138 [label="Ref: Infinity$discriminant\n(fun 'Infinity$discriminant' () (alias i64))", fillcolor=grey];
      139 [label="Ref: Infinity\n(type (alias Infinity (struct)))", fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Infinity_4" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Infinity_5" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Infinity_6" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Infinity_7" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Infinity_8" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Infinity_9" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Infinity.apply()";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Infinity_10" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Infinity_11" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Infinity_12" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Infinity_13" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Number.is(Number)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Infinity_14" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Infinity_15" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      140 [label="Name: a\n(type (alias Infinity (struct)))", fillcolor=grey];
      141 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      142 [label="Ref: Infinity$discriminant\n(fun 'Infinity$discriminant' () (alias i64))", fillcolor=grey];
      143 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Infinity_16" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Infinity_17" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Infinity_18" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Infinity_19" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Infinity_20" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Infinity_21" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Infinity_22" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Infinity.is(Infinity)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Infinity_23" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Infinity_24" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Infinity_25" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Infinity_26" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Infinity_27" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      144 [label="Name: lhs\n(alias ref (ref ?))", fillcolor=grey];
      145 [label="Name: offset\n(alias i32 (native i32))", fillcolor=grey];
      146 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      147 [label="Ref: addressFromRef\n(fun 'addressFromRef' ((alias ref)) (alias u32))", fillcolor=grey];
      148 [label="Ref: Infinity\n(type (alias Infinity (struct)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Infinity.load(ref,i32)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Infinity_28" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      149 [label="Name: a\n(alias Infinity (struct))", fillcolor=grey];
      150 [label="Name: b\n(alias ref (ref ?))", fillcolor=grey];
      151 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      152 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Infinity.==(Infinity,ref)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Infinity_29" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      153 [label="Name: a\n(alias Infinity (struct))", fillcolor=grey];
      154 [label="Name: b\n(alias ref (ref ?))", fillcolor=grey];
      155 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      156 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Infinity.!=(Infinity,ref)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Infinity_30" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      157 [label="Name: lhs\n(alias ref (ref ?))", fillcolor=grey];
      158 [label="Name: rhs\n(alias Infinity (struct))", fillcolor=grey];
      159 [label="Name: offset\n(alias i32 (native i32))", fillcolor=grey];
      160 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      161 [label="Ref: addressFromRef\n(fun 'addressFromRef' ((alias ref)) (alias u32))", fillcolor=grey];
      162 [label="Ref: void\n(type (alias void (native void)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Infinity.store(ref,Infinity,i32)";
    }
    label="test/fixtures/types/structTypes.lys#Infinity";
  }
  subgraph "cluster_test/fixtures/types/structTypes.lys#NDet" {
    163 [label="FunOverload: NDet$discriminant\n(fun 'NDet$discriminant' () (alias i64))", fillcolor=grey];
    164 [label="FunNode: NDet$discriminant\n(fun 'NDet$discriminant' () (alias i64))", fillcolor=grey];
    165 [label="Ref: i64\n(type (alias i64 (native i64)))", fillcolor=grey];
    166 [label="Name: NDet$discriminant\n(fun 'NDet$discriminant' () (alias i64))", fillcolor=grey];
    167 [label="FunOverload: apply\n(fun 'apply' () (alias NDet))", fillcolor=grey];
    168 [label="FunNode: apply\n(fun 'apply' () (alias NDet))", fillcolor=grey];
    169 [label="Ref: NDet\n(type (alias NDet (struct)))", fillcolor=grey];
    170 [label="Name: apply\n(fun 'apply' () (alias NDet))", fillcolor=grey];
    171 [label="FunOverload: is\n(fun 'is' ((alias NDet)) (alias boolean))", fillcolor=grey];
    172 [label="FunNode: is\n(fun 'is' ((alias NDet)) (alias boolean))", fillcolor=grey];
    173 [label="Ref: NDet\n(type (alias NDet (struct)))", fillcolor=grey];
    174 [label="Name: a\n(type (alias NDet (struct)))", fillcolor=grey];
    175 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
    176 [label="Name: is\n(fun 'is' ((alias NDet)) (alias boolean))", fillcolor=grey];
    177 [label="FunOverload: ==\n(fun '==' ((alias NDet) (alias ref)) (alias boolean))", fillcolor=grey];
    178 [label="FunNode: ==\n(fun '==' ((alias NDet) (alias ref)) (alias boolean))", fillcolor=grey];
    179 [label="Ref: NDet\n(type (alias NDet (struct)))", fillcolor=grey];
    180 [label="Name: a\n(alias NDet (struct))", fillcolor=grey];
    181 [label="Ref: ref\n(type (alias ref (ref ?)))", fillcolor=grey];
    182 [label="Name: b\n(alias ref (ref ?))", fillcolor=grey];
    183 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
    184 [label="Name: ==\n(fun '==' ((alias NDet) (alias ref)) (alias boolean))", fillcolor=grey];
    185 [label="FunOverload: !=\n(fun '!=' ((alias NDet) (alias ref)) (alias boolean))", fillcolor=grey];
    186 [label="FunNode: !=\n(fun '!=' ((alias NDet) (alias ref)) (alias boolean))", fillcolor=grey];
    187 [label="Ref: NDet\n(type (alias NDet (struct)))", fillcolor=grey];
    188 [label="Name: a\n(alias NDet (struct))", fillcolor=grey];
    189 [label="Ref: ref\n(type (alias ref (ref ?)))", fillcolor=grey];
    190 [label="Name: b\n(alias ref (ref ?))", fillcolor=grey];
    191 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
    192 [label="Name: !=\n(fun '!=' ((alias NDet) (alias ref)) (alias boolean))", fillcolor=grey];
    193 [label="FunOverload: store\n(fun 'store' ((alias ref) (alias NDet) (alias i32)) (alias void))", fillcolor=grey];
    194 [label="FunNode: store\n(fun 'store' ((alias ref) (alias NDet) (alias i32)) (alias void))", fillcolor=grey];
    195 [label="Ref: ref\n(type (alias ref (ref ?)))", fillcolor=grey];
    196 [label="Name: lhs\n(alias ref (ref ?))", fillcolor=grey];
    197 [label="Ref: NDet\n(type (alias NDet (struct)))", fillcolor=grey];
    198 [label="Name: rhs\n(alias NDet (struct))", fillcolor=grey];
    199 [label="Ref: i32\n(type (alias i32 (native i32)))", fillcolor=grey];
    200 [label="Name: offset\n(alias i32 (native i32))", fillcolor=grey];
    201 [label="Ref: void\n(type (alias void (native void)))", fillcolor=grey];
    202 [label="Name: store\n(fun 'store' ((alias ref) (alias NDet) (alias i32)) (alias void))", fillcolor=grey];
    203 [label="FunOverload: load\n(fun 'load' ((alias ref) (alias i32)) (alias NDet))", fillcolor=grey];
    204 [label="FunNode: load\n(fun 'load' ((alias ref) (alias i32)) (alias NDet))", fillcolor=grey];
    205 [label="Ref: ref\n(type (alias ref (ref ?)))", fillcolor=grey];
    206 [label="Name: lhs\n(alias ref (ref ?))", fillcolor=grey];
    207 [label="Ref: i32\n(type (alias i32 (native i32)))", fillcolor=grey];
    208 [label="Name: offset\n(alias i32 (native i32))", fillcolor=grey];
    209 [label="Ref: NDet\n(type (alias NDet (struct)))", fillcolor=grey];
    210 [label="Name: load\n(fun 'load' ((alias ref) (alias i32)) (alias NDet))", fillcolor=grey];
    subgraph "cluster_test/fixtures/types/structTypes.lys#NDet_0" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      211 [label="BlockNode\n(alias i64 (native i64))", fillcolor=grey];
      212 [label="ValDecl: discriminant\n(native void)", fillcolor=grey];
      213 [label="Name: discriminant\n(alias i32 (native i32))", fillcolor=grey];
      214 [label="Ref: i32\n(type (alias i32 (native i32)))", fillcolor=grey];
      215 [label="MemberNode\n(native i32)", fillcolor=grey];
      216 [label="Ref: NDet\n(type (alias NDet (struct)))", fillcolor=grey];
      217 [label="BinOp: <<\n(alias i64 (native i64))", fillcolor=grey];
      218 [label="AsExpressionNode\n(alias i64 (native i64))", fillcolor=grey];
      219 [label="Ref: discriminant\n(alias i32 (native i32))", fillcolor=grey];
      220 [label="Ref: i64\n(type (alias i64 (native i64)))", fillcolor=grey];
      221 [label="Int: 32\n(alias i32 (native i32))", fillcolor=grey];
      222 [label="Ref: i64\n(type (alias i64 (native i64)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::NDet.NDet$discriminant()";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#NDet_1" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::main()";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#NDet_2" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#NDet_3" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#NDet_4" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#NDet_5" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#NDet_6" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#NDet_7" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#NDet_8" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#NDet_9" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#NDet_10" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Number.is(Number)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#NDet_11" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#NDet_12" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#NDet_13" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      223 [label="Name: a\n(type (alias NDet (struct)))", fillcolor=grey];
      224 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      225 [label="Ref: NDet$discriminant\n(fun 'NDet$discriminant' () (alias i64))", fillcolor=grey];
      226 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#NDet_14" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#NDet_15" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#NDet_16" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#NDet_17" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#NDet_18" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#NDet_19" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#NDet_20" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::NDet.is(NDet)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#NDet_21" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#NDet_22" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#NDet_23" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#NDet_24" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      227 [label="Name: lhs\n(alias ref (ref ?))", fillcolor=grey];
      228 [label="Name: offset\n(alias i32 (native i32))", fillcolor=grey];
      229 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      230 [label="Ref: addressFromRef\n(fun 'addressFromRef' ((alias ref)) (alias u32))", fillcolor=grey];
      231 [label="Ref: NDet\n(type (alias NDet (struct)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::NDet.load(ref,i32)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#NDet_25" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      232 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      233 [label="Ref: NDet$discriminant\n(fun 'NDet$discriminant' () (alias i64))", fillcolor=grey];
      234 [label="Ref: NDet\n(type (alias NDet (struct)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::NDet.apply()";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#NDet_26" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      235 [label="Name: a\n(alias NDet (struct))", fillcolor=grey];
      236 [label="Name: b\n(alias ref (ref ?))", fillcolor=grey];
      237 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      238 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::NDet.==(NDet,ref)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#NDet_27" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      239 [label="Name: a\n(alias NDet (struct))", fillcolor=grey];
      240 [label="Name: b\n(alias ref (ref ?))", fillcolor=grey];
      241 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      242 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::NDet.!=(NDet,ref)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#NDet_28" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      243 [label="Name: lhs\n(alias ref (ref ?))", fillcolor=grey];
      244 [label="Name: rhs\n(alias NDet (struct))", fillcolor=grey];
      245 [label="Name: offset\n(alias i32 (native i32))", fillcolor=grey];
      246 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      247 [label="Ref: addressFromRef\n(fun 'addressFromRef' ((alias ref)) (alias u32))", fillcolor=grey];
      248 [label="Ref: void\n(type (alias void (native void)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::NDet.store(ref,NDet,i32)";
    }
    label="test/fixtures/types/structTypes.lys#NDet";
  }
  subgraph "cluster_test/fixtures/types/structTypes.lys#Real" {
    249 [label="FunOverload: Real$discriminant\n(fun 'Real$discriminant' () (alias i64))", fillcolor=grey];
    250 [label="FunNode: Real$discriminant\n(fun 'Real$discriminant' () (alias i64))", fillcolor=grey];
    251 [label="Ref: i64\n(type (alias i64 (native i64)))", fillcolor=grey];
    252 [label="Name: Real$discriminant\n(fun 'Real$discriminant' () (alias i64))", fillcolor=grey];
    253 [label="FunOverload: apply\n(fun 'apply' ((alias f32)) (alias Real))", fillcolor=grey];
    254 [label="FunNode: apply\n(fun 'apply' ((alias f32)) (alias Real))", fillcolor=grey];
    255 [label="Ref: f32\n(type (alias f32 (native f32)))", fillcolor=grey];
    256 [label="Name: number\n(alias f32 (native f32))", fillcolor=grey];
    257 [label="Ref: Real\n(type (alias Real (struct number:(type (alias f32 (native f32))))))", fillcolor=grey];
    258 [label="Name: apply\n(fun 'apply' ((alias f32)) (alias Real))", fillcolor=grey];
    259 [label="FunOverload: fromPointer\n(fun 'fromPointer' ((alias i32)) (alias Real))", fillcolor=grey];
    260 [label="FunNode: fromPointer\n(fun 'fromPointer' ((alias i32)) (alias Real))", fillcolor=grey];
    261 [label="Ref: i32\n(type (alias i32 (native i32)))", fillcolor=grey];
    262 [label="Name: ptr\n(alias i32 (native i32))", fillcolor=grey];
    263 [label="Ref: Real\n(type (alias Real (struct number:(type (alias f32 (native f32))))))", fillcolor=grey];
    264 [label="Name: fromPointer\n(fun 'fromPointer' ((alias i32)) (alias Real))", fillcolor=grey];
    265 [label="FunOverload: ==\n(fun '==' ((alias Real) (alias Real)) (alias boolean))", fillcolor=grey];
    266 [label="FunNode: ==\n(fun '==' ((alias Real) (alias Real)) (alias boolean))", fillcolor=grey];
    267 [label="Ref: Real\n(type (alias Real (struct number:(type (alias f32 (native f32))))))", fillcolor=grey];
    268 [label="Name: a\n(alias Real (struct number:(type (alias f32 (native f32)))))", fillcolor=grey];
    269 [label="Ref: Real\n(type (alias Real (struct number:(type (alias f32 (native f32))))))", fillcolor=grey];
    270 [label="Name: b\n(alias Real (struct number:(type (alias f32 (native f32)))))", fillcolor=grey];
    271 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
    272 [label="Name: ==\n(fun '==' ((alias Real) (alias Real)) (alias boolean))", fillcolor=grey];
    273 [label="FunOverload: !=\n(fun '!=' ((alias Real) (alias Real)) (alias boolean))", fillcolor=grey];
    274 [label="FunNode: !=\n(fun '!=' ((alias Real) (alias Real)) (alias boolean))", fillcolor=grey];
    275 [label="Ref: Real\n(type (alias Real (struct number:(type (alias f32 (native f32))))))", fillcolor=grey];
    276 [label="Name: a\n(alias Real (struct number:(type (alias f32 (native f32)))))", fillcolor=grey];
    277 [label="Ref: Real\n(type (alias Real (struct number:(type (alias f32 (native f32))))))", fillcolor=grey];
    278 [label="Name: b\n(alias Real (struct number:(type (alias f32 (native f32)))))", fillcolor=grey];
    279 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
    280 [label="Name: !=\n(fun '!=' ((alias Real) (alias Real)) (alias boolean))", fillcolor=grey];
    281 [label="FunOverload: property_number\n(intersection (fun 'property_number' ((alias Real)) (alias f32)) (fun 'property_number' ((alias Real) (alias f32)) (alias void)))", fillcolor=grey];
    282 [label="FunNode: property_number\n(fun 'property_number' ((alias Real)) (alias f32))", fillcolor=grey];
    283 [label="Ref: Real\n(type (alias Real (struct number:(type (alias f32 (native f32))))))", fillcolor=grey];
    284 [label="Name: self\n(alias Real (struct number:(type (alias f32 (native f32)))))", fillcolor=grey];
    285 [label="Ref: f32\n(type (alias f32 (native f32)))", fillcolor=grey];
    286 [label="FunNode: property_number\n(fun 'property_number' ((alias Real) (alias f32)) (alias void))", fillcolor=grey];
    287 [label="Ref: Real\n(type (alias Real (struct number:(type (alias f32 (native f32))))))", fillcolor=grey];
    288 [label="Name: self\n(alias Real (struct number:(type (alias f32 (native f32)))))", fillcolor=grey];
    289 [label="Ref: f32\n(type (alias f32 (native f32)))", fillcolor=grey];
    290 [label="Name: value\n(alias f32 (native f32))", fillcolor=grey];
    291 [label="Ref: void\n(type (alias void (native void)))", fillcolor=grey];
    292 [label="Name: property_number\n(intersection (fun 'property_number' ((alias Real)) (alias f32)) (fun 'property_number' ((alias Real) (alias f32)) (alias void)))", fillcolor=grey];
    293 [label="FunOverload: property$0\n(intersection (fun 'property$0' ((alias Real)) (alias f32)) (fun 'property$0' ((alias Real) (alias f32)) (alias void)))", fillcolor=grey];
    294 [label="FunNode: property$0\n(fun 'property$0' ((alias Real)) (alias f32))", fillcolor=grey];
    295 [label="Ref: Real\n(type (alias Real (struct number:(type (alias f32 (native f32))))))", fillcolor=grey];
    296 [label="Name: self\n(type (alias Real (struct number:(type (alias f32 (native f32))))))", fillcolor=grey];
    297 [label="Ref: f32\n(type (alias f32 (native f32)))", fillcolor=grey];
    298 [label="FunNode: property$0\n(fun 'property$0' ((alias Real) (alias f32)) (alias void))", fillcolor=grey];
    299 [label="Ref: Real\n(type (alias Real (struct number:(type (alias f32 (native f32))))))", fillcolor=grey];
    300 [label="Name: self\n(type (alias Real (struct number:(type (alias f32 (native f32))))))", fillcolor=grey];
    301 [label="Ref: f32\n(type (alias f32 (native f32)))", fillcolor=grey];
    302 [label="Name: value\n(alias f32 (native f32))", fillcolor=grey];
    303 [label="Ref: void\n(type (alias void (native void)))", fillcolor=grey];
    304 [label="Name: property$0\n(intersection (fun 'property$0' ((alias Real)) (alias f32)) (fun 'property$0' ((alias Real) (alias f32)) (alias void)))", fillcolor=grey];
    305 [label="FunOverload: is\n(fun 'is' ((alias Real)) (alias boolean))", fillcolor=grey];
    306 [label="FunNode: is\n(fun 'is' ((alias Real)) (alias boolean))", fillcolor=grey];
    307 [label="Ref: Real\n(type (alias Real (struct number:(type (alias f32 (native f32))))))", fillcolor=grey];
    308 [label="Name: a\n(type (alias Real (struct number:(type (alias f32 (native f32))))))", fillcolor=grey];
    309 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
    310 [label="Name: is\n(fun 'is' ((alias Real)) (alias boolean))", fillcolor=grey];
    311 [label="FunOverload: store\n(fun 'store' ((alias ref) (alias Real) (alias i32)) (alias void))", fillcolor=grey];
    312 [label="FunNode: store\n(fun 'store' ((alias ref) (alias Real) (alias i32)) (alias void))", fillcolor=grey];
    313 [label="Ref: ref\n(type (alias ref (ref ?)))", fillcolor=grey];
    314 [label="Name: lhs\n(alias ref (ref ?))", fillcolor=grey];
    315 [label="Ref: Real\n(type (alias Real (struct number:(type (alias f32 (native f32))))))", fillcolor=grey];
    316 [label="Name: rhs\n(alias Real (struct number:(type (alias f32 (native f32)))))", fillcolor=grey];
    317 [label="Ref: i32\n(type (alias i32 (native i32)))", fillcolor=grey];
    318 [label="Name: offset\n(alias i32 (native i32))", fillcolor=grey];
    319 [label="Ref: void\n(type (alias void (native void)))", fillcolor=grey];
    320 [label="Name: store\n(fun 'store' ((alias ref) (alias Real) (alias i32)) (alias void))", fillcolor=grey];
    321 [label="FunOverload: load\n(fun 'load' ((alias ref) (alias i32)) (alias Real))", fillcolor=grey];
    322 [label="FunNode: load\n(fun 'load' ((alias ref) (alias i32)) (alias Real))", fillcolor=grey];
    323 [label="Ref: ref\n(type (alias ref (ref ?)))", fillcolor=grey];
    324 [label="Name: lhs\n(alias ref (ref ?))", fillcolor=grey];
    325 [label="Ref: i32\n(type (alias i32 (native i32)))", fillcolor=grey];
    326 [label="Name: offset\n(alias i32 (native i32))", fillcolor=grey];
    327 [label="Ref: Real\n(type (alias Real (struct number:(type (alias f32 (native f32))))))", fillcolor=grey];
    328 [label="Name: load\n(fun 'load' ((alias ref) (alias i32)) (alias Real))", fillcolor=grey];
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_0" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      329 [label="BlockNode\n(alias i64 (native i64))", fillcolor=grey];
      330 [label="ValDecl: discriminant\n(native void)", fillcolor=grey];
      331 [label="Name: discriminant\n(alias i32 (native i32))", fillcolor=grey];
      332 [label="Ref: i32\n(type (alias i32 (native i32)))", fillcolor=grey];
      333 [label="MemberNode\n(native i32)", fillcolor=grey];
      334 [label="Ref: Real\n(type (alias Real (struct number:(type (alias f32 (native f32))))))", fillcolor=grey];
      335 [label="BinOp: <<\n(alias i64 (native i64))", fillcolor=grey];
      336 [label="AsExpressionNode\n(alias i64 (native i64))", fillcolor=grey];
      337 [label="Ref: discriminant\n(alias i32 (native i32))", fillcolor=grey];
      338 [label="Ref: i64\n(type (alias i64 (native i64)))", fillcolor=grey];
      339 [label="Int: 32\n(alias i32 (native i32))", fillcolor=grey];
      340 [label="Ref: i64\n(type (alias i64 (native i64)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Real.Real$discriminant()";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_1" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::main()";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_2" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_3" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_4" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      341 [label="Name: number\n(alias f32 (native f32))", fillcolor=grey];
      342 [label="BlockNode\n(alias Real (struct number:(type (alias f32 (native f32)))))", fillcolor=grey];
      343 [label="VarDecl: $ref\n(native void)", fillcolor=grey];
      344 [label="Name: $ref\n(alias Real (struct number:(type (alias f32 (native f32)))))", fillcolor=grey];
      345 [label="FunctionCallNode\n(alias Real (struct number:(type (alias f32 (native f32)))))", fillcolor=grey];
      346 [label="Ref: fromPointer\n(fun 'fromPointer' ((alias i32)) (alias Real))", fillcolor=grey];
      347 [label="FunctionCallNode\n(alias i32 (native i32))", fillcolor=grey];
      348 [label="Ref: system::memory::calloc\n(fun 'calloc' ((alias i32) (alias i32)) (alias i32))", fillcolor=grey];
      349 [label="Int: 1\n(alias i32 (native i32))", fillcolor=grey];
      350 [label="MemberNode\n(native i32)", fillcolor=grey];
      351 [label="Ref: Real\n(type (alias Real (struct number:(type (alias f32 (native f32))))))", fillcolor=grey];
      352 [label="FunctionCallNode\n(alias void (native void))", fillcolor=grey];
      353 [label="Ref: property$0\n(intersection (fun 'property$0' ((alias Real)) (alias f32)) (fun 'property$0' ((alias Real) (alias f32)) (alias void)))", fillcolor=grey];
      354 [label="Ref: $ref\n(alias Real (struct number:(type (alias f32 (native f32)))))", fillcolor=grey];
      355 [label="Ref: number\n(alias f32 (native f32))", fillcolor=grey];
      356 [label="Ref: $ref\n(alias Real (struct number:(type (alias f32 (native f32)))))", fillcolor=grey];
      357 [label="Ref: Real\n(type (alias Real (struct number:(type (alias f32 (native f32))))))", fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_5" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_6" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_7" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_8" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_9" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_10" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Real.apply(f32)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_11" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      358 [label="Name: ptr\n(alias i32 (native i32))", fillcolor=grey];
      359 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      360 [label="Ref: Real$discriminant\n(fun 'Real$discriminant' () (alias i64))", fillcolor=grey];
      361 [label="Ref: Real\n(type (alias Real (struct number:(type (alias f32 (native f32))))))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Real.fromPointer(i32)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_12" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      362 [label="Name: self\n(type (alias Real (struct number:(type (alias f32 (native f32))))))", fillcolor=grey];
      363 [label="FunctionCallNode\n(alias f32 (native f32))", fillcolor=grey];
      364 [label="MemberNode\n(intersection (fun 'load' ((alias ref)) (alias f32)) (fun 'load' ((alias ref) (alias i32)) (alias f32)))", fillcolor=grey];
      365 [label="Ref: f32\n(type (alias f32 (native f32)))", fillcolor=grey];
      366 [label="Ref: self\n(alias Real (struct number:(type (alias f32 (native f32)))))", fillcolor=grey];
      367 [label="MemberNode\n(native i32)", fillcolor=grey];
      368 [label="Ref: Real\n(type (alias Real (struct number:(type (alias f32 (native f32))))))", fillcolor=grey];
      369 [label="Ref: f32\n(type (alias f32 (native f32)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Real.property$0(Real)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_13" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      370 [label="Name: self\n(type (alias Real (struct number:(type (alias f32 (native f32))))))", fillcolor=grey];
      371 [label="Name: value\n(alias f32 (native f32))", fillcolor=grey];
      372 [label="FunctionCallNode\n(alias void (native void))", fillcolor=grey];
      373 [label="MemberNode\n(intersection (fun 'store' ((alias ref) (alias f32)) (alias void)) (fun 'store' ((alias ref) (alias f32) (alias i32)) (alias void)))", fillcolor=grey];
      374 [label="Ref: f32\n(type (alias f32 (native f32)))", fillcolor=grey];
      375 [label="Ref: self\n(alias Real (struct number:(type (alias f32 (native f32)))))", fillcolor=grey];
      376 [label="Ref: value\n(alias f32 (native f32))", fillcolor=grey];
      377 [label="MemberNode\n(native i32)", fillcolor=grey];
      378 [label="Ref: Real\n(type (alias Real (struct number:(type (alias f32 (native f32))))))", fillcolor=grey];
      379 [label="Ref: void\n(type (alias void (native void)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Real.property$0_1(Real,f32)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_14" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_15" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_16" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Number.is(Number)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_17" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_18" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_19" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_20" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      380 [label="Name: a\n(type (alias Real (struct number:(type (alias f32 (native f32))))))", fillcolor=grey];
      381 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      382 [label="Ref: Real$discriminant\n(fun 'Real$discriminant' () (alias i64))", fillcolor=grey];
      383 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_21" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_22" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_23" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_24" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_25" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_26" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_27" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Real.is(Real)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_28" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_29" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_30" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      384 [label="Name: lhs\n(alias ref (ref ?))", fillcolor=grey];
      385 [label="Name: offset\n(alias i32 (native i32))", fillcolor=grey];
      386 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      387 [label="Ref: addressFromRef\n(fun 'addressFromRef' ((alias ref)) (alias u32))", fillcolor=grey];
      388 [label="Ref: Real\n(type (alias Real (struct number:(type (alias f32 (native f32))))))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Real.load(ref,i32)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_31" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      389 [label="Name: a\n(alias Real (struct number:(type (alias f32 (native f32)))))", fillcolor=grey];
      390 [label="Name: b\n(alias Real (struct number:(type (alias f32 (native f32)))))", fillcolor=grey];
      391 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      392 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Real.==(Real,Real)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_32" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      393 [label="Name: a\n(alias Real (struct number:(type (alias f32 (native f32)))))", fillcolor=grey];
      394 [label="Name: b\n(alias Real (struct number:(type (alias f32 (native f32)))))", fillcolor=grey];
      395 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      396 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Real.!=(Real,Real)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_33" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      397 [label="Name: self\n(alias Real (struct number:(type (alias f32 (native f32)))))", fillcolor=grey];
      398 [label="FunctionCallNode\n(alias f32 (native f32))", fillcolor=grey];
      399 [label="Ref: property$0\n(intersection (fun 'property$0' ((alias Real)) (alias f32)) (fun 'property$0' ((alias Real) (alias f32)) (alias void)))", fillcolor=grey];
      400 [label="Ref: self\n(alias Real (struct number:(type (alias f32 (native f32)))))", fillcolor=grey];
      401 [label="Ref: f32\n(type (alias f32 (native f32)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Real.property_number(Real)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_34" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      402 [label="Name: self\n(alias Real (struct number:(type (alias f32 (native f32)))))", fillcolor=grey];
      403 [label="Name: value\n(alias f32 (native f32))", fillcolor=grey];
      404 [label="FunctionCallNode\n(alias void (native void))", fillcolor=grey];
      405 [label="Ref: property$0\n(intersection (fun 'property$0' ((alias Real)) (alias f32)) (fun 'property$0' ((alias Real) (alias f32)) (alias void)))", fillcolor=grey];
      406 [label="Ref: self\n(alias Real (struct number:(type (alias f32 (native f32)))))", fillcolor=grey];
      407 [label="Ref: value\n(alias f32 (native f32))", fillcolor=grey];
      408 [label="Ref: void\n(type (alias void (native void)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Real.property_number_1(Real,f32)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Real_35" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      409 [label="Name: lhs\n(alias ref (ref ?))", fillcolor=grey];
      410 [label="Name: rhs\n(alias Real (struct number:(type (alias f32 (native f32)))))", fillcolor=grey];
      411 [label="Name: offset\n(alias i32 (native i32))", fillcolor=grey];
      412 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      413 [label="Ref: addressFromRef\n(fun 'addressFromRef' ((alias ref)) (alias u32))", fillcolor=grey];
      414 [label="Ref: void\n(type (alias void (native void)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Real.store(ref,Real,i32)";
    }
    label="test/fixtures/types/structTypes.lys#Real";
  }
  subgraph "cluster_test/fixtures/types/structTypes.lys#Natural" {
    415 [label="FunOverload: Natural$discriminant\n(fun 'Natural$discriminant' () (alias i64))", fillcolor=grey];
    416 [label="FunNode: Natural$discriminant\n(fun 'Natural$discriminant' () (alias i64))", fillcolor=grey];
    417 [label="Ref: i64\n(type (alias i64 (native i64)))", fillcolor=grey];
    418 [label="Name: Natural$discriminant\n(fun 'Natural$discriminant' () (alias i64))", fillcolor=grey];
    419 [label="FunOverload: apply\n(fun 'apply' ((alias i32)) (alias Natural))", fillcolor=grey];
    420 [label="FunNode: apply\n(fun 'apply' ((alias i32)) (alias Natural))", fillcolor=grey];
    421 [label="Ref: i32\n(type (alias i32 (native i32)))", fillcolor=grey];
    422 [label="Name: number\n(alias i32 (native i32))", fillcolor=grey];
    423 [label="Ref: Natural\n(type (alias Natural (struct number:(type (alias i32 (native i32))))))", fillcolor=grey];
    424 [label="Name: apply\n(fun 'apply' ((alias i32)) (alias Natural))", fillcolor=grey];
    425 [label="FunOverload: fromPointer\n(fun 'fromPointer' ((alias i32)) (alias Natural))", fillcolor=grey];
    426 [label="FunNode: fromPointer\n(fun 'fromPointer' ((alias i32)) (alias Natural))", fillcolor=grey];
    427 [label="Ref: i32\n(type (alias i32 (native i32)))", fillcolor=grey];
    428 [label="Name: ptr\n(alias i32 (native i32))", fillcolor=grey];
    429 [label="Ref: Natural\n(type (alias Natural (struct number:(type (alias i32 (native i32))))))", fillcolor=grey];
    430 [label="Name: fromPointer\n(fun 'fromPointer' ((alias i32)) (alias Natural))", fillcolor=grey];
    431 [label="FunOverload: ==\n(fun '==' ((alias Natural) (alias Natural)) (alias boolean))", fillcolor=grey];
    432 [label="FunNode: ==\n(fun '==' ((alias Natural) (alias Natural)) (alias boolean))", fillcolor=grey];
    433 [label="Ref: Natural\n(type (alias Natural (struct number:(type (alias i32 (native i32))))))", fillcolor=grey];
    434 [label="Name: a\n(alias Natural (struct number:(type (alias i32 (native i32)))))", fillcolor=grey];
    435 [label="Ref: Natural\n(type (alias Natural (struct number:(type (alias i32 (native i32))))))", fillcolor=grey];
    436 [label="Name: b\n(alias Natural (struct number:(type (alias i32 (native i32)))))", fillcolor=grey];
    437 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
    438 [label="Name: ==\n(fun '==' ((alias Natural) (alias Natural)) (alias boolean))", fillcolor=grey];
    439 [label="FunOverload: !=\n(fun '!=' ((alias Natural) (alias Natural)) (alias boolean))", fillcolor=grey];
    440 [label="FunNode: !=\n(fun '!=' ((alias Natural) (alias Natural)) (alias boolean))", fillcolor=grey];
    441 [label="Ref: Natural\n(type (alias Natural (struct number:(type (alias i32 (native i32))))))", fillcolor=grey];
    442 [label="Name: a\n(alias Natural (struct number:(type (alias i32 (native i32)))))", fillcolor=grey];
    443 [label="Ref: Natural\n(type (alias Natural (struct number:(type (alias i32 (native i32))))))", fillcolor=grey];
    444 [label="Name: b\n(alias Natural (struct number:(type (alias i32 (native i32)))))", fillcolor=grey];
    445 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
    446 [label="Name: !=\n(fun '!=' ((alias Natural) (alias Natural)) (alias boolean))", fillcolor=grey];
    447 [label="FunOverload: property_number\n(intersection (fun 'property_number' ((alias Natural)) (alias i32)) (fun 'property_number' ((alias Natural) (alias i32)) (alias void)))", fillcolor=grey];
    448 [label="FunNode: property_number\n(fun 'property_number' ((alias Natural)) (alias i32))", fillcolor=grey];
    449 [label="Ref: Natural\n(type (alias Natural (struct number:(type (alias i32 (native i32))))))", fillcolor=grey];
    450 [label="Name: self\n(alias Natural (struct number:(type (alias i32 (native i32)))))", fillcolor=grey];
    451 [label="Ref: i32\n(type (alias i32 (native i32)))", fillcolor=grey];
    452 [label="FunNode: property_number\n(fun 'property_number' ((alias Natural) (alias i32)) (alias void))", fillcolor=grey];
    453 [label="Ref: Natural\n(type (alias Natural (struct number:(type (alias i32 (native i32))))))", fillcolor=grey];
    454 [label="Name: self\n(alias Natural (struct number:(type (alias i32 (native i32)))))", fillcolor=grey];
    455 [label="Ref: i32\n(type (alias i32 (native i32)))", fillcolor=grey];
    456 [label="Name: value\n(alias i32 (native i32))", fillcolor=grey];
    457 [label="Ref: void\n(type (alias void (native void)))", fillcolor=grey];
    458 [label="Name: property_number\n(intersection (fun 'property_number' ((alias Natural)) (alias i32)) (fun 'property_number' ((alias Natural) (alias i32)) (alias void)))", fillcolor=grey];
    459 [label="FunOverload: property$0\n(intersection (fun 'property$0' ((alias Natural)) (alias i32)) (fun 'property$0' ((alias Natural) (alias i32)) (alias void)))", fillcolor=grey];
    460 [label="FunNode: property$0\n(fun 'property$0' ((alias Natural)) (alias i32))", fillcolor=grey];
    461 [label="Ref: Natural\n(type (alias Natural (struct number:(type (alias i32 (native i32))))))", fillcolor=grey];
    462 [label="Name: self\n(type (alias Natural (struct number:(type (alias i32 (native i32))))))", fillcolor=grey];
    463 [label="Ref: i32\n(type (alias i32 (native i32)))", fillcolor=grey];
    464 [label="FunNode: property$0\n(fun 'property$0' ((alias Natural) (alias i32)) (alias void))", fillcolor=grey];
    465 [label="Ref: Natural\n(type (alias Natural (struct number:(type (alias i32 (native i32))))))", fillcolor=grey];
    466 [label="Name: self\n(type (alias Natural (struct number:(type (alias i32 (native i32))))))", fillcolor=grey];
    467 [label="Ref: i32\n(type (alias i32 (native i32)))", fillcolor=grey];
    468 [label="Name: value\n(alias i32 (native i32))", fillcolor=grey];
    469 [label="Ref: void\n(type (alias void (native void)))", fillcolor=grey];
    470 [label="Name: property$0\n(intersection (fun 'property$0' ((alias Natural)) (alias i32)) (fun 'property$0' ((alias Natural) (alias i32)) (alias void)))", fillcolor=grey];
    471 [label="FunOverload: is\n(fun 'is' ((alias Natural)) (alias boolean))", fillcolor=grey];
    472 [label="FunNode: is\n(fun 'is' ((alias Natural)) (alias boolean))", fillcolor=grey];
    473 [label="Ref: Natural\n(type (alias Natural (struct number:(type (alias i32 (native i32))))))", fillcolor=grey];
    474 [label="Name: a\n(type (alias Natural (struct number:(type (alias i32 (native i32))))))", fillcolor=grey];
    475 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
    476 [label="Name: is\n(fun 'is' ((alias Natural)) (alias boolean))", fillcolor=grey];
    477 [label="FunOverload: store\n(fun 'store' ((alias ref) (alias Natural) (alias i32)) (alias void))", fillcolor=grey];
    478 [label="FunNode: store\n(fun 'store' ((alias ref) (alias Natural) (alias i32)) (alias void))", fillcolor=grey];
    479 [label="Ref: ref\n(type (alias ref (ref ?)))", fillcolor=grey];
    480 [label="Name: lhs\n(alias ref (ref ?))", fillcolor=grey];
    481 [label="Ref: Natural\n(type (alias Natural (struct number:(type (alias i32 (native i32))))))", fillcolor=grey];
    482 [label="Name: rhs\n(alias Natural (struct number:(type (alias i32 (native i32)))))", fillcolor=grey];
    483 [label="Ref: i32\n(type (alias i32 (native i32)))", fillcolor=grey];
    484 [label="Name: offset\n(alias i32 (native i32))", fillcolor=grey];
    485 [label="Ref: void\n(type (alias void (native void)))", fillcolor=grey];
    486 [label="Name: store\n(fun 'store' ((alias ref) (alias Natural) (alias i32)) (alias void))", fillcolor=grey];
    487 [label="FunOverload: load\n(fun 'load' ((alias ref) (alias i32)) (alias Natural))", fillcolor=grey];
    488 [label="FunNode: load\n(fun 'load' ((alias ref) (alias i32)) (alias Natural))", fillcolor=grey];
    489 [label="Ref: ref\n(type (alias ref (ref ?)))", fillcolor=grey];
    490 [label="Name: lhs\n(alias ref (ref ?))", fillcolor=grey];
    491 [label="Ref: i32\n(type (alias i32 (native i32)))", fillcolor=grey];
    492 [label="Name: offset\n(alias i32 (native i32))", fillcolor=grey];
    493 [label="Ref: Natural\n(type (alias Natural (struct number:(type (alias i32 (native i32))))))", fillcolor=grey];
    494 [label="Name: load\n(fun 'load' ((alias ref) (alias i32)) (alias Natural))", fillcolor=grey];
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_0" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      495 [label="BlockNode\n(alias i64 (native i64))", fillcolor=grey];
      496 [label="ValDecl: discriminant\n(native void)", fillcolor=grey];
      497 [label="Name: discriminant\n(alias i32 (native i32))", fillcolor=grey];
      498 [label="Ref: i32\n(type (alias i32 (native i32)))", fillcolor=grey];
      499 [label="MemberNode\n(native i32)", fillcolor=grey];
      500 [label="Ref: Natural\n(type (alias Natural (struct number:(type (alias i32 (native i32))))))", fillcolor=grey];
      501 [label="BinOp: <<\n(alias i64 (native i64))", fillcolor=grey];
      502 [label="AsExpressionNode\n(alias i64 (native i64))", fillcolor=grey];
      503 [label="Ref: discriminant\n(alias i32 (native i32))", fillcolor=grey];
      504 [label="Ref: i64\n(type (alias i64 (native i64)))", fillcolor=grey];
      505 [label="Int: 32\n(alias i32 (native i32))", fillcolor=grey];
      506 [label="Ref: i64\n(type (alias i64 (native i64)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Natural.Natural$discriminant()";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_1" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::main()";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_2" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_3" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_4" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_5" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      507 [label="Name: number\n(alias i32 (native i32))", fillcolor=grey];
      508 [label="BlockNode\n(alias Natural (struct number:(type (alias i32 (native i32)))))", fillcolor=grey];
      509 [label="VarDecl: $ref\n(native void)", fillcolor=grey];
      510 [label="Name: $ref\n(alias Natural (struct number:(type (alias i32 (native i32)))))", fillcolor=grey];
      511 [label="FunctionCallNode\n(alias Natural (struct number:(type (alias i32 (native i32)))))", fillcolor=grey];
      512 [label="Ref: fromPointer\n(fun 'fromPointer' ((alias i32)) (alias Natural))", fillcolor=grey];
      513 [label="FunctionCallNode\n(alias i32 (native i32))", fillcolor=grey];
      514 [label="Ref: system::memory::calloc\n(fun 'calloc' ((alias i32) (alias i32)) (alias i32))", fillcolor=grey];
      515 [label="Int: 1\n(alias i32 (native i32))", fillcolor=grey];
      516 [label="MemberNode\n(native i32)", fillcolor=grey];
      517 [label="Ref: Natural\n(type (alias Natural (struct number:(type (alias i32 (native i32))))))", fillcolor=grey];
      518 [label="FunctionCallNode\n(alias void (native void))", fillcolor=grey];
      519 [label="Ref: property$0\n(intersection (fun 'property$0' ((alias Natural)) (alias i32)) (fun 'property$0' ((alias Natural) (alias i32)) (alias void)))", fillcolor=grey];
      520 [label="Ref: $ref\n(alias Natural (struct number:(type (alias i32 (native i32)))))", fillcolor=grey];
      521 [label="Ref: number\n(alias i32 (native i32))", fillcolor=grey];
      522 [label="Ref: $ref\n(alias Natural (struct number:(type (alias i32 (native i32)))))", fillcolor=grey];
      523 [label="Ref: Natural\n(type (alias Natural (struct number:(type (alias i32 (native i32))))))", fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_6" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_7" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_8" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_9" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_10" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_11" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Natural.apply(i32)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_12" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      524 [label="Name: ptr\n(alias i32 (native i32))", fillcolor=grey];
      525 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      526 [label="Ref: Natural$discriminant\n(fun 'Natural$discriminant' () (alias i64))", fillcolor=grey];
      527 [label="Ref: Natural\n(type (alias Natural (struct number:(type (alias i32 (native i32))))))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Natural.fromPointer(i32)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_13" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      528 [label="Name: self\n(type (alias Natural (struct number:(type (alias i32 (native i32))))))", fillcolor=grey];
      529 [label="FunctionCallNode\n(alias i32 (native i32))", fillcolor=grey];
      530 [label="MemberNode\n(intersection (fun 'load' ((alias ref)) (alias i32)) (fun 'load' ((alias ref) (alias i32)) (alias i32)))", fillcolor=grey];
      531 [label="Ref: i32\n(type (alias i32 (native i32)))", fillcolor=grey];
      532 [label="Ref: self\n(alias Natural (struct number:(type (alias i32 (native i32)))))", fillcolor=grey];
      533 [label="MemberNode\n(native i32)", fillcolor=grey];
      534 [label="Ref: Natural\n(type (alias Natural (struct number:(type (alias i32 (native i32))))))", fillcolor=grey];
      535 [label="Ref: i32\n(type (alias i32 (native i32)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Natural.property$0(Natural)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_14" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      536 [label="Name: self\n(type (alias Natural (struct number:(type (alias i32 (native i32))))))", fillcolor=grey];
      537 [label="Name: value\n(alias i32 (native i32))", fillcolor=grey];
      538 [label="FunctionCallNode\n(alias void (native void))", fillcolor=grey];
      539 [label="MemberNode\n(intersection (fun 'store' ((alias ref) (alias i32)) (alias void)) (fun 'store' ((alias ref) (alias i32) (alias i32)) (alias void)))", fillcolor=grey];
      540 [label="Ref: i32\n(type (alias i32 (native i32)))", fillcolor=grey];
      541 [label="Ref: self\n(alias Natural (struct number:(type (alias i32 (native i32)))))", fillcolor=grey];
      542 [label="Ref: value\n(alias i32 (native i32))", fillcolor=grey];
      543 [label="MemberNode\n(native i32)", fillcolor=grey];
      544 [label="Ref: Natural\n(type (alias Natural (struct number:(type (alias i32 (native i32))))))", fillcolor=grey];
      545 [label="Ref: void\n(type (alias void (native void)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Natural.property$0_1(Natural,i32)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_15" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_16" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Number.is(Number)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_17" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_18" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_19" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_20" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_21" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      546 [label="Name: a\n(type (alias Natural (struct number:(type (alias i32 (native i32))))))", fillcolor=grey];
      547 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      548 [label="Ref: Natural$discriminant\n(fun 'Natural$discriminant' () (alias i64))", fillcolor=grey];
      549 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_22" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_23" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_24" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_25" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_26" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_27" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_28" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Natural.is(Natural)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_29" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_30" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      550 [label="Name: lhs\n(alias ref (ref ?))", fillcolor=grey];
      551 [label="Name: offset\n(alias i32 (native i32))", fillcolor=grey];
      552 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      553 [label="Ref: addressFromRef\n(fun 'addressFromRef' ((alias ref)) (alias u32))", fillcolor=grey];
      554 [label="Ref: Natural\n(type (alias Natural (struct number:(type (alias i32 (native i32))))))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Natural.load(ref,i32)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_31" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      555 [label="Name: a\n(alias Natural (struct number:(type (alias i32 (native i32)))))", fillcolor=grey];
      556 [label="Name: b\n(alias Natural (struct number:(type (alias i32 (native i32)))))", fillcolor=grey];
      557 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      558 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Natural.==(Natural,Natural)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_32" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      559 [label="Name: a\n(alias Natural (struct number:(type (alias i32 (native i32)))))", fillcolor=grey];
      560 [label="Name: b\n(alias Natural (struct number:(type (alias i32 (native i32)))))", fillcolor=grey];
      561 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      562 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Natural.!=(Natural,Natural)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_33" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      563 [label="Name: self\n(alias Natural (struct number:(type (alias i32 (native i32)))))", fillcolor=grey];
      564 [label="FunctionCallNode\n(alias i32 (native i32))", fillcolor=grey];
      565 [label="Ref: property$0\n(intersection (fun 'property$0' ((alias Natural)) (alias i32)) (fun 'property$0' ((alias Natural) (alias i32)) (alias void)))", fillcolor=grey];
      566 [label="Ref: self\n(alias Natural (struct number:(type (alias i32 (native i32)))))", fillcolor=grey];
      567 [label="Ref: i32\n(type (alias i32 (native i32)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Natural.property_number(Natural)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_34" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      568 [label="Name: self\n(alias Natural (struct number:(type (alias i32 (native i32)))))", fillcolor=grey];
      569 [label="Name: value\n(alias i32 (native i32))", fillcolor=grey];
      570 [label="FunctionCallNode\n(alias void (native void))", fillcolor=grey];
      571 [label="Ref: property$0\n(intersection (fun 'property$0' ((alias Natural)) (alias i32)) (fun 'property$0' ((alias Natural) (alias i32)) (alias void)))", fillcolor=grey];
      572 [label="Ref: self\n(alias Natural (struct number:(type (alias i32 (native i32)))))", fillcolor=grey];
      573 [label="Ref: value\n(alias i32 (native i32))", fillcolor=grey];
      574 [label="Ref: void\n(type (alias void (native void)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Natural.property_number_1(Natural,i32)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Natural_35" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      575 [label="Name: lhs\n(alias ref (ref ?))", fillcolor=grey];
      576 [label="Name: rhs\n(alias Natural (struct number:(type (alias i32 (native i32)))))", fillcolor=grey];
      577 [label="Name: offset\n(alias i32 (native i32))", fillcolor=grey];
      578 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      579 [label="Ref: addressFromRef\n(fun 'addressFromRef' ((alias ref)) (alias u32))", fillcolor=grey];
      580 [label="Ref: void\n(type (alias void (native void)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Natural.store(ref,Natural,i32)";
    }
    label="test/fixtures/types/structTypes.lys#Natural";
  }
  subgraph "cluster_test/fixtures/types/structTypes.lys#Complex" {
    581 [label="FunOverload: Complex$discriminant\n(fun 'Complex$discriminant' () (alias i64))", fillcolor=grey];
    582 [label="FunNode: Complex$discriminant\n(fun 'Complex$discriminant' () (alias i64))", fillcolor=grey];
    583 [label="Ref: i64\n(type (alias i64 (native i64)))", fillcolor=grey];
    584 [label="Name: Complex$discriminant\n(fun 'Complex$discriminant' () (alias i64))", fillcolor=grey];
    585 [label="FunOverload: apply\n(fun 'apply' ((alias f32) (alias f32)) (alias Complex))", fillcolor=grey];
    586 [label="FunNode: apply\n(fun 'apply' ((alias f32) (alias f32)) (alias Complex))", fillcolor=grey];
    587 [label="Ref: f32\n(type (alias f32 (native f32)))", fillcolor=grey];
    588 [label="Name: real\n(alias f32 (native f32))", fillcolor=grey];
    589 [label="Ref: f32\n(type (alias f32 (native f32)))", fillcolor=grey];
    590 [label="Name: imaginary\n(alias f32 (native f32))", fillcolor=grey];
    591 [label="Ref: Complex\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
    592 [label="Name: apply\n(fun 'apply' ((alias f32) (alias f32)) (alias Complex))", fillcolor=grey];
    593 [label="FunOverload: fromPointer\n(fun 'fromPointer' ((alias i32)) (alias Complex))", fillcolor=grey];
    594 [label="FunNode: fromPointer\n(fun 'fromPointer' ((alias i32)) (alias Complex))", fillcolor=grey];
    595 [label="Ref: i32\n(type (alias i32 (native i32)))", fillcolor=grey];
    596 [label="Name: ptr\n(alias i32 (native i32))", fillcolor=grey];
    597 [label="Ref: Complex\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
    598 [label="Name: fromPointer\n(fun 'fromPointer' ((alias i32)) (alias Complex))", fillcolor=grey];
    599 [label="FunOverload: ==\n(fun '==' ((alias Complex) (alias Complex)) (alias boolean))", fillcolor=grey];
    600 [label="FunNode: ==\n(fun '==' ((alias Complex) (alias Complex)) (alias boolean))", fillcolor=grey];
    601 [label="Ref: Complex\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
    602 [label="Name: a\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
    603 [label="Ref: Complex\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
    604 [label="Name: b\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
    605 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
    606 [label="Name: ==\n(fun '==' ((alias Complex) (alias Complex)) (alias boolean))", fillcolor=grey];
    607 [label="FunOverload: !=\n(fun '!=' ((alias Complex) (alias Complex)) (alias boolean))", fillcolor=grey];
    608 [label="FunNode: !=\n(fun '!=' ((alias Complex) (alias Complex)) (alias boolean))", fillcolor=grey];
    609 [label="Ref: Complex\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
    610 [label="Name: a\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
    611 [label="Ref: Complex\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
    612 [label="Name: b\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
    613 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
    614 [label="Name: !=\n(fun '!=' ((alias Complex) (alias Complex)) (alias boolean))", fillcolor=grey];
    615 [label="FunOverload: property_real\n(intersection (fun 'property_real' ((alias Complex)) (alias f32)) (fun 'property_real' ((alias Complex) (alias f32)) (alias void)))", fillcolor=grey];
    616 [label="FunNode: property_real\n(fun 'property_real' ((alias Complex)) (alias f32))", fillcolor=grey];
    617 [label="Ref: Complex\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
    618 [label="Name: self\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
    619 [label="Ref: f32\n(type (alias f32 (native f32)))", fillcolor=grey];
    620 [label="FunNode: property_real\n(fun 'property_real' ((alias Complex) (alias f32)) (alias void))", fillcolor=grey];
    621 [label="Ref: Complex\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
    622 [label="Name: self\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
    623 [label="Ref: f32\n(type (alias f32 (native f32)))", fillcolor=grey];
    624 [label="Name: value\n(alias f32 (native f32))", fillcolor=grey];
    625 [label="Ref: void\n(type (alias void (native void)))", fillcolor=grey];
    626 [label="Name: property_real\n(intersection (fun 'property_real' ((alias Complex)) (alias f32)) (fun 'property_real' ((alias Complex) (alias f32)) (alias void)))", fillcolor=grey];
    627 [label="FunOverload: property$0\n(intersection (fun 'property$0' ((alias Complex)) (alias f32)) (fun 'property$0' ((alias Complex) (alias f32)) (alias void)))", fillcolor=grey];
    628 [label="FunNode: property$0\n(fun 'property$0' ((alias Complex)) (alias f32))", fillcolor=grey];
    629 [label="Ref: Complex\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
    630 [label="Name: self\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
    631 [label="Ref: f32\n(type (alias f32 (native f32)))", fillcolor=grey];
    632 [label="FunNode: property$0\n(fun 'property$0' ((alias Complex) (alias f32)) (alias void))", fillcolor=grey];
    633 [label="Ref: Complex\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
    634 [label="Name: self\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
    635 [label="Ref: f32\n(type (alias f32 (native f32)))", fillcolor=grey];
    636 [label="Name: value\n(alias f32 (native f32))", fillcolor=grey];
    637 [label="Ref: void\n(type (alias void (native void)))", fillcolor=grey];
    638 [label="Name: property$0\n(intersection (fun 'property$0' ((alias Complex)) (alias f32)) (fun 'property$0' ((alias Complex) (alias f32)) (alias void)))", fillcolor=grey];
    639 [label="FunOverload: property_imaginary\n(intersection (fun 'property_imaginary' ((alias Complex)) (alias f32)) (fun 'property_imaginary' ((alias Complex) (alias f32)) (alias void)))", fillcolor=grey];
    640 [label="FunNode: property_imaginary\n(fun 'property_imaginary' ((alias Complex)) (alias f32))", fillcolor=grey];
    641 [label="Ref: Complex\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
    642 [label="Name: self\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
    643 [label="Ref: f32\n(type (alias f32 (native f32)))", fillcolor=grey];
    644 [label="FunNode: property_imaginary\n(fun 'property_imaginary' ((alias Complex) (alias f32)) (alias void))", fillcolor=grey];
    645 [label="Ref: Complex\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
    646 [label="Name: self\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
    647 [label="Ref: f32\n(type (alias f32 (native f32)))", fillcolor=grey];
    648 [label="Name: value\n(alias f32 (native f32))", fillcolor=grey];
    649 [label="Ref: void\n(type (alias void (native void)))", fillcolor=grey];
    650 [label="Name: property_imaginary\n(intersection (fun 'property_imaginary' ((alias Complex)) (alias f32)) (fun 'property_imaginary' ((alias Complex) (alias f32)) (alias void)))", fillcolor=grey];
    651 [label="FunOverload: property$1\n(intersection (fun 'property$1' ((alias Complex)) (alias f32)) (fun 'property$1' ((alias Complex) (alias f32)) (alias void)))", fillcolor=grey];
    652 [label="FunNode: property$1\n(fun 'property$1' ((alias Complex)) (alias f32))", fillcolor=grey];
    653 [label="Ref: Complex\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
    654 [label="Name: self\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
    655 [label="Ref: f32\n(type (alias f32 (native f32)))", fillcolor=grey];
    656 [label="FunNode: property$1\n(fun 'property$1' ((alias Complex) (alias f32)) (alias void))", fillcolor=grey];
    657 [label="Ref: Complex\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
    658 [label="Name: self\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
    659 [label="Ref: f32\n(type (alias f32 (native f32)))", fillcolor=grey];
    660 [label="Name: value\n(alias f32 (native f32))", fillcolor=grey];
    661 [label="Ref: void\n(type (alias void (native void)))", fillcolor=grey];
    662 [label="Name: property$1\n(intersection (fun 'property$1' ((alias Complex)) (alias f32)) (fun 'property$1' ((alias Complex) (alias f32)) (alias void)))", fillcolor=grey];
    663 [label="FunOverload: is\n(fun 'is' ((alias Complex)) (alias boolean))", fillcolor=grey];
    664 [label="FunNode: is\n(fun 'is' ((alias Complex)) (alias boolean))", fillcolor=grey];
    665 [label="Ref: Complex\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
    666 [label="Name: a\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
    667 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
    668 [label="Name: is\n(fun 'is' ((alias Complex)) (alias boolean))", fillcolor=grey];
    669 [label="FunOverload: store\n(fun 'store' ((alias ref) (alias Complex) (alias i32)) (alias void))", fillcolor=grey];
    670 [label="FunNode: store\n(fun 'store' ((alias ref) (alias Complex) (alias i32)) (alias void))", fillcolor=grey];
    671 [label="Ref: ref\n(type (alias ref (ref ?)))", fillcolor=grey];
    672 [label="Name: lhs\n(alias ref (ref ?))", fillcolor=grey];
    673 [label="Ref: Complex\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
    674 [label="Name: rhs\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
    675 [label="Ref: i32\n(type (alias i32 (native i32)))", fillcolor=grey];
    676 [label="Name: offset\n(alias i32 (native i32))", fillcolor=grey];
    677 [label="Ref: void\n(type (alias void (native void)))", fillcolor=grey];
    678 [label="Name: store\n(fun 'store' ((alias ref) (alias Complex) (alias i32)) (alias void))", fillcolor=grey];
    679 [label="FunOverload: load\n(fun 'load' ((alias ref) (alias i32)) (alias Complex))", fillcolor=grey];
    680 [label="FunNode: load\n(fun 'load' ((alias ref) (alias i32)) (alias Complex))", fillcolor=grey];
    681 [label="Ref: ref\n(type (alias ref (ref ?)))", fillcolor=grey];
    682 [label="Name: lhs\n(alias ref (ref ?))", fillcolor=grey];
    683 [label="Ref: i32\n(type (alias i32 (native i32)))", fillcolor=grey];
    684 [label="Name: offset\n(alias i32 (native i32))", fillcolor=grey];
    685 [label="Ref: Complex\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
    686 [label="Name: load\n(fun 'load' ((alias ref) (alias i32)) (alias Complex))", fillcolor=grey];
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_0" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      687 [label="BlockNode\n(alias i64 (native i64))", fillcolor=grey];
      688 [label="ValDecl: discriminant\n(native void)", fillcolor=grey];
      689 [label="Name: discriminant\n(alias i32 (native i32))", fillcolor=grey];
      690 [label="Ref: i32\n(type (alias i32 (native i32)))", fillcolor=grey];
      691 [label="MemberNode\n(native i32)", fillcolor=grey];
      692 [label="Ref: Complex\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
      693 [label="BinOp: <<\n(alias i64 (native i64))", fillcolor=grey];
      694 [label="AsExpressionNode\n(alias i64 (native i64))", fillcolor=grey];
      695 [label="Ref: discriminant\n(alias i32 (native i32))", fillcolor=grey];
      696 [label="Ref: i64\n(type (alias i64 (native i64)))", fillcolor=grey];
      697 [label="Int: 32\n(alias i32 (native i32))", fillcolor=grey];
      698 [label="Ref: i64\n(type (alias i64 (native i64)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Complex.Complex$discriminant()";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_1" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::main()";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_2" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_3" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_4" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_5" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_6" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      699 [label="Name: real\n(alias f32 (native f32))", fillcolor=grey];
      700 [label="Name: imaginary\n(alias f32 (native f32))", fillcolor=grey];
      701 [label="BlockNode\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
      702 [label="VarDecl: $ref\n(native void)", fillcolor=grey];
      703 [label="Name: $ref\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
      704 [label="FunctionCallNode\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
      705 [label="Ref: fromPointer\n(fun 'fromPointer' ((alias i32)) (alias Complex))", fillcolor=grey];
      706 [label="FunctionCallNode\n(alias i32 (native i32))", fillcolor=grey];
      707 [label="Ref: system::memory::calloc\n(fun 'calloc' ((alias i32) (alias i32)) (alias i32))", fillcolor=grey];
      708 [label="Int: 1\n(alias i32 (native i32))", fillcolor=grey];
      709 [label="MemberNode\n(native i32)", fillcolor=grey];
      710 [label="Ref: Complex\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
      711 [label="FunctionCallNode\n(alias void (native void))", fillcolor=grey];
      712 [label="Ref: property$0\n(intersection (fun 'property$0' ((alias Complex)) (alias f32)) (fun 'property$0' ((alias Complex) (alias f32)) (alias void)))", fillcolor=grey];
      713 [label="Ref: $ref\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
      714 [label="Ref: real\n(alias f32 (native f32))", fillcolor=grey];
      715 [label="FunctionCallNode\n(alias void (native void))", fillcolor=grey];
      716 [label="Ref: property$1\n(intersection (fun 'property$1' ((alias Complex)) (alias f32)) (fun 'property$1' ((alias Complex) (alias f32)) (alias void)))", fillcolor=grey];
      717 [label="Ref: $ref\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
      718 [label="Ref: imaginary\n(alias f32 (native f32))", fillcolor=grey];
      719 [label="Ref: $ref\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
      720 [label="Ref: Complex\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_7" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_8" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_9" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_10" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_11" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_12" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Complex.apply(f32,f32)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_13" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      721 [label="Name: ptr\n(alias i32 (native i32))", fillcolor=grey];
      722 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      723 [label="Ref: Complex$discriminant\n(fun 'Complex$discriminant' () (alias i64))", fillcolor=grey];
      724 [label="Ref: Complex\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Complex.fromPointer(i32)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_14" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      725 [label="Name: self\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
      726 [label="FunctionCallNode\n(alias f32 (native f32))", fillcolor=grey];
      727 [label="MemberNode\n(intersection (fun 'load' ((alias ref)) (alias f32)) (fun 'load' ((alias ref) (alias i32)) (alias f32)))", fillcolor=grey];
      728 [label="Ref: f32\n(type (alias f32 (native f32)))", fillcolor=grey];
      729 [label="Ref: self\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
      730 [label="MemberNode\n(native i32)", fillcolor=grey];
      731 [label="Ref: Complex\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
      732 [label="Ref: f32\n(type (alias f32 (native f32)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Complex.property$0(Complex)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_15" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      733 [label="Name: self\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
      734 [label="Name: value\n(alias f32 (native f32))", fillcolor=grey];
      735 [label="FunctionCallNode\n(alias void (native void))", fillcolor=grey];
      736 [label="MemberNode\n(intersection (fun 'store' ((alias ref) (alias f32)) (alias void)) (fun 'store' ((alias ref) (alias f32) (alias i32)) (alias void)))", fillcolor=grey];
      737 [label="Ref: f32\n(type (alias f32 (native f32)))", fillcolor=grey];
      738 [label="Ref: self\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
      739 [label="Ref: value\n(alias f32 (native f32))", fillcolor=grey];
      740 [label="MemberNode\n(native i32)", fillcolor=grey];
      741 [label="Ref: Complex\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
      742 [label="Ref: void\n(type (alias void (native void)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Complex.property$0_1(Complex,f32)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_16" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      743 [label="Name: self\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
      744 [label="FunctionCallNode\n(alias f32 (native f32))", fillcolor=grey];
      745 [label="MemberNode\n(intersection (fun 'load' ((alias ref)) (alias f32)) (fun 'load' ((alias ref) (alias i32)) (alias f32)))", fillcolor=grey];
      746 [label="Ref: f32\n(type (alias f32 (native f32)))", fillcolor=grey];
      747 [label="Ref: self\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
      748 [label="MemberNode\n(native i32)", fillcolor=grey];
      749 [label="Ref: Complex\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
      750 [label="Ref: f32\n(type (alias f32 (native f32)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Complex.property$1(Complex)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_17" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      751 [label="Name: self\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
      752 [label="Name: value\n(alias f32 (native f32))", fillcolor=grey];
      753 [label="FunctionCallNode\n(alias void (native void))", fillcolor=grey];
      754 [label="MemberNode\n(intersection (fun 'store' ((alias ref) (alias f32)) (alias void)) (fun 'store' ((alias ref) (alias f32) (alias i32)) (alias void)))", fillcolor=grey];
      755 [label="Ref: f32\n(type (alias f32 (native f32)))", fillcolor=grey];
      756 [label="Ref: self\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
      757 [label="Ref: value\n(alias f32 (native f32))", fillcolor=grey];
      758 [label="MemberNode\n(native i32)", fillcolor=grey];
      759 [label="Ref: Complex\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
      760 [label="Ref: void\n(type (alias void (native void)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Complex.property$1_1(Complex,f32)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_18" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Number.is(Number)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_19" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_20" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_21" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_22" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_23" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_24" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      761 [label="Name: a\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
      762 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      763 [label="Ref: Complex$discriminant\n(fun 'Complex$discriminant' () (alias i64))", fillcolor=grey];
      764 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_25" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_26" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_27" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_28" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_29" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_30" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_31" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Complex.is(Complex)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_32" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      765 [label="Name: lhs\n(alias ref (ref ?))", fillcolor=grey];
      766 [label="Name: offset\n(alias i32 (native i32))", fillcolor=grey];
      767 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      768 [label="Ref: addressFromRef\n(fun 'addressFromRef' ((alias ref)) (alias u32))", fillcolor=grey];
      769 [label="Ref: Complex\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Complex.load(ref,i32)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_33" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      770 [label="Name: a\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
      771 [label="Name: b\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
      772 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      773 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Complex.==(Complex,Complex)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_34" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      774 [label="Name: a\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
      775 [label="Name: b\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
      776 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      777 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Complex.!=(Complex,Complex)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_35" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      778 [label="Name: self\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
      779 [label="FunctionCallNode\n(alias f32 (native f32))", fillcolor=grey];
      780 [label="Ref: property$0\n(intersection (fun 'property$0' ((alias Complex)) (alias f32)) (fun 'property$0' ((alias Complex) (alias f32)) (alias void)))", fillcolor=grey];
      781 [label="Ref: self\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
      782 [label="Ref: f32\n(type (alias f32 (native f32)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Complex.property_real(Complex)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_36" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      783 [label="Name: self\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
      784 [label="Name: value\n(alias f32 (native f32))", fillcolor=grey];
      785 [label="FunctionCallNode\n(alias void (native void))", fillcolor=grey];
      786 [label="Ref: property$0\n(intersection (fun 'property$0' ((alias Complex)) (alias f32)) (fun 'property$0' ((alias Complex) (alias f32)) (alias void)))", fillcolor=grey];
      787 [label="Ref: self\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
      788 [label="Ref: value\n(alias f32 (native f32))", fillcolor=grey];
      789 [label="Ref: void\n(type (alias void (native void)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Complex.property_real_1(Complex,f32)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_37" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      790 [label="Name: self\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
      791 [label="FunctionCallNode\n(alias f32 (native f32))", fillcolor=grey];
      792 [label="Ref: property$1\n(intersection (fun 'property$1' ((alias Complex)) (alias f32)) (fun 'property$1' ((alias Complex) (alias f32)) (alias void)))", fillcolor=grey];
      793 [label="Ref: self\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
      794 [label="Ref: f32\n(type (alias f32 (native f32)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Complex.property_imaginary(Complex)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_38" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      795 [label="Name: self\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
      796 [label="Name: value\n(alias f32 (native f32))", fillcolor=grey];
      797 [label="FunctionCallNode\n(alias void (native void))", fillcolor=grey];
      798 [label="Ref: property$1\n(intersection (fun 'property$1' ((alias Complex)) (alias f32)) (fun 'property$1' ((alias Complex) (alias f32)) (alias void)))", fillcolor=grey];
      799 [label="Ref: self\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
      800 [label="Ref: value\n(alias f32 (native f32))", fillcolor=grey];
      801 [label="Ref: void\n(type (alias void (native void)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Complex.property_imaginary_1(Complex,f32)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Complex_39" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      802 [label="Name: lhs\n(alias ref (ref ?))", fillcolor=grey];
      803 [label="Name: rhs\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
      804 [label="Name: offset\n(alias i32 (native i32))", fillcolor=grey];
      805 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      806 [label="Ref: addressFromRef\n(fun 'addressFromRef' ((alias ref)) (alias u32))", fillcolor=grey];
      807 [label="Ref: void\n(type (alias void (native void)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Complex.store(ref,Complex,i32)";
    }
    label="test/fixtures/types/structTypes.lys#Complex";
  }
  subgraph "cluster_test/fixtures/types/structTypes.lys#Number" {
    808 [label="FunOverload: is\n(fun 'is' ((alias Number)) (alias boolean))", fillcolor=grey];
    809 [label="FunNode: is\n(fun 'is' ((alias Number)) (alias boolean))", fillcolor=grey];
    810 [label="Ref: Number\n(type (alias Number (union (alias Infinity (struct)) (alias NDet (struct)) (alias Real (struct number:(type (alias f32 (native f32))))) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))))", fillcolor=grey];
    811 [label="Name: a\n(type (alias Number (union (alias Infinity (struct)) (alias NDet (struct)) (alias Real (struct number:(type (alias f32 (native f32))))) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))))", fillcolor=grey];
    812 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
    813 [label="Name: is\n(fun 'is' ((alias Number)) (alias boolean))", fillcolor=grey];
    814 [label="FunOverload: ==\n(fun '==' ((alias ref) (alias ref)) (alias boolean))", fillcolor=grey];
    815 [label="FunNode: ==\n(fun '==' ((alias ref) (alias ref)) (alias boolean))", fillcolor=grey];
    816 [label="Ref: ref\n(type (alias ref (ref ?)))", fillcolor=grey];
    817 [label="Name: lhs\n(alias ref (ref ?))", fillcolor=grey];
    818 [label="Ref: ref\n(type (alias ref (ref ?)))", fillcolor=grey];
    819 [label="Name: rhs\n(alias ref (ref ?))", fillcolor=grey];
    820 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
    821 [label="Name: ==\n(fun '==' ((alias ref) (alias ref)) (alias boolean))", fillcolor=grey];
    822 [label="FunOverload: !=\n(fun '!=' ((alias ref) (alias ref)) (alias boolean))", fillcolor=grey];
    823 [label="FunNode: !=\n(fun '!=' ((alias ref) (alias ref)) (alias boolean))", fillcolor=grey];
    824 [label="Ref: ref\n(type (alias ref (ref ?)))", fillcolor=grey];
    825 [label="Name: lhs\n(alias ref (ref ?))", fillcolor=grey];
    826 [label="Ref: ref\n(type (alias ref (ref ?)))", fillcolor=grey];
    827 [label="Name: rhs\n(alias ref (ref ?))", fillcolor=grey];
    828 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
    829 [label="Name: !=\n(fun '!=' ((alias ref) (alias ref)) (alias boolean))", fillcolor=grey];
    830 [label="FunOverload: store\n(fun 'store' ((alias ref) (alias Number) (alias i32)) (alias void))", fillcolor=grey];
    831 [label="FunNode: store\n(fun 'store' ((alias ref) (alias Number) (alias i32)) (alias void))", fillcolor=grey];
    832 [label="Ref: ref\n(type (alias ref (ref ?)))", fillcolor=grey];
    833 [label="Name: lhs\n(alias ref (ref ?))", fillcolor=grey];
    834 [label="Ref: Number\n(type (alias Number (union (alias Infinity (struct)) (alias NDet (struct)) (alias Real (struct number:(type (alias f32 (native f32))))) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))))", fillcolor=grey];
    835 [label="Name: rhs\n(type (alias Number (union (alias Infinity (struct)) (alias NDet (struct)) (alias Real (struct number:(type (alias f32 (native f32))))) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))))", fillcolor=grey];
    836 [label="Ref: i32\n(type (alias i32 (native i32)))", fillcolor=grey];
    837 [label="Name: offset\n(alias i32 (native i32))", fillcolor=grey];
    838 [label="Ref: void\n(type (alias void (native void)))", fillcolor=grey];
    839 [label="Name: store\n(fun 'store' ((alias ref) (alias Number) (alias i32)) (alias void))", fillcolor=grey];
    840 [label="FunOverload: load\n(fun 'load' ((alias ref) (alias i32)) (alias Number))", fillcolor=grey];
    841 [label="FunNode: load\n(fun 'load' ((alias ref) (alias i32)) (alias Number))", fillcolor=grey];
    842 [label="Ref: ref\n(type (alias ref (ref ?)))", fillcolor=grey];
    843 [label="Name: lhs\n(alias ref (ref ?))", fillcolor=grey];
    844 [label="Ref: i32\n(type (alias i32 (native i32)))", fillcolor=grey];
    845 [label="Name: offset\n(alias i32 (native i32))", fillcolor=grey];
    846 [label="Ref: Number\n(type (alias Number (union (alias Infinity (struct)) (alias NDet (struct)) (alias Real (struct number:(type (alias f32 (native f32))))) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))))", fillcolor=grey];
    847 [label="Name: load\n(fun 'load' ((alias ref) (alias i32)) (alias Number))", fillcolor=grey];
    848 [label="FunOverload: as\n(fun 'as' ((alias Number)) (alias ref))", fillcolor=grey];
    849 [label="FunNode: as\n(fun 'as' ((alias Number)) (alias ref))", fillcolor=grey];
    850 [label="Ref: Number\n(type (alias Number (union (alias Infinity (struct)) (alias NDet (struct)) (alias Real (struct number:(type (alias f32 (native f32))))) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))))", fillcolor=grey];
    851 [label="Name: a\n(type (alias Number (union (alias Infinity (struct)) (alias NDet (struct)) (alias Real (struct number:(type (alias f32 (native f32))))) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))))", fillcolor=grey];
    852 [label="Ref: ref\n(type (alias ref (ref ?)))", fillcolor=grey];
    853 [label="Name: as\n(fun 'as' ((alias Number)) (alias ref))", fillcolor=grey];
    854 [label="FunOverload: as\n(fun 'as' ((alias Infinity)) (alias Number))", fillcolor=grey];
    855 [label="FunNode: as\n(fun 'as' ((alias Infinity)) (alias Number))", fillcolor=grey];
    856 [label="Ref: Infinity\n(type (alias Infinity (struct)))", fillcolor=grey];
    857 [label="Name: a\n(alias Infinity (struct))", fillcolor=grey];
    858 [label="Ref: Number\n(type (alias Number (union (alias Infinity (struct)) (alias NDet (struct)) (alias Real (struct number:(type (alias f32 (native f32))))) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))))", fillcolor=grey];
    859 [label="Name: as\n(fun 'as' ((alias Infinity)) (alias Number))", fillcolor=grey];
    860 [label="FunOverload: as\n(fun 'as' ((alias NDet)) (alias Number))", fillcolor=grey];
    861 [label="FunNode: as\n(fun 'as' ((alias NDet)) (alias Number))", fillcolor=grey];
    862 [label="Ref: NDet\n(type (alias NDet (struct)))", fillcolor=grey];
    863 [label="Name: a\n(alias NDet (struct))", fillcolor=grey];
    864 [label="Ref: Number\n(type (alias Number (union (alias Infinity (struct)) (alias NDet (struct)) (alias Real (struct number:(type (alias f32 (native f32))))) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))))", fillcolor=grey];
    865 [label="Name: as\n(fun 'as' ((alias NDet)) (alias Number))", fillcolor=grey];
    866 [label="FunOverload: as\n(fun 'as' ((alias Real)) (alias Number))", fillcolor=grey];
    867 [label="FunNode: as\n(fun 'as' ((alias Real)) (alias Number))", fillcolor=grey];
    868 [label="Ref: Real\n(type (alias Real (struct number:(type (alias f32 (native f32))))))", fillcolor=grey];
    869 [label="Name: a\n(alias Real (struct number:(type (alias f32 (native f32)))))", fillcolor=grey];
    870 [label="Ref: Number\n(type (alias Number (union (alias Infinity (struct)) (alias NDet (struct)) (alias Real (struct number:(type (alias f32 (native f32))))) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))))", fillcolor=grey];
    871 [label="Name: as\n(fun 'as' ((alias Real)) (alias Number))", fillcolor=grey];
    872 [label="FunOverload: as\n(fun 'as' ((alias Natural)) (alias Number))", fillcolor=grey];
    873 [label="FunNode: as\n(fun 'as' ((alias Natural)) (alias Number))", fillcolor=grey];
    874 [label="Ref: Natural\n(type (alias Natural (struct number:(type (alias i32 (native i32))))))", fillcolor=grey];
    875 [label="Name: a\n(alias Natural (struct number:(type (alias i32 (native i32)))))", fillcolor=grey];
    876 [label="Ref: Number\n(type (alias Number (union (alias Infinity (struct)) (alias NDet (struct)) (alias Real (struct number:(type (alias f32 (native f32))))) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))))", fillcolor=grey];
    877 [label="Name: as\n(fun 'as' ((alias Natural)) (alias Number))", fillcolor=grey];
    878 [label="FunOverload: as\n(fun 'as' ((alias Complex)) (alias Number))", fillcolor=grey];
    879 [label="FunNode: as\n(fun 'as' ((alias Complex)) (alias Number))", fillcolor=grey];
    880 [label="Ref: Complex\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
    881 [label="Name: a\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
    882 [label="Ref: Number\n(type (alias Number (union (alias Infinity (struct)) (alias NDet (struct)) (alias Real (struct number:(type (alias f32 (native f32))))) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))))", fillcolor=grey];
    883 [label="Name: as\n(fun 'as' ((alias Complex)) (alias Number))", fillcolor=grey];
    subgraph "cluster_test/fixtures/types/structTypes.lys#Number_0" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      884 [label="Name: lhs\n(alias ref (ref ?))", fillcolor=grey];
      885 [label="Name: rhs\n(alias ref (ref ?))", fillcolor=grey];
      886 [label="BinOp: ==\n(alias boolean (native boolean))", fillcolor=grey];
      887 [label="Ref: lhs\n(alias ref (ref ?))", fillcolor=grey];
      888 [label="Ref: rhs\n(alias ref (ref ?))", fillcolor=grey];
      889 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Number.==(ref,ref)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Number_1" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      890 [label="Name: lhs\n(alias ref (ref ?))", fillcolor=grey];
      891 [label="Name: rhs\n(alias ref (ref ?))", fillcolor=grey];
      892 [label="BinOp: !=\n(alias boolean (native boolean))", fillcolor=grey];
      893 [label="Ref: lhs\n(alias ref (ref ?))", fillcolor=grey];
      894 [label="Ref: rhs\n(alias ref (ref ?))", fillcolor=grey];
      895 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Number.!=(ref,ref)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Number_2" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::main()";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Number_3" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Number_4" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Number_5" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Number_6" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Number_7" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Number_8" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Number_9" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Number_10" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Number_11" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      896 [label="Name: lhs\n(alias ref (ref ?))", fillcolor=grey];
      897 [label="Name: offset\n(alias i32 (native i32))", fillcolor=grey];
      898 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      899 [label="Ref: addressFromRef\n(fun 'addressFromRef' ((alias ref)) (alias u32))", fillcolor=grey];
      900 [label="Ref: Number\n(type (alias Number (union (alias Infinity (struct)) (alias NDet (struct)) (alias Real (struct number:(type (alias f32 (native f32))))) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Number.load(ref,i32)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Number_12" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      901 [label="Name: a\n(type (alias Number (union (alias Infinity (struct)) (alias NDet (struct)) (alias Real (struct number:(type (alias f32 (native f32))))) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))))", fillcolor=grey];
      902 [label="BlockNode\n(alias boolean (native boolean))", fillcolor=grey];
      903 [label="BinOp: ||\n(alias boolean (native boolean))", fillcolor=grey];
      904 [label="BinOp: ||\n(alias boolean (native boolean))", fillcolor=grey];
      905 [label="BinOp: ||\n(alias boolean (native boolean))", fillcolor=grey];
      906 [label="BinOp: ||\n(alias boolean (native boolean))", fillcolor=grey];
      907 [label="IsExpressionNode\n(alias boolean (native boolean))", fillcolor=grey];
      908 [label="Ref: a\n(alias Number (union (alias Infinity (struct)) (alias NDet (struct)) (alias Real (struct number:(type (alias f32 (native f32))))) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))))", fillcolor=grey];
      909 [label="Ref: Infinity\n(type (alias Infinity (struct)))", fillcolor=grey];
      910 [label="IsExpressionNode\n(alias boolean (native boolean))", fillcolor=grey];
      911 [label="Ref: a\n(alias Number (union (alias Infinity (struct)) (alias NDet (struct)) (alias Real (struct number:(type (alias f32 (native f32))))) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))))", fillcolor=grey];
      912 [label="Ref: NDet\n(type (alias NDet (struct)))", fillcolor=grey];
      913 [label="IsExpressionNode\n(alias boolean (native boolean))", fillcolor=grey];
      914 [label="Ref: a\n(alias Number (union (alias Infinity (struct)) (alias NDet (struct)) (alias Real (struct number:(type (alias f32 (native f32))))) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))))", fillcolor=grey];
      915 [label="Ref: Real\n(type (alias Real (struct number:(type (alias f32 (native f32))))))", fillcolor=grey];
      916 [label="IsExpressionNode\n(alias boolean (native boolean))", fillcolor=grey];
      917 [label="Ref: a\n(alias Number (union (alias Infinity (struct)) (alias NDet (struct)) (alias Real (struct number:(type (alias f32 (native f32))))) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))))", fillcolor=grey];
      918 [label="Ref: Natural\n(type (alias Natural (struct number:(type (alias i32 (native i32))))))", fillcolor=grey];
      919 [label="IsExpressionNode\n(alias boolean (native boolean))", fillcolor=grey];
      920 [label="Ref: a\n(alias Number (union (alias Infinity (struct)) (alias NDet (struct)) (alias Real (struct number:(type (alias f32 (native f32))))) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))))", fillcolor=grey];
      921 [label="Ref: Complex\n(type (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))", fillcolor=grey];
      922 [label="Ref: boolean\n(type (alias boolean (native boolean)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Number.is(Number)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Number_13" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Number_14" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Number_15" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Number_16" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Number_17" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="child";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Number_18" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Number_19" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Number_20" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Number_21" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Number_22" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      label="expression";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Number_23" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      923 [label="Name: lhs\n(alias ref (ref ?))", fillcolor=grey];
      924 [label="Name: rhs\n(type (alias Number (union (alias Infinity (struct)) (alias NDet (struct)) (alias Real (struct number:(type (alias f32 (native f32))))) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))))", fillcolor=grey];
      925 [label="Name: offset\n(alias i32 (native i32))", fillcolor=grey];
      926 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      927 [label="Ref: addressFromRef\n(fun 'addressFromRef' ((alias ref)) (alias u32))", fillcolor=grey];
      928 [label="Ref: void\n(type (alias void (native void)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Number.store(ref,Number,i32)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Number_24" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      929 [label="Name: a\n(type (alias Number (union (alias Infinity (struct)) (alias NDet (struct)) (alias Real (struct number:(type (alias f32 (native f32))))) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))))", fillcolor=grey];
      930 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      931 [label="Ref: ref\n(type (alias ref (ref ?)))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Number.as(Number)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Number_25" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      932 [label="Name: a\n(alias Infinity (struct))", fillcolor=grey];
      933 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      934 [label="Ref: Number\n(type (alias Number (union (alias Infinity (struct)) (alias NDet (struct)) (alias Real (struct number:(type (alias f32 (native f32))))) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Infinity.as(Infinity)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Number_26" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      935 [label="Name: a\n(alias NDet (struct))", fillcolor=grey];
      936 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      937 [label="Ref: Number\n(type (alias Number (union (alias Infinity (struct)) (alias NDet (struct)) (alias Real (struct number:(type (alias f32 (native f32))))) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::NDet.as(NDet)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Number_27" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      938 [label="Name: a\n(alias Real (struct number:(type (alias f32 (native f32)))))", fillcolor=grey];
      939 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      940 [label="Ref: Number\n(type (alias Number (union (alias Infinity (struct)) (alias NDet (struct)) (alias Real (struct number:(type (alias f32 (native f32))))) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Real.as(Real)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Number_28" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      941 [label="Name: a\n(alias Natural (struct number:(type (alias i32 (native i32)))))", fillcolor=grey];
      942 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      943 [label="Ref: Number\n(type (alias Number (union (alias Infinity (struct)) (alias NDet (struct)) (alias Real (struct number:(type (alias f32 (native f32))))) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Natural.as(Natural)";
    }
    subgraph "cluster_test/fixtures/types/structTypes.lys#Number_29" { rankdir=TB;
      node [style=filled, fillcolor=grey];
      944 [label="Name: a\n(alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32)))))", fillcolor=grey];
      945 [label="WasmExpressionNode\n(never)", fillcolor=grey];
      946 [label="Ref: Number\n(type (alias Number (union (alias Infinity (struct)) (alias NDet (struct)) (alias Real (struct number:(type (alias f32 (native f32))))) (alias Natural (struct number:(type (alias i32 (native i32))))) (alias Complex (struct real:(type (alias f32 (native f32))) imaginary:(type (alias f32 (native f32))))))))", fillcolor=grey];
      label="test/fixtures/types/structTypes.lys::Complex.as(Complex)";
    }
    label="test/fixtures/types/structTypes.lys#Number";
  }
  1 -> 83[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  1 -> 87[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  1 -> 93[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  1 -> 101[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  1 -> 111[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  1 -> 123[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  1 -> 16[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  1 -> 856[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  1 -> 130[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  1 -> 34[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  1 -> 139[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  1 -> 909[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  1 -> 148[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  67 -> 1[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  77 -> 80[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  78 -> 77[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  79 -> 78[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  80 -> 138[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  80 -> 142[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  81 -> 84[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  82 -> 81[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  83 -> 82[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  85 -> 90[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  86 -> 85[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  87 -> 88[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  88 -> 86[taillabel="[a]" fontsize=7 fontname="times" color="black" ];
  89 -> 86[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  91 -> 98[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  92 -> 91[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  93 -> 94[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  94 -> 92[taillabel="[a]" fontsize=7 fontname="times" color="black" ];
  95 -> 96[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  96 -> 92[taillabel="[b]" fontsize=7 fontname="times" color="black" ];
  97 -> 92[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  99 -> 106[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  100 -> 99[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  101 -> 102[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  102 -> 100[taillabel="[a]" fontsize=7 fontname="times" color="black" ];
  103 -> 104[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  104 -> 100[taillabel="[b]" fontsize=7 fontname="times" color="black" ];
  105 -> 100[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  107 -> 116[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  108 -> 107[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  109 -> 110[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  110 -> 108[taillabel="[lhs]" fontsize=7 fontname="times" color="black" ];
  111 -> 112[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  112 -> 108[taillabel="[rhs]" fontsize=7 fontname="times" color="black" ];
  113 -> 114[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  114 -> 108[taillabel="[offset]" fontsize=7 fontname="times" color="black" ];
  115 -> 108[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  117 -> 124[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  118 -> 117[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  119 -> 120[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  120 -> 118[taillabel="[lhs]" fontsize=7 fontname="times" color="black" ];
  121 -> 122[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  122 -> 118[taillabel="[offset]" fontsize=7 fontname="times" color="black" ];
  123 -> 118[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  2 -> 169[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  2 -> 173[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  2 -> 179[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  2 -> 187[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  2 -> 197[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  2 -> 209[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  2 -> 17[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  2 -> 862[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  2 -> 216[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  2 -> 912[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  2 -> 231[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  2 -> 234[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  68 -> 2[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  163 -> 166[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  164 -> 163[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  165 -> 164[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  166 -> 225[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  166 -> 233[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  167 -> 170[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  168 -> 167[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  169 -> 168[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  171 -> 176[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  172 -> 171[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  173 -> 174[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  174 -> 172[taillabel="[a]" fontsize=7 fontname="times" color="black" ];
  175 -> 172[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  177 -> 184[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  178 -> 177[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  179 -> 180[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  180 -> 178[taillabel="[a]" fontsize=7 fontname="times" color="black" ];
  181 -> 182[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  182 -> 178[taillabel="[b]" fontsize=7 fontname="times" color="black" ];
  183 -> 178[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  185 -> 192[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  186 -> 185[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  187 -> 188[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  188 -> 186[taillabel="[a]" fontsize=7 fontname="times" color="black" ];
  189 -> 190[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  190 -> 186[taillabel="[b]" fontsize=7 fontname="times" color="black" ];
  191 -> 186[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  193 -> 202[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  194 -> 193[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  195 -> 196[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  196 -> 194[taillabel="[lhs]" fontsize=7 fontname="times" color="black" ];
  197 -> 198[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  198 -> 194[taillabel="[rhs]" fontsize=7 fontname="times" color="black" ];
  199 -> 200[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  200 -> 194[taillabel="[offset]" fontsize=7 fontname="times" color="black" ];
  201 -> 194[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  203 -> 210[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  204 -> 203[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  205 -> 206[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  206 -> 204[taillabel="[lhs]" fontsize=7 fontname="times" color="black" ];
  207 -> 208[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  208 -> 204[taillabel="[offset]" fontsize=7 fontname="times" color="black" ];
  209 -> 204[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  3 -> 257[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  3 -> 263[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  3 -> 267[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  3 -> 269[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  3 -> 275[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  3 -> 277[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  3 -> 283[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  3 -> 287[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  3 -> 295[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  3 -> 299[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  3 -> 307[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  3 -> 315[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  3 -> 327[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  3 -> 18[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  3 -> 868[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  3 -> 334[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  3 -> 39[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  3 -> 351[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  3 -> 357[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  3 -> 361[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  3 -> 368[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  3 -> 378[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  3 -> 915[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  3 -> 59[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  3 -> 388[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  69 -> 3[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  5 -> 4[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  249 -> 252[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  250 -> 249[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  251 -> 250[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  252 -> 360[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  252 -> 382[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  253 -> 258[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  254 -> 253[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  255 -> 256[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  256 -> 254[taillabel="[number]" fontsize=7 fontname="times" color="black" ];
  257 -> 254[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  259 -> 264[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  260 -> 259[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  261 -> 262[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  262 -> 260[taillabel="[ptr]" fontsize=7 fontname="times" color="black" ];
  263 -> 260[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  264 -> 346[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  265 -> 272[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  266 -> 265[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  267 -> 268[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  268 -> 266[taillabel="[a]" fontsize=7 fontname="times" color="black" ];
  269 -> 270[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  270 -> 266[taillabel="[b]" fontsize=7 fontname="times" color="black" ];
  271 -> 266[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  273 -> 280[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  274 -> 273[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  275 -> 276[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  276 -> 274[taillabel="[a]" fontsize=7 fontname="times" color="black" ];
  277 -> 278[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  278 -> 274[taillabel="[b]" fontsize=7 fontname="times" color="black" ];
  279 -> 274[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  281 -> 292[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  282 -> 281[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  283 -> 284[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  284 -> 282[taillabel="[self]" fontsize=7 fontname="times" color="black" ];
  285 -> 282[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  286 -> 281[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  287 -> 288[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  288 -> 286[taillabel="[self]" fontsize=7 fontname="times" color="black" ];
  289 -> 290[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  290 -> 286[taillabel="[value]" fontsize=7 fontname="times" color="black" ];
  291 -> 286[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  293 -> 304[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  294 -> 293[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  295 -> 296[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  296 -> 294[taillabel="[self]" fontsize=7 fontname="times" color="black" ];
  297 -> 294[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  298 -> 293[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  299 -> 300[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  300 -> 298[taillabel="[self]" fontsize=7 fontname="times" color="black" ];
  301 -> 302[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  302 -> 298[taillabel="[value]" fontsize=7 fontname="times" color="black" ];
  303 -> 298[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  304 -> 353[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  304 -> 399[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  304 -> 405[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  305 -> 310[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  306 -> 305[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  307 -> 308[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  308 -> 306[taillabel="[a]" fontsize=7 fontname="times" color="black" ];
  309 -> 306[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  311 -> 320[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  312 -> 311[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  313 -> 314[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  314 -> 312[taillabel="[lhs]" fontsize=7 fontname="times" color="black" ];
  315 -> 316[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  316 -> 312[taillabel="[rhs]" fontsize=7 fontname="times" color="black" ];
  317 -> 318[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  318 -> 312[taillabel="[offset]" fontsize=7 fontname="times" color="black" ];
  319 -> 312[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  321 -> 328[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  322 -> 321[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  323 -> 324[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  324 -> 322[taillabel="[lhs]" fontsize=7 fontname="times" color="black" ];
  325 -> 326[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  326 -> 322[taillabel="[offset]" fontsize=7 fontname="times" color="black" ];
  327 -> 322[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  6 -> 423[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  6 -> 429[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  6 -> 433[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  6 -> 435[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  6 -> 441[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  6 -> 443[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  6 -> 449[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  6 -> 453[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  6 -> 461[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  6 -> 465[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  6 -> 473[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  6 -> 481[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  6 -> 493[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  6 -> 19[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  6 -> 874[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  6 -> 500[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  6 -> 45[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  6 -> 517[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  6 -> 523[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  6 -> 527[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  6 -> 534[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  6 -> 544[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  6 -> 918[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  6 -> 62[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  6 -> 554[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  70 -> 6[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  8 -> 7[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  415 -> 418[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  416 -> 415[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  417 -> 416[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  418 -> 526[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  418 -> 548[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  419 -> 424[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  420 -> 419[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  421 -> 422[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  422 -> 420[taillabel="[number]" fontsize=7 fontname="times" color="black" ];
  423 -> 420[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  425 -> 430[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  426 -> 425[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  427 -> 428[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  428 -> 426[taillabel="[ptr]" fontsize=7 fontname="times" color="black" ];
  429 -> 426[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  430 -> 512[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  431 -> 438[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  432 -> 431[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  433 -> 434[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  434 -> 432[taillabel="[a]" fontsize=7 fontname="times" color="black" ];
  435 -> 436[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  436 -> 432[taillabel="[b]" fontsize=7 fontname="times" color="black" ];
  437 -> 432[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  439 -> 446[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  440 -> 439[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  441 -> 442[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  442 -> 440[taillabel="[a]" fontsize=7 fontname="times" color="black" ];
  443 -> 444[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  444 -> 440[taillabel="[b]" fontsize=7 fontname="times" color="black" ];
  445 -> 440[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  447 -> 458[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  448 -> 447[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  449 -> 450[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  450 -> 448[taillabel="[self]" fontsize=7 fontname="times" color="black" ];
  451 -> 448[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  452 -> 447[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  453 -> 454[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  454 -> 452[taillabel="[self]" fontsize=7 fontname="times" color="black" ];
  455 -> 456[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  456 -> 452[taillabel="[value]" fontsize=7 fontname="times" color="black" ];
  457 -> 452[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  459 -> 470[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  460 -> 459[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  461 -> 462[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  462 -> 460[taillabel="[self]" fontsize=7 fontname="times" color="black" ];
  463 -> 460[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  464 -> 459[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  465 -> 466[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  466 -> 464[taillabel="[self]" fontsize=7 fontname="times" color="black" ];
  467 -> 468[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  468 -> 464[taillabel="[value]" fontsize=7 fontname="times" color="black" ];
  469 -> 464[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  470 -> 519[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  470 -> 565[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  470 -> 571[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  471 -> 476[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  472 -> 471[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  473 -> 474[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  474 -> 472[taillabel="[a]" fontsize=7 fontname="times" color="black" ];
  475 -> 472[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  477 -> 486[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  478 -> 477[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  479 -> 480[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  480 -> 478[taillabel="[lhs]" fontsize=7 fontname="times" color="black" ];
  481 -> 482[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  482 -> 478[taillabel="[rhs]" fontsize=7 fontname="times" color="black" ];
  483 -> 484[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  484 -> 478[taillabel="[offset]" fontsize=7 fontname="times" color="black" ];
  485 -> 478[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  487 -> 494[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  488 -> 487[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  489 -> 490[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  490 -> 488[taillabel="[lhs]" fontsize=7 fontname="times" color="black" ];
  491 -> 492[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  492 -> 488[taillabel="[offset]" fontsize=7 fontname="times" color="black" ];
  493 -> 488[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  9 -> 591[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  9 -> 597[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  9 -> 601[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  9 -> 603[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  9 -> 609[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  9 -> 611[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  9 -> 617[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  9 -> 621[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  9 -> 629[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  9 -> 633[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  9 -> 641[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  9 -> 645[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  9 -> 653[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  9 -> 657[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  9 -> 665[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  9 -> 673[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  9 -> 685[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  9 -> 20[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  9 -> 880[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  9 -> 692[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  9 -> 51[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  9 -> 710[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  9 -> 720[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  9 -> 724[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  9 -> 731[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  9 -> 741[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  9 -> 749[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  9 -> 759[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  9 -> 921[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  9 -> 769[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  71 -> 9[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  11 -> 10[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  13 -> 12[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  581 -> 584[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  582 -> 581[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  583 -> 582[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  584 -> 723[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  584 -> 763[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  585 -> 592[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  586 -> 585[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  587 -> 588[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  588 -> 586[taillabel="[real]" fontsize=7 fontname="times" color="black" ];
  589 -> 590[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  590 -> 586[taillabel="[imaginary]" fontsize=7 fontname="times" color="black" ];
  591 -> 586[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  593 -> 598[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  594 -> 593[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  595 -> 596[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  596 -> 594[taillabel="[ptr]" fontsize=7 fontname="times" color="black" ];
  597 -> 594[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  598 -> 705[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  599 -> 606[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  600 -> 599[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  601 -> 602[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  602 -> 600[taillabel="[a]" fontsize=7 fontname="times" color="black" ];
  603 -> 604[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  604 -> 600[taillabel="[b]" fontsize=7 fontname="times" color="black" ];
  605 -> 600[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  607 -> 614[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  608 -> 607[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  609 -> 610[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  610 -> 608[taillabel="[a]" fontsize=7 fontname="times" color="black" ];
  611 -> 612[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  612 -> 608[taillabel="[b]" fontsize=7 fontname="times" color="black" ];
  613 -> 608[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  615 -> 626[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  616 -> 615[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  617 -> 618[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  618 -> 616[taillabel="[self]" fontsize=7 fontname="times" color="black" ];
  619 -> 616[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  620 -> 615[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  621 -> 622[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  622 -> 620[taillabel="[self]" fontsize=7 fontname="times" color="black" ];
  623 -> 624[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  624 -> 620[taillabel="[value]" fontsize=7 fontname="times" color="black" ];
  625 -> 620[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  627 -> 638[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  628 -> 627[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  629 -> 630[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  630 -> 628[taillabel="[self]" fontsize=7 fontname="times" color="black" ];
  631 -> 628[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  632 -> 627[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  633 -> 634[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  634 -> 632[taillabel="[self]" fontsize=7 fontname="times" color="black" ];
  635 -> 636[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  636 -> 632[taillabel="[value]" fontsize=7 fontname="times" color="black" ];
  637 -> 632[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  638 -> 712[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  638 -> 780[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  638 -> 786[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  639 -> 650[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  640 -> 639[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  641 -> 642[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  642 -> 640[taillabel="[self]" fontsize=7 fontname="times" color="black" ];
  643 -> 640[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  644 -> 639[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  645 -> 646[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  646 -> 644[taillabel="[self]" fontsize=7 fontname="times" color="black" ];
  647 -> 648[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  648 -> 644[taillabel="[value]" fontsize=7 fontname="times" color="black" ];
  649 -> 644[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  651 -> 662[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  652 -> 651[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  653 -> 654[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  654 -> 652[taillabel="[self]" fontsize=7 fontname="times" color="black" ];
  655 -> 652[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  656 -> 651[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  657 -> 658[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  658 -> 656[taillabel="[self]" fontsize=7 fontname="times" color="black" ];
  659 -> 660[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  660 -> 656[taillabel="[value]" fontsize=7 fontname="times" color="black" ];
  661 -> 656[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  662 -> 716[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  662 -> 792[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  662 -> 798[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  663 -> 668[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  664 -> 663[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  665 -> 666[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  666 -> 664[taillabel="[a]" fontsize=7 fontname="times" color="black" ];
  667 -> 664[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  669 -> 678[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  670 -> 669[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  671 -> 672[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  672 -> 670[taillabel="[lhs]" fontsize=7 fontname="times" color="black" ];
  673 -> 674[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  674 -> 670[taillabel="[rhs]" fontsize=7 fontname="times" color="black" ];
  675 -> 676[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  676 -> 670[taillabel="[offset]" fontsize=7 fontname="times" color="black" ];
  677 -> 670[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  679 -> 686[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  680 -> 679[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  681 -> 682[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  682 -> 680[taillabel="[lhs]" fontsize=7 fontname="times" color="black" ];
  683 -> 684[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  684 -> 680[taillabel="[offset]" fontsize=7 fontname="times" color="black" ];
  685 -> 680[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  14 -> 810[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  14 -> 834[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  14 -> 846[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  14 -> 850[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  14 -> 858[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  14 -> 864[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  14 -> 870[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  14 -> 876[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  14 -> 882[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  14 -> 23[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  14 -> 900[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  14 -> 934[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  14 -> 937[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  14 -> 940[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  14 -> 943[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  14 -> 946[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  15 -> 14[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  16 -> 15[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  17 -> 15[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  18 -> 15[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  19 -> 15[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  20 -> 15[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  808 -> 813[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  809 -> 808[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  810 -> 811[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  811 -> 809[taillabel="[a]" fontsize=7 fontname="times" color="black" ];
  812 -> 809[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  814 -> 821[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  815 -> 814[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  816 -> 817[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  817 -> 815[taillabel="[lhs]" fontsize=7 fontname="times" color="black" ];
  818 -> 819[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  819 -> 815[taillabel="[rhs]" fontsize=7 fontname="times" color="black" ];
  820 -> 815[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  822 -> 829[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  823 -> 822[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  824 -> 825[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  825 -> 823[taillabel="[lhs]" fontsize=7 fontname="times" color="black" ];
  826 -> 827[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  827 -> 823[taillabel="[rhs]" fontsize=7 fontname="times" color="black" ];
  828 -> 823[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  830 -> 839[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  831 -> 830[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  832 -> 833[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  833 -> 831[taillabel="[lhs]" fontsize=7 fontname="times" color="black" ];
  834 -> 835[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  835 -> 831[taillabel="[rhs]" fontsize=7 fontname="times" color="black" ];
  836 -> 837[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  837 -> 831[taillabel="[offset]" fontsize=7 fontname="times" color="black" ];
  838 -> 831[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  840 -> 847[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  841 -> 840[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  842 -> 843[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  843 -> 841[taillabel="[lhs]" fontsize=7 fontname="times" color="black" ];
  844 -> 845[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  845 -> 841[taillabel="[offset]" fontsize=7 fontname="times" color="black" ];
  846 -> 841[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  848 -> 853[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  849 -> 848[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  850 -> 851[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  851 -> 849[taillabel="[a]" fontsize=7 fontname="times" color="black" ];
  852 -> 849[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  854 -> 859[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  855 -> 854[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  856 -> 857[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  857 -> 855[taillabel="[a]" fontsize=7 fontname="times" color="black" ];
  858 -> 855[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  860 -> 865[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  861 -> 860[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  862 -> 863[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  863 -> 861[taillabel="[a]" fontsize=7 fontname="times" color="black" ];
  864 -> 861[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  866 -> 871[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  867 -> 866[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  868 -> 869[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  869 -> 867[taillabel="[a]" fontsize=7 fontname="times" color="black" ];
  870 -> 867[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  872 -> 877[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  873 -> 872[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  874 -> 875[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  875 -> 873[taillabel="[a]" fontsize=7 fontname="times" color="black" ];
  876 -> 873[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  878 -> 883[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  879 -> 878[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  880 -> 881[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  881 -> 879[taillabel="[a]" fontsize=7 fontname="times" color="black" ];
  882 -> 879[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  21 -> 26[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  22 -> 21[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  23 -> 24[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  24 -> 22[taillabel="[number]" fontsize=7 fontname="times" color="black" ];
  25 -> 22[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  26 -> 33[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  26 -> 36[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  26 -> 42[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  26 -> 48[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  27 -> 30[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  28 -> 27[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  29 -> 28[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  126 -> 125[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  127 -> 133[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  128 -> 127[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  129 -> 127[taillabel="[DEFAULT_VALUE]" fontsize=7 fontname="times" color="black" ];
  130 -> 129[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  131 -> 125[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  132 -> 131[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  133 -> 132[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  134 -> 132[taillabel="[RHS]" fontsize=7 fontname="times" color="black" ];
  135 -> 131[taillabel="[RHS]" fontsize=7 fontname="times" color="black" ];
  212 -> 211[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  213 -> 219[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  214 -> 213[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  215 -> 213[taillabel="[DEFAULT_VALUE]" fontsize=7 fontname="times" color="black" ];
  216 -> 215[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  217 -> 211[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  218 -> 217[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  219 -> 218[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  220 -> 218[taillabel="[RHS]" fontsize=7 fontname="times" color="black" ];
  221 -> 217[taillabel="[RHS]" fontsize=7 fontname="times" color="black" ];
  330 -> 329[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  331 -> 337[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  332 -> 331[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  333 -> 331[taillabel="[DEFAULT_VALUE]" fontsize=7 fontname="times" color="black" ];
  334 -> 333[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  335 -> 329[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  336 -> 335[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  337 -> 336[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  338 -> 336[taillabel="[RHS]" fontsize=7 fontname="times" color="black" ];
  339 -> 335[taillabel="[RHS]" fontsize=7 fontname="times" color="black" ];
  496 -> 495[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  497 -> 503[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  498 -> 497[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  499 -> 497[taillabel="[DEFAULT_VALUE]" fontsize=7 fontname="times" color="black" ];
  500 -> 499[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  501 -> 495[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  502 -> 501[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  503 -> 502[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  504 -> 502[taillabel="[RHS]" fontsize=7 fontname="times" color="black" ];
  505 -> 501[taillabel="[RHS]" fontsize=7 fontname="times" color="black" ];
  688 -> 687[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  689 -> 695[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  690 -> 689[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  691 -> 689[taillabel="[DEFAULT_VALUE]" fontsize=7 fontname="times" color="black" ];
  692 -> 691[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  693 -> 687[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  694 -> 693[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  695 -> 694[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  696 -> 694[taillabel="[RHS]" fontsize=7 fontname="times" color="black" ];
  697 -> 693[taillabel="[RHS]" fontsize=7 fontname="times" color="black" ];
  884 -> 887[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  885 -> 888[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  887 -> 886[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  888 -> 886[taillabel="[RHS]" fontsize=7 fontname="times" color="black" ];
  890 -> 893[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  891 -> 894[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  893 -> 892[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  894 -> 892[taillabel="[RHS]" fontsize=7 fontname="times" color="black" ];
  32 -> 31[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  33 -> 32[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  34 -> 32[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  35 -> 31[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  36 -> 35[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  37 -> 35[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  38 -> 37[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  39 -> 38[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  40 -> 37[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  41 -> 31[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  42 -> 41[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  43 -> 41[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  44 -> 43[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  45 -> 44[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  46 -> 43[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  47 -> 31[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  48 -> 47[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  49 -> 47[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  50 -> 49[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  51 -> 50[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  52 -> 49[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  53 -> 49[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  81 -> 84[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  82 -> 81[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  83 -> 82[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  253 -> 258[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  254 -> 253[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  257 -> 254[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  341 -> 355[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  343 -> 342[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  344 -> 354[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  344 -> 356[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  345 -> 344[taillabel="[DEFAULT_VALUE]" fontsize=7 fontname="times" color="black" ];
  346 -> 345[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  347 -> 345[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  348 -> 347[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  349 -> 347[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  350 -> 347[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  351 -> 350[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  352 -> 342[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  353 -> 352[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  354 -> 352[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  355 -> 352[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  356 -> 342[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  419 -> 424[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  420 -> 419[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  423 -> 420[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  507 -> 521[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  509 -> 508[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  510 -> 520[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  510 -> 522[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  511 -> 510[taillabel="[DEFAULT_VALUE]" fontsize=7 fontname="times" color="black" ];
  512 -> 511[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  513 -> 511[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  514 -> 513[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  515 -> 513[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  516 -> 513[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  517 -> 516[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  518 -> 508[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  519 -> 518[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  520 -> 518[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  521 -> 518[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  522 -> 508[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  585 -> 592[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  586 -> 585[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  591 -> 586[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  699 -> 714[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  700 -> 718[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  702 -> 701[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  703 -> 713[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  703 -> 717[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  703 -> 719[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  704 -> 703[taillabel="[DEFAULT_VALUE]" fontsize=7 fontname="times" color="black" ];
  705 -> 704[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  706 -> 704[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  707 -> 706[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  708 -> 706[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  709 -> 706[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  710 -> 709[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  711 -> 701[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  712 -> 711[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  713 -> 711[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  714 -> 711[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  715 -> 701[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  716 -> 715[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  717 -> 715[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  718 -> 715[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  719 -> 701[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  81 -> 84[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  82 -> 81[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  83 -> 82[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  253 -> 258[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  254 -> 253[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  257 -> 254[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  341 -> 355[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  343 -> 342[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  344 -> 354[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  344 -> 356[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  345 -> 344[taillabel="[DEFAULT_VALUE]" fontsize=7 fontname="times" color="black" ];
  346 -> 345[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  347 -> 345[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  348 -> 347[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  349 -> 347[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  350 -> 347[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  351 -> 350[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  352 -> 342[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  353 -> 352[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  354 -> 352[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  355 -> 352[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  356 -> 342[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  341 -> 355[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  343 -> 342[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  344 -> 354[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  344 -> 356[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  345 -> 344[taillabel="[DEFAULT_VALUE]" fontsize=7 fontname="times" color="black" ];
  346 -> 345[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  347 -> 345[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  348 -> 347[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  349 -> 347[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  350 -> 347[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  351 -> 350[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  352 -> 342[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  353 -> 352[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  354 -> 352[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  355 -> 352[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  356 -> 342[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  362 -> 366[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  364 -> 363[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  365 -> 364[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  366 -> 363[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  367 -> 363[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  368 -> 367[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  370 -> 375[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  371 -> 376[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  373 -> 372[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  374 -> 373[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  375 -> 372[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  376 -> 372[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  377 -> 372[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  378 -> 377[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  419 -> 424[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  420 -> 419[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  423 -> 420[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  507 -> 521[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  509 -> 508[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  510 -> 520[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  510 -> 522[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  511 -> 510[taillabel="[DEFAULT_VALUE]" fontsize=7 fontname="times" color="black" ];
  512 -> 511[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  513 -> 511[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  514 -> 513[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  515 -> 513[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  516 -> 513[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  517 -> 516[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  518 -> 508[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  519 -> 518[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  520 -> 518[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  521 -> 518[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  522 -> 508[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  507 -> 521[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  509 -> 508[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  510 -> 520[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  510 -> 522[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  511 -> 510[taillabel="[DEFAULT_VALUE]" fontsize=7 fontname="times" color="black" ];
  512 -> 511[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  513 -> 511[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  514 -> 513[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  515 -> 513[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  516 -> 513[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  517 -> 516[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  518 -> 508[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  519 -> 518[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  520 -> 518[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  521 -> 518[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  522 -> 508[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  528 -> 532[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  530 -> 529[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  531 -> 530[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  532 -> 529[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  533 -> 529[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  534 -> 533[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  536 -> 541[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  537 -> 542[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  539 -> 538[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  540 -> 539[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  541 -> 538[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  542 -> 538[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  543 -> 538[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  544 -> 543[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  585 -> 592[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  586 -> 585[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  591 -> 586[taillabel="[#RETURN_TYPE]" fontsize=7 fontname="times" color="black" ];
  699 -> 714[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  700 -> 718[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  702 -> 701[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  703 -> 713[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  703 -> 717[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  703 -> 719[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  704 -> 703[taillabel="[DEFAULT_VALUE]" fontsize=7 fontname="times" color="black" ];
  705 -> 704[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  706 -> 704[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  707 -> 706[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  708 -> 706[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  709 -> 706[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  710 -> 709[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  711 -> 701[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  712 -> 711[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  713 -> 711[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  714 -> 711[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  715 -> 701[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  716 -> 715[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  717 -> 715[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  718 -> 715[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  719 -> 701[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  699 -> 714[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  700 -> 718[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  702 -> 701[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  703 -> 713[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  703 -> 717[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  703 -> 719[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  704 -> 703[taillabel="[DEFAULT_VALUE]" fontsize=7 fontname="times" color="black" ];
  705 -> 704[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  706 -> 704[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  707 -> 706[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  708 -> 706[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  709 -> 706[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  710 -> 709[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  711 -> 701[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  712 -> 711[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  713 -> 711[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  714 -> 711[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  715 -> 701[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  716 -> 715[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  717 -> 715[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  718 -> 715[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  719 -> 701[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  725 -> 729[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  727 -> 726[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  728 -> 727[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  729 -> 726[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  730 -> 726[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  731 -> 730[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  733 -> 738[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  734 -> 739[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  736 -> 735[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  737 -> 736[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  738 -> 735[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  739 -> 735[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  740 -> 735[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  741 -> 740[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  743 -> 747[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  745 -> 744[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  746 -> 745[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  747 -> 744[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  748 -> 744[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  749 -> 748[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  751 -> 756[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  752 -> 757[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  754 -> 753[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  755 -> 754[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  756 -> 753[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  757 -> 753[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  758 -> 753[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  759 -> 758[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  901 -> 908[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  901 -> 911[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  901 -> 914[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  901 -> 917[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  901 -> 920[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  903 -> 902[taillabel="[STATEMENTS]" fontsize=7 fontname="times" color="black" ];
  904 -> 903[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  905 -> 904[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  906 -> 905[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  907 -> 906[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  908 -> 907[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  909 -> 907[taillabel="[RHS]" fontsize=7 fontname="times" color="black" ];
  910 -> 906[taillabel="[RHS]" fontsize=7 fontname="times" color="black" ];
  911 -> 910[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  912 -> 910[taillabel="[RHS]" fontsize=7 fontname="times" color="black" ];
  913 -> 905[taillabel="[RHS]" fontsize=7 fontname="times" color="black" ];
  914 -> 913[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  915 -> 913[taillabel="[RHS]" fontsize=7 fontname="times" color="black" ];
  916 -> 904[taillabel="[RHS]" fontsize=7 fontname="times" color="black" ];
  917 -> 916[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  918 -> 916[taillabel="[RHS]" fontsize=7 fontname="times" color="black" ];
  919 -> 903[taillabel="[RHS]" fontsize=7 fontname="times" color="black" ];
  920 -> 919[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  921 -> 919[taillabel="[RHS]" fontsize=7 fontname="times" color="black" ];
  85 -> 90[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  86 -> 85[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  88 -> 86[taillabel="[a]" fontsize=7 fontname="times" color="black" ];
  87 -> 88[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  171 -> 176[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  172 -> 171[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  174 -> 172[taillabel="[a]" fontsize=7 fontname="times" color="black" ];
  173 -> 174[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  305 -> 310[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  306 -> 305[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  308 -> 306[taillabel="[a]" fontsize=7 fontname="times" color="black" ];
  307 -> 308[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  471 -> 476[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  472 -> 471[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  474 -> 472[taillabel="[a]" fontsize=7 fontname="times" color="black" ];
  473 -> 474[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  663 -> 668[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  664 -> 663[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  666 -> 664[taillabel="[a]" fontsize=7 fontname="times" color="black" ];
  665 -> 666[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  85 -> 90[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  86 -> 85[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  88 -> 86[taillabel="[a]" fontsize=7 fontname="times" color="black" ];
  87 -> 88[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  171 -> 176[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  172 -> 171[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  174 -> 172[taillabel="[a]" fontsize=7 fontname="times" color="black" ];
  173 -> 174[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  305 -> 310[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  306 -> 305[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  308 -> 306[taillabel="[a]" fontsize=7 fontname="times" color="black" ];
  307 -> 308[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  471 -> 476[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  472 -> 471[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  474 -> 472[taillabel="[a]" fontsize=7 fontname="times" color="black" ];
  473 -> 474[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  663 -> 668[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  664 -> 663[taillabel="[FUNCTION]" fontsize=7 fontname="times" color="black" ];
  666 -> 664[taillabel="[a]" fontsize=7 fontname="times" color="black" ];
  665 -> 666[taillabel="[EXPECTED_TYPE]" fontsize=7 fontname="times" color="black" ];
  55 -> 57[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  57 -> 56[taillabel="[PATTERN_EXPRESSION]" fontsize=7 fontname="times" color="black" ];
  57 -> 73[taillabel="[PATTERN_MATCHING_VALUE]" fontsize=7 fontname="times" color="black" ];
  58 -> 56[taillabel="[MATCH_EXPRESSION]" fontsize=7 fontname="times" color="black" ];
  59 -> 58[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  59 -> 72[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  59 -> 75[taillabel="[REMOVED_TYPE]" fontsize=7 fontname="times" color="black" ];
  60 -> 58[taillabel="[RHS]" fontsize=7 fontname="times" color="black" ];
  73 -> 58[taillabel="[PATTERN_MATCHING_VALUE]" fontsize=7 fontname="times" color="black" ];
  73 -> 75[taillabel="[PATTERN_MATCHING_VALUE]" fontsize=7 fontname="times" color="black" ];
  61 -> 56[taillabel="[MATCH_EXPRESSION]" fontsize=7 fontname="times" color="black" ];
  62 -> 61[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  62 -> 74[taillabel="[LHS]" fontsize=7 fontname="times" color="black" ];
  62 -> 76[taillabel="[REMOVED_TYPE]" fontsize=7 fontname="times" color="black" ];
  63 -> 61[taillabel="[RHS]" fontsize=7 fontname="times" color="black" ];
  75 -> 61[taillabel="[PATTERN_MATCHING_VALUE]" fontsize=7 fontname="times" color="black" ];
  75 -> 76[taillabel="[PATTERN_MATCHING_VALUE]" fontsize=7 fontname="times" color="black" ];
  64 -> 56[taillabel="[MATCH_EXPRESSION]" fontsize=7 fontname="times" color="black" ];
  65 -> 64[taillabel="[RHS]" fontsize=7 fontname="times" color="black" ];
  76 -> 64[taillabel="[PATTERN_MATCHING_VALUE]" fontsize=7 fontname="times" color="black" ];
  397 -> 400[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  399 -> 398[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  400 -> 398[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  402 -> 406[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  403 -> 407[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  405 -> 404[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  406 -> 404[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  407 -> 404[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  563 -> 566[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  565 -> 564[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  566 -> 564[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  568 -> 572[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  569 -> 573[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  571 -> 570[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  572 -> 570[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  573 -> 570[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  778 -> 781[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  780 -> 779[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  781 -> 779[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  783 -> 787[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  784 -> 788[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  786 -> 785[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  787 -> 785[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  788 -> 785[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  790 -> 793[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  792 -> 791[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  793 -> 791[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  795 -> 799[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  796 -> 800[taillabel="[NAME]" fontsize=7 fontname="times" color="black" ];
  798 -> 797[taillabel="[]" fontsize=7 fontname="times" color="black" ];
  799 -> 797[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  800 -> 797[taillabel="[PARAMETER]" fontsize=7 fontname="times" color="black" ];
  label="LYS";
}
