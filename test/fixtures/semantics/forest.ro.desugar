type Tree = (Empty | Node)

ns Tree {
  fun is(a: Tree): boolean = {
    a is Empty || a is Node
  }
  
  fun ==(lhs: ref, rhs: ref): boolean = 
    lhs == rhs
  
  fun !=(lhs: ref, rhs: ref): boolean = 
    lhs != rhs
  
  fun store(lhs: ref, rhs: Tree, offset: i32): void = 
    %wasm {
      (i64.store (i32.add (get_local $offset)  (call addressFromRef  (get_local $lhs)))  (get_local $rhs))
    }
  
  fun load(lhs: ref, offset: i32): Tree = 
    %wasm {
      (i64.load (i32.add (get_local $offset)  (call addressFromRef  (get_local $lhs))))
    }
}

ns Empty {
  fun as(a: Empty): Tree = 
    %wasm {
      (get_local $a)
    }
}

ns Node {
  fun as(a: Node): Tree = 
    %wasm {
      (get_local $a)
    }
}

ns Tree {
  fun as(a: (Empty | Node)): Tree = 
    %wasm {
      (get_local $a)
    }
  fun as(a: Tree): ref = 
    %wasm {
      (get_local $a)
    }
}

type Empty = ???

ns Empty {
  fun apply(): Empty = 
    %wasm {
      (i64.const 0x200000000)
    }
  
  fun is(a: Empty): boolean = 
    %wasm {
      (i64.eq (i64.and (i64.const 0xffffffff00000000)  (get_local $a))  (i64.const 0x200000000))
    }
  
  fun ==(a: Empty, b: ref): boolean = 
    %wasm {
      (i64.eq (get_local $a)  (get_local $b))
    }
  
  fun !=(a: Empty, b: ref): boolean = 
    %wasm {
      (i64.ne (get_local $a)  (get_local $b))
    }
  
  fun store(lhs: ref, rhs: Empty, offset: i32): void = 
    %wasm {
      (i64.store (i32.add (get_local $offset)  (call addressFromRef  (get_local $lhs)))  (get_local $rhs))
    }
  
  fun load(lhs: ref, offset: i32): Empty = 
    %wasm {
      (i64.load (i32.add (get_local $offset)  (call addressFromRef  (get_local $lhs))))
    }
}

type Node = ???

ns Node {
  fun discriminant(): u64 = 
    %wasm {
      (i64.const 0x300000000)
    }
  
  fun sizeOf(): i32 = 
    8
  
  fun allocationSize(): u32 = 
    ref.allocationSize()
  
  fun apply(a: (Tree | Forest)): Node = {
    var ref = fromPointer(system::memory::malloc(sizeOf()))
    property_a(ref, a)
    ref
  }
  
  fun fromPointer(ptr: (i32 | u32)): Node = 
    %wasm {
      (i64.or (i64.const 0x300000000)  (i64.extend_u/i32 (get_local $ptr)))
    }
  
  fun property_a(target: Node): (Tree | Forest) = 
    %wasm {
      (i64.load (i32.add (i32.const 0)  (call addressFromRef  (get_local $target))))
    }
  fun property_a(target: Node, value: (Tree | Forest)): void = 
    %wasm {
      (i64.store (i32.add (i32.const 0)  (call addressFromRef  (get_local $target)))  (get_local $value))
    }
  
  fun is(a: Node): boolean = 
    %wasm {
      (i64.eq (i64.and (i64.const 0xffffffff00000000)  (get_local $a))  (i64.const 0x300000000))
    }
  
  fun store(lhs: ref, rhs: Node, offset: i32): void = 
    %wasm {
      (i64.store (i32.add (get_local $offset)  (call addressFromRef  (get_local $lhs)))  (get_local $rhs))
    }
  
  fun load(lhs: ref, offset: i32): Node = 
    %wasm {
      (i64.load (i32.add (get_local $offset)  (call addressFromRef  (get_local $lhs))))
    }
}

type Forest = (Nil | Cons)

ns Forest {
  fun is(a: Forest): boolean = {
    a is Nil || a is Cons
  }
  
  fun ==(lhs: ref, rhs: ref): boolean = 
    lhs == rhs
  
  fun !=(lhs: ref, rhs: ref): boolean = 
    lhs != rhs
  
  fun store(lhs: ref, rhs: Forest, offset: i32): void = 
    %wasm {
      (i64.store (i32.add (get_local $offset)  (call addressFromRef  (get_local $lhs)))  (get_local $rhs))
    }
  
  fun load(lhs: ref, offset: i32): Forest = 
    %wasm {
      (i64.load (i32.add (get_local $offset)  (call addressFromRef  (get_local $lhs))))
    }
}

ns Nil {
  fun as(a: Nil): Forest = 
    %wasm {
      (get_local $a)
    }
}

ns Cons {
  fun as(a: Cons): Forest = 
    %wasm {
      (get_local $a)
    }
}

ns Forest {
  fun as(a: (Nil | Cons)): Forest = 
    %wasm {
      (get_local $a)
    }
  fun as(a: Forest): ref = 
    %wasm {
      (get_local $a)
    }
}

type Nil = ???

ns Nil {
  fun apply(): Nil = 
    %wasm {
      (i64.const 0x500000000)
    }
  
  fun is(a: Nil): boolean = 
    %wasm {
      (i64.eq (i64.and (i64.const 0xffffffff00000000)  (get_local $a))  (i64.const 0x500000000))
    }
  
  fun ==(a: Nil, b: ref): boolean = 
    %wasm {
      (i64.eq (get_local $a)  (get_local $b))
    }
  
  fun !=(a: Nil, b: ref): boolean = 
    %wasm {
      (i64.ne (get_local $a)  (get_local $b))
    }
  
  fun store(lhs: ref, rhs: Nil, offset: i32): void = 
    %wasm {
      (i64.store (i32.add (get_local $offset)  (call addressFromRef  (get_local $lhs)))  (get_local $rhs))
    }
  
  fun load(lhs: ref, offset: i32): Nil = 
    %wasm {
      (i64.load (i32.add (get_local $offset)  (call addressFromRef  (get_local $lhs))))
    }
}

type Cons = ???

ns Cons {
  fun discriminant(): u64 = 
    %wasm {
      (i64.const 0x600000000)
    }
  
  fun sizeOf(): i32 = 
    8
  
  fun allocationSize(): u32 = 
    ref.allocationSize()
  
  fun apply(tree: (Tree | Forest)): Cons = {
    var ref = fromPointer(system::memory::malloc(sizeOf()))
    property_tree(ref, tree)
    ref
  }
  
  fun fromPointer(ptr: (i32 | u32)): Cons = 
    %wasm {
      (i64.or (i64.const 0x600000000)  (i64.extend_u/i32 (get_local $ptr)))
    }
  
  fun property_tree(target: Cons): (Tree | Forest) = 
    %wasm {
      (i64.load (i32.add (i32.const 0)  (call addressFromRef  (get_local $target))))
    }
  fun property_tree(target: Cons, value: (Tree | Forest)): void = 
    %wasm {
      (i64.store (i32.add (i32.const 0)  (call addressFromRef  (get_local $target)))  (get_local $value))
    }
  
  fun is(a: Cons): boolean = 
    %wasm {
      (i64.eq (i64.and (i64.const 0xffffffff00000000)  (get_local $a))  (i64.const 0x600000000))
    }
  
  fun store(lhs: ref, rhs: Cons, offset: i32): void = 
    %wasm {
      (i64.store (i32.add (get_local $offset)  (call addressFromRef  (get_local $lhs)))  (get_local $rhs))
    }
  
  fun load(lhs: ref, offset: i32): Cons = 
    %wasm {
      (i64.load (i32.add (get_local $offset)  (call addressFromRef  (get_local $lhs))))
    }
}

fun testPassing(): void = {
  var a = Nil
  var b = Cons(Empty)
  var c = Cons(Nil)
  var d = Cons(Node(Empty))
  var e = Node(Nil)
  support::test::assert(a is Nil == true)
  support::test::assert(a is Forest == true)
  support::test::assert(b is Forest == true)
  support::test::assert(c is Cons == true)
  support::test::assert(e is Node == true)
  support::test::assert(e is Tree == true)
}