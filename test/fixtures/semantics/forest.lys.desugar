type Tree = (Empty | Node)

impl Tree {
  fun is(a: (Tree | ref)): boolean = {
    a is Empty || a is Node
  }

  #[explicit]
  fun as(a: Tree): ref = %wasm {
    (local.get $a)
  }

  fun ==(lhs: ref, rhs: ref): boolean = lhs == rhs

  fun !=(lhs: ref, rhs: ref): boolean = lhs != rhs

  fun store(lhs: ref, rhs: Tree, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Tree = %wasm {
    (i64.load (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))))
  }
}

impl Empty {
  fun as(lhs: Empty): Tree = %wasm {
    (local.get $lhs)
  }
  #[explicit]
  fun as(lhs: Empty): ref = %wasm {
    (local.get $lhs)
  }

  #[inline]
  private fun Empty$discriminant(): i64 = {
    val discriminant: u32 = Empty.^discriminant
    discriminant as i64 << 32
  }

  fun apply(): Empty = %wasm {
    (call Empty$discriminant)
  }

  fun is(a: (Empty | ref)): boolean = %wasm {
    (i64.eq (i64.and (i64.const 0xffffffff00000000) (local.get $a)) (call Empty$discriminant))
  }

  fun ==(a: Empty, b: ref): boolean = %wasm {
    (i64.eq (local.get $a) (local.get $b))
  }

  fun !=(a: Empty, b: ref): boolean = %wasm {
    (i64.ne (local.get $a) (local.get $b))
  }

  fun store(lhs: ref, rhs: Empty, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Empty = %wasm {
    (i64.load (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))))
  }
}

impl Node {
  fun as(lhs: Node): Tree = %wasm {
    (local.get $lhs)
  }
  fun as(self: Node): UnsafeCPointer = %wasm {
    (call addressFromRef (get_local $self))
  }
  #[explicit]
  fun as(lhs: Node): ref = %wasm {
    (local.get $lhs)
  }

  #[inline]
  private fun Node$discriminant(): u64 = {
    val discriminant: u32 = Node.^discriminant
    discriminant as u64 << 32
  }

  fun apply(a: ((Tree | Forest))): Node = {
    var $ref = fromPointer(system::core::memory::calloc(1 as u32, Node.^allocationSize))
    property$0($ref, a)
    $ref
  }

  private fun fromPointer(ptr: u32): Node = %wasm {
    (i64.or (call Node$discriminant) (i64.extend_u/i32 (local.get $ptr)))
  }

  fun ==(a: Node, b: Node): boolean = %wasm {
    (i64.eq (local.get $a) (local.get $b))
  }

  fun !=(a: Node, b: Node): boolean = %wasm {
    (i64.ne (local.get $a) (local.get $b))
  }

  fun property_a(self: Node): ((Tree | Forest)) = property$0(self)
  fun property_a(self: Node, value: ((Tree | Forest))): void = property$0(self, value)

  #[inline]
  private fun property$0(self: Node): ((Tree | Forest)) = loadPropertyWithOffset$0(self, Node.^property$0_offset)
  #[inline]
  private fun property$0(self: Node, value: ((Tree | Forest))): void = storePropertyWithOffset$0(self, value, Node.^property$0_offset)

  #[inline]
  private fun loadPropertyWithOffset$0(self: Node, offset: u32): ((Tree | Forest)) = %wasm {
    (i64.load (i32.add (local.get $offset) (call addressFromRef (local.get $self))))
  }

  #[inline]
  private fun storePropertyWithOffset$0(self: Node, value: ((Tree | Forest)), offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call addressFromRef (local.get $self))) (local.get $value))
  }

  fun is(a: (Node | ref)): boolean = %wasm {
    (i64.eq (i64.and (i64.const 0xffffffff00000000) (local.get $a)) (call Node$discriminant))
  }

  fun store(lhs: ref, rhs: Node, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Node = %wasm {
    (i64.load (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))))
  }
}

type Empty = %struct {  }

type Node = %struct { a: (Tree | Forest) }

type Forest = (Nil | Cons)

impl Forest {
  fun is(a: (Forest | ref)): boolean = {
    a is Nil || a is Cons
  }

  #[explicit]
  fun as(a: Forest): ref = %wasm {
    (local.get $a)
  }

  fun ==(lhs: ref, rhs: ref): boolean = lhs == rhs

  fun !=(lhs: ref, rhs: ref): boolean = lhs != rhs

  fun store(lhs: ref, rhs: Forest, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Forest = %wasm {
    (i64.load (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))))
  }
}

impl Nil {
  fun as(lhs: Nil): Forest = %wasm {
    (local.get $lhs)
  }
  #[explicit]
  fun as(lhs: Nil): ref = %wasm {
    (local.get $lhs)
  }

  #[inline]
  private fun Nil$discriminant(): i64 = {
    val discriminant: u32 = Nil.^discriminant
    discriminant as i64 << 32
  }

  fun apply(): Nil = %wasm {
    (call Nil$discriminant)
  }

  fun is(a: (Nil | ref)): boolean = %wasm {
    (i64.eq (i64.and (i64.const 0xffffffff00000000) (local.get $a)) (call Nil$discriminant))
  }

  fun ==(a: Nil, b: ref): boolean = %wasm {
    (i64.eq (local.get $a) (local.get $b))
  }

  fun !=(a: Nil, b: ref): boolean = %wasm {
    (i64.ne (local.get $a) (local.get $b))
  }

  fun store(lhs: ref, rhs: Nil, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Nil = %wasm {
    (i64.load (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))))
  }
}

impl Cons {
  fun as(lhs: Cons): Forest = %wasm {
    (local.get $lhs)
  }
  fun as(self: Cons): UnsafeCPointer = %wasm {
    (call addressFromRef (get_local $self))
  }
  #[explicit]
  fun as(lhs: Cons): ref = %wasm {
    (local.get $lhs)
  }

  #[inline]
  private fun Cons$discriminant(): u64 = {
    val discriminant: u32 = Cons.^discriminant
    discriminant as u64 << 32
  }

  fun apply(tree: ((Tree | Forest))): Cons = {
    var $ref = fromPointer(system::core::memory::calloc(1 as u32, Cons.^allocationSize))
    property$0($ref, tree)
    $ref
  }

  private fun fromPointer(ptr: u32): Cons = %wasm {
    (i64.or (call Cons$discriminant) (i64.extend_u/i32 (local.get $ptr)))
  }

  fun ==(a: Cons, b: Cons): boolean = %wasm {
    (i64.eq (local.get $a) (local.get $b))
  }

  fun !=(a: Cons, b: Cons): boolean = %wasm {
    (i64.ne (local.get $a) (local.get $b))
  }

  fun property_tree(self: Cons): ((Tree | Forest)) = property$0(self)
  fun property_tree(self: Cons, value: ((Tree | Forest))): void = property$0(self, value)

  #[inline]
  private fun property$0(self: Cons): ((Tree | Forest)) = loadPropertyWithOffset$0(self, Cons.^property$0_offset)
  #[inline]
  private fun property$0(self: Cons, value: ((Tree | Forest))): void = storePropertyWithOffset$0(self, value, Cons.^property$0_offset)

  #[inline]
  private fun loadPropertyWithOffset$0(self: Cons, offset: u32): ((Tree | Forest)) = %wasm {
    (i64.load (i32.add (local.get $offset) (call addressFromRef (local.get $self))))
  }

  #[inline]
  private fun storePropertyWithOffset$0(self: Cons, value: ((Tree | Forest)), offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call addressFromRef (local.get $self))) (local.get $value))
  }

  fun is(a: (Cons | ref)): boolean = %wasm {
    (i64.eq (i64.and (i64.const 0xffffffff00000000) (local.get $a)) (call Cons$discriminant))
  }

  fun store(lhs: ref, rhs: Cons, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Cons = %wasm {
    (i64.load (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))))
  }
}

type Nil = %struct {  }

type Cons = %struct { tree: (Tree | Forest) }

fun testPassing(): void = {
  var a = Nil
  var b = Cons(Empty)
  var c = Cons(Nil)
  var d = Cons(Node(Empty))
  var e = Node(Nil)
  support::test::assert(a is Nil == true)
  support::test::assert(a is Forest == true)
  support::test::assert(b is Forest == true)
  support::test::assert(c is Cons == true)
  support::test::assert(e is Node == true)
  support::test::assert(e is Tree == true)
}