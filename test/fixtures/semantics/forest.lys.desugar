type Tree = (Empty | Node)

impl Tree {
  fun is(a: Tree): boolean = {
    a is Empty || a is Node
  }
  
  fun ==(lhs: ref, rhs: ref): boolean = lhs == rhs
  
  fun !=(lhs: ref, rhs: ref): boolean = lhs != rhs
  
  fun store(lhs: ref, rhs: Tree, offset: i32): void = %wasm {
    (i64.store (i32.add (get_local $offset) (call addressFromRef (get_local $lhs))) (get_local $rhs))
  }
  
  fun load(lhs: ref, offset: i32): Tree = %wasm {
    (i64.load (i32.add (get_local $offset) (call addressFromRef (get_local $lhs))))
  }
}

impl Tree {
  fun as(a: Tree): ref = %wasm {
    (get_local $a)
  }
}

impl Empty {
  fun as(a: Empty): Tree = %wasm {
    (get_local $a)
  }
}

impl Node {
  fun as(a: Node): Tree = %wasm {
    (get_local $a)
  }
}

type Empty = %struct {  }

type Node = %struct { a: (Tree | Forest) }

impl Empty {
  #[inline]
  private fun Empty$discriminant(): i64 = {
    val discriminant: i32 = Empty.^discriminant
    discriminant as i64 << 32
  }
  
  fun apply(): Empty = %wasm {
    (call Empty$discriminant)
  }
  
  fun is(a: Empty): boolean = %wasm {
    (i64.eq (i64.and (i64.const 0xffffffff00000000) (get_local $a)) (call Empty$discriminant))
  }
  
  fun ==(a: Empty, b: ref): boolean = %wasm {
    (i64.eq (get_local $a) (get_local $b))
  }
  
  fun !=(a: Empty, b: ref): boolean = %wasm {
    (i64.ne (get_local $a) (get_local $b))
  }
  
  fun store(lhs: ref, rhs: Empty, offset: i32): void = %wasm {
    (i64.store (i32.add (get_local $offset) (call addressFromRef (get_local $lhs))) (get_local $rhs))
  }
  
  fun load(lhs: ref, offset: i32): Empty = %wasm {
    (i64.load (i32.add (get_local $offset) (call addressFromRef (get_local $lhs))))
  }
}

impl Node {
  #[inline]
  private fun Node$discriminant(): i64 = {
    val discriminant: i32 = Node.^discriminant
    discriminant as i64 << 32
  }
  
  fun apply(a: ((Tree | Forest))): Node = {
    var $ref = fromPointer(system::memory::calloc(1, Node.^allocationSize))
    property$0($ref, a)
    $ref
  }
  
  private fun fromPointer(ptr: i32): Node = %wasm {
    (i64.or (call Node$discriminant) (i64.extend_u/i32 (get_local $ptr)))
  }
  
  fun ==(a: Node, b: Node): boolean = %wasm {
    (i64.eq (get_local $a) (get_local $b))
  }
  
  fun !=(a: Node, b: Node): boolean = %wasm {
    (i64.ne (get_local $a) (get_local $b))
  }
  
  fun property_a(self: Node): ((Tree | Forest)) = property$0(self)
  fun property_a(self: Node, value: ((Tree | Forest))): void = property$0(self, value)
  
  #[inline]
  private fun property$0(self: Node): ((Tree | Forest)) = loadPropertyWithOffset$0(self, Node.^property$0_offset)
  #[inline]
  private fun property$0(self: Node, value: ((Tree | Forest))): void = storePropertyWithOffset$0(self, value, Node.^property$0_offset)
  
  #[inline]
  private fun loadPropertyWithOffset$0(self: Node, offset: i32): ((Tree | Forest)) = %wasm {
    (i64.load (i32.add (get_local $offset) (call addressFromRef (get_local $self))))
  }
  
  #[inline]
  private fun storePropertyWithOffset$0(self: Node, value: ((Tree | Forest)), offset: i32): void = %wasm {
    (i64.store (i32.add (get_local $offset) (call addressFromRef (get_local $self))) (get_local $value))
  }
  
  fun is(a: Node): boolean = %wasm {
    (i64.eq (i64.and (i64.const 0xffffffff00000000) (get_local $a)) (call Node$discriminant))
  }
  
  fun store(lhs: ref, rhs: Node, offset: i32): void = %wasm {
    (i64.store (i32.add (get_local $offset) (call addressFromRef (get_local $lhs))) (get_local $rhs))
  }
  
  fun load(lhs: ref, offset: i32): Node = %wasm {
    (i64.load (i32.add (get_local $offset) (call addressFromRef (get_local $lhs))))
  }
}

type Forest = (Nil | Cons)

impl Forest {
  fun is(a: Forest): boolean = {
    a is Nil || a is Cons
  }
  
  fun ==(lhs: ref, rhs: ref): boolean = lhs == rhs
  
  fun !=(lhs: ref, rhs: ref): boolean = lhs != rhs
  
  fun store(lhs: ref, rhs: Forest, offset: i32): void = %wasm {
    (i64.store (i32.add (get_local $offset) (call addressFromRef (get_local $lhs))) (get_local $rhs))
  }
  
  fun load(lhs: ref, offset: i32): Forest = %wasm {
    (i64.load (i32.add (get_local $offset) (call addressFromRef (get_local $lhs))))
  }
}

impl Forest {
  fun as(a: Forest): ref = %wasm {
    (get_local $a)
  }
}

impl Nil {
  fun as(a: Nil): Forest = %wasm {
    (get_local $a)
  }
}

impl Cons {
  fun as(a: Cons): Forest = %wasm {
    (get_local $a)
  }
}

type Nil = %struct {  }

type Cons = %struct { tree: (Tree | Forest) }

impl Nil {
  #[inline]
  private fun Nil$discriminant(): i64 = {
    val discriminant: i32 = Nil.^discriminant
    discriminant as i64 << 32
  }
  
  fun apply(): Nil = %wasm {
    (call Nil$discriminant)
  }
  
  fun is(a: Nil): boolean = %wasm {
    (i64.eq (i64.and (i64.const 0xffffffff00000000) (get_local $a)) (call Nil$discriminant))
  }
  
  fun ==(a: Nil, b: ref): boolean = %wasm {
    (i64.eq (get_local $a) (get_local $b))
  }
  
  fun !=(a: Nil, b: ref): boolean = %wasm {
    (i64.ne (get_local $a) (get_local $b))
  }
  
  fun store(lhs: ref, rhs: Nil, offset: i32): void = %wasm {
    (i64.store (i32.add (get_local $offset) (call addressFromRef (get_local $lhs))) (get_local $rhs))
  }
  
  fun load(lhs: ref, offset: i32): Nil = %wasm {
    (i64.load (i32.add (get_local $offset) (call addressFromRef (get_local $lhs))))
  }
}

impl Cons {
  #[inline]
  private fun Cons$discriminant(): i64 = {
    val discriminant: i32 = Cons.^discriminant
    discriminant as i64 << 32
  }
  
  fun apply(tree: ((Tree | Forest))): Cons = {
    var $ref = fromPointer(system::memory::calloc(1, Cons.^allocationSize))
    property$0($ref, tree)
    $ref
  }
  
  private fun fromPointer(ptr: i32): Cons = %wasm {
    (i64.or (call Cons$discriminant) (i64.extend_u/i32 (get_local $ptr)))
  }
  
  fun ==(a: Cons, b: Cons): boolean = %wasm {
    (i64.eq (get_local $a) (get_local $b))
  }
  
  fun !=(a: Cons, b: Cons): boolean = %wasm {
    (i64.ne (get_local $a) (get_local $b))
  }
  
  fun property_tree(self: Cons): ((Tree | Forest)) = property$0(self)
  fun property_tree(self: Cons, value: ((Tree | Forest))): void = property$0(self, value)
  
  #[inline]
  private fun property$0(self: Cons): ((Tree | Forest)) = loadPropertyWithOffset$0(self, Cons.^property$0_offset)
  #[inline]
  private fun property$0(self: Cons, value: ((Tree | Forest))): void = storePropertyWithOffset$0(self, value, Cons.^property$0_offset)
  
  #[inline]
  private fun loadPropertyWithOffset$0(self: Cons, offset: i32): ((Tree | Forest)) = %wasm {
    (i64.load (i32.add (get_local $offset) (call addressFromRef (get_local $self))))
  }
  
  #[inline]
  private fun storePropertyWithOffset$0(self: Cons, value: ((Tree | Forest)), offset: i32): void = %wasm {
    (i64.store (i32.add (get_local $offset) (call addressFromRef (get_local $self))) (get_local $value))
  }
  
  fun is(a: Cons): boolean = %wasm {
    (i64.eq (i64.and (i64.const 0xffffffff00000000) (get_local $a)) (call Cons$discriminant))
  }
  
  fun store(lhs: ref, rhs: Cons, offset: i32): void = %wasm {
    (i64.store (i32.add (get_local $offset) (call addressFromRef (get_local $lhs))) (get_local $rhs))
  }
  
  fun load(lhs: ref, offset: i32): Cons = %wasm {
    (i64.load (i32.add (get_local $offset) (call addressFromRef (get_local $lhs))))
  }
}

fun testPassing(): void = {
  var a = Nil
  var b = Cons(Empty)
  var c = Cons(Nil)
  var d = Cons(Node(Empty))
  var e = Node(Nil)
  support::test::assert(a is Nil == true)
  support::test::assert(a is Forest == true)
  support::test::assert(b is Forest == true)
  support::test::assert(c is Cons == true)
  support::test::assert(e is Node == true)
  support::test::assert(e is Tree == true)
}