type AA = BB

ns AA {
  fun is(a: AA): boolean = {
    a is BB
  }
}

ns BB {
  fun as(a: BB): AA = 
    %wasm {
      (get_local $a)
    }
}

ns AA {
  fun as(a: BB): AA = 
    %wasm {
      (get_local $a)
    }
  fun as(a: AA): ref = 
    %wasm {
      (get_local $a)
    }
}

type BB = ???

ns BB {
  fun apply(): BB = 
    %wasm {
      (i64.const 0x200000000)
    }
  
  fun is(a: BB): boolean = 
    %wasm {
      (i64.eq (i64.and (i64.const 0xffffffff00000000)  (get_local $a))  (i64.const 0x200000000))
    }
  
  fun ==(a: BB, b: ref): boolean = 
    %wasm {
      (i64.eq (get_local $a)  (get_local $b))
    }
  
  fun !=(a: BB, b: ref): boolean = 
    %wasm {
      (i64.ne (get_local $a)  (get_local $b))
    }
}

type TT = ???

ns TT {
  fun apply(): TT = 
    %wasm {
      (i64.const 0x300000000)
    }
  
  fun is(a: TT): boolean = 
    %wasm {
      (i64.eq (i64.and (i64.const 0xffffffff00000000)  (get_local $a))  (i64.const 0x300000000))
    }
  
  fun ==(a: TT, b: ref): boolean = 
    %wasm {
      (i64.eq (get_local $a)  (get_local $b))
    }
  
  fun !=(a: TT, b: ref): boolean = 
    %wasm {
      (i64.ne (get_local $a)  (get_local $b))
    }
}

ns BB {
  fun a(): i32 = 
    1
}

fun main(): i32 = 
  BB.a()