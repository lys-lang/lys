
|-DocumentNode
  |-ImportDirectiveNode
    |-QNameNode=system::core
      |-NameIdentifierNode="system"
      |-NameIdentifierNode="core"
  |-TypeDirectiveNode
    |-NameIdentifierNode="Enum" type=(type (alias Enum (union (alias A (struct)) (alias B (struct)) (alias C (struct)))))
    |-UnionTypeNode type=(type (union (alias A (struct)) (alias B (struct)) (alias C (struct))))
      |-ReferenceNode type=(type (alias A (struct)))
        |-QNameNode=A
          |-NameIdentifierNode="A"
      |-ReferenceNode type=(type (alias B (struct)))
        |-QNameNode=B
          |-NameIdentifierNode="B"
      |-ReferenceNode type=(type (alias C (struct)))
        |-QNameNode=C
          |-NameIdentifierNode="C"
  |-ImplDirective
    |-ReferenceNode
      |-QNameNode=Enum
        |-NameIdentifierNode="Enum"
    |-OverloadedFunctionNode type=(fun "is" ((union (alias Enum) (alias ref))) (alias boolean)) annotations=Injected
      |-FunDirectiveNode
        |-FunctionNode type=(fun "is" ((union (alias Enum) (alias ref))) (alias boolean)) annotations=IsOverloaded
          |-ParameterNode annotations=Local(a:Enum | ref#0)
            |-NameIdentifierNode="a" type=(union (alias Enum (union (alias A (struct)) (alias B (struct)) (alias C (struct)))) (alias ref (ref ?)))
            |-UnionTypeNode type=(type (union (alias Enum (union (alias A (struct)) (alias B (struct)) (alias C (struct)))) (alias ref (ref ?))))
              |-ReferenceNode type=(type (alias Enum (union (alias A (struct)) (alias B (struct)) (alias C (struct)))))
                |-QNameNode=Enum
                  |-NameIdentifierNode="Enum"
              |-ReferenceNode type=(type (alias ref (ref ?)))
                |-QNameNode=ref
                  |-NameIdentifierNode="ref"
          |-NameIdentifierNode="is"
          |-ReferenceNode type=(type (alias boolean (native boolean)))
            |-QNameNode=boolean
              |-NameIdentifierNode="boolean"
          |-BlockNode type=(alias boolean (native boolean)) annotations=IsValueNode
            |-BinaryExpressionNode=(fun "||" ((alias boolean) (alias boolean)) (alias boolean)) type=(alias boolean (native boolean)) annotations=IsValueNode,IsReturnExpression
              |-NameIdentifierNode="||"
              |-BinaryExpressionNode=(fun "||" ((alias boolean) (alias boolean)) (alias boolean)) type=(alias boolean (native boolean)) annotations=IsValueNode
                |-NameIdentifierNode="||"
                |-IsExpressionNode=(fun "is" ((union (alias A) (alias ref))) (alias boolean)) type=(alias boolean (native boolean)) annotations=IsValueNode
                  |-ReferenceNode type=(union (alias Enum (union (alias A (struct)) (alias B (struct)) (alias C (struct)))) (alias ref (ref ?))) annotations=IsValueNode,Local(a:Enum | ref#0)
                    |-QNameNode=a
                      |-NameIdentifierNode="a"
                  |-ReferenceNode type=(type (alias A (struct)))
                    |-QNameNode=A
                      |-NameIdentifierNode="A"
                |-IsExpressionNode=(fun "is" ((union (alias B) (alias ref))) (alias boolean)) type=(alias boolean (native boolean)) annotations=IsValueNode
                  |-ReferenceNode type=(union (alias Enum (union (alias A (struct)) (alias B (struct)) (alias C (struct)))) (alias ref (ref ?))) annotations=IsValueNode,Local(a:Enum | ref#0)
                    |-QNameNode=a
                      |-NameIdentifierNode="a"
                  |-ReferenceNode type=(type (alias B (struct)))
                    |-QNameNode=B
                      |-NameIdentifierNode="B"
              |-IsExpressionNode=(fun "is" ((union (alias C) (alias ref))) (alias boolean)) type=(alias boolean (native boolean)) annotations=IsValueNode
                |-ReferenceNode type=(union (alias Enum (union (alias A (struct)) (alias B (struct)) (alias C (struct)))) (alias ref (ref ?))) annotations=IsValueNode,Local(a:Enum | ref#0)
                  |-QNameNode=a
                    |-NameIdentifierNode="a"
                |-ReferenceNode type=(type (alias C (struct)))
                  |-QNameNode=C
                    |-NameIdentifierNode="C"
      |-NameIdentifierNode="is" type=(fun "is" ((union (alias Enum) (alias ref))) (alias boolean))
    |-OverloadedFunctionNode type=(fun "as" ((alias Enum)) (alias ref)) annotations=Injected
      |-FunDirectiveNode
        |-DecoratorNode
          |-NameIdentifierNode="explicit"
        |-FunctionNode type=(fun "as" ((alias Enum)) (alias ref)) annotations=IsOverloaded
          |-ParameterNode annotations=Local(a:Enum#0)
            |-NameIdentifierNode="a" type=(alias Enum (union (alias A (struct)) (alias B (struct)) (alias C (struct))))
            |-ReferenceNode type=(type (alias Enum (union (alias A (struct)) (alias B (struct)) (alias C (struct)))))
              |-QNameNode=Enum
                |-NameIdentifierNode="Enum"
          |-NameIdentifierNode="as" annotations=Explicit
          |-ReferenceNode type=(type (alias ref (ref ?)))
            |-QNameNode=ref
              |-NameIdentifierNode="ref"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-QNameNode=$a
                |-NameIdentifierNode="$a"
      |-NameIdentifierNode="as" type=(fun "as" ((alias Enum)) (alias ref))
    |-OverloadedFunctionNode type=(fun "==" ((alias ref) (alias ref)) (alias boolean)) annotations=Injected
      |-FunDirectiveNode
        |-FunctionNode type=(fun "==" ((alias ref) (alias ref)) (alias boolean)) annotations=IsOverloaded
          |-ParameterNode annotations=Local(lhs:ref#0)
            |-NameIdentifierNode="lhs" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ParameterNode annotations=Local(rhs:ref#1)
            |-NameIdentifierNode="rhs" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-NameIdentifierNode="=="
          |-ReferenceNode type=(type (alias boolean (native boolean)))
            |-QNameNode=boolean
              |-NameIdentifierNode="boolean"
          |-BinaryExpressionNode=(fun "==" ((alias ref) (alias ref)) (alias boolean)) type=(alias boolean (native boolean)) annotations=IsValueNode,IsReturnExpression
            |-NameIdentifierNode="=="
            |-ReferenceNode type=(alias ref (ref ?)) annotations=IsValueNode,Local(lhs:ref#0)
              |-QNameNode=lhs
                |-NameIdentifierNode="lhs"
            |-ReferenceNode type=(alias ref (ref ?)) annotations=IsValueNode,Local(rhs:ref#1)
              |-QNameNode=rhs
                |-NameIdentifierNode="rhs"
      |-NameIdentifierNode="==" type=(fun "==" ((alias ref) (alias ref)) (alias boolean))
    |-OverloadedFunctionNode type=(fun "!=" ((alias ref) (alias ref)) (alias boolean)) annotations=Injected
      |-FunDirectiveNode
        |-FunctionNode type=(fun "!=" ((alias ref) (alias ref)) (alias boolean)) annotations=IsOverloaded
          |-ParameterNode annotations=Local(lhs:ref#0)
            |-NameIdentifierNode="lhs" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ParameterNode annotations=Local(rhs:ref#1)
            |-NameIdentifierNode="rhs" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-NameIdentifierNode="!="
          |-ReferenceNode type=(type (alias boolean (native boolean)))
            |-QNameNode=boolean
              |-NameIdentifierNode="boolean"
          |-BinaryExpressionNode=(fun "!=" ((alias ref) (alias ref)) (alias boolean)) type=(alias boolean (native boolean)) annotations=IsValueNode,IsReturnExpression
            |-NameIdentifierNode="!="
            |-ReferenceNode type=(alias ref (ref ?)) annotations=IsValueNode,Local(lhs:ref#0)
              |-QNameNode=lhs
                |-NameIdentifierNode="lhs"
            |-ReferenceNode type=(alias ref (ref ?)) annotations=IsValueNode,Local(rhs:ref#1)
              |-QNameNode=rhs
                |-NameIdentifierNode="rhs"
      |-NameIdentifierNode="!=" type=(fun "!=" ((alias ref) (alias ref)) (alias boolean))
    |-OverloadedFunctionNode type=(fun "store" ((alias ref) (alias Enum) (alias u32)) (alias void)) annotations=Injected
      |-FunDirectiveNode
        |-FunctionNode type=(fun "store" ((alias ref) (alias Enum) (alias u32)) (alias void)) annotations=IsOverloaded
          |-ParameterNode annotations=Local(lhs:ref#0)
            |-NameIdentifierNode="lhs" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ParameterNode annotations=Local(rhs:Enum#1)
            |-NameIdentifierNode="rhs" type=(alias Enum (union (alias A (struct)) (alias B (struct)) (alias C (struct))))
            |-ReferenceNode type=(type (alias Enum (union (alias A (struct)) (alias B (struct)) (alias C (struct)))))
              |-QNameNode=Enum
                |-NameIdentifierNode="Enum"
          |-ParameterNode annotations=Local(offset:u32#2)
            |-NameIdentifierNode="offset" type=(alias u32 (native u32))
            |-ReferenceNode type=(type (alias u32 (native u32)))
              |-QNameNode=u32
                |-NameIdentifierNode="u32"
          |-NameIdentifierNode="store"
          |-ReferenceNode type=(type (alias void (native void)))
            |-QNameNode=void
              |-NameIdentifierNode="void"
          |-WasmExpressionNode type=(never)
            |-WasmAtomNode
              |-WasmAtomNode
                |-WasmAtomNode
                  |-QNameNode=$offset
                    |-NameIdentifierNode="$offset"
                |-WasmAtomNode
                  |-ReferenceNode type=(fun "addressFromRef" ((alias ref)) (alias u32))
                    |-QNameNode=addressFromRef
                      |-NameIdentifierNode="addressFromRef"
                  |-WasmAtomNode
                    |-QNameNode=$lhs
                      |-NameIdentifierNode="$lhs"
              |-WasmAtomNode
                |-QNameNode=$rhs
                  |-NameIdentifierNode="$rhs"
      |-NameIdentifierNode="store" type=(fun "store" ((alias ref) (alias Enum) (alias u32)) (alias void))
    |-OverloadedFunctionNode type=(fun "load" ((alias ref) (alias u32)) (alias Enum)) annotations=Injected
      |-FunDirectiveNode
        |-FunctionNode type=(fun "load" ((alias ref) (alias u32)) (alias Enum)) annotations=IsOverloaded
          |-ParameterNode annotations=Local(lhs:ref#0)
            |-NameIdentifierNode="lhs" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ParameterNode annotations=Local(offset:u32#1)
            |-NameIdentifierNode="offset" type=(alias u32 (native u32))
            |-ReferenceNode type=(type (alias u32 (native u32)))
              |-QNameNode=u32
                |-NameIdentifierNode="u32"
          |-NameIdentifierNode="load"
          |-ReferenceNode type=(type (alias Enum (union (alias A (struct)) (alias B (struct)) (alias C (struct)))))
            |-QNameNode=Enum
              |-NameIdentifierNode="Enum"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-WasmAtomNode
                  |-QNameNode=$offset
                    |-NameIdentifierNode="$offset"
                |-WasmAtomNode
                  |-ReferenceNode type=(fun "addressFromRef" ((alias ref)) (alias u32))
                    |-QNameNode=addressFromRef
                      |-NameIdentifierNode="addressFromRef"
                  |-WasmAtomNode
                    |-QNameNode=$lhs
                      |-NameIdentifierNode="$lhs"
      |-NameIdentifierNode="load" type=(fun "load" ((alias ref) (alias u32)) (alias Enum))
  |-ImplDirective
    |-ReferenceNode
      |-QNameNode=A
        |-NameIdentifierNode="A"
    |-OverloadedFunctionNode type=(intersection (fun "as" ((alias A)) (alias Enum)) (fun "as" ((alias A)) (alias ref))) annotations=Injected
      |-FunDirectiveNode
        |-FunctionNode type=(fun "as" ((alias A)) (alias Enum)) annotations=IsOverloaded
          |-ParameterNode annotations=Local(lhs:A#0)
            |-NameIdentifierNode="lhs" type=(alias A (struct))
            |-ReferenceNode type=(type (alias A (struct)))
              |-QNameNode=A
                |-NameIdentifierNode="A"
          |-NameIdentifierNode="as"
          |-ReferenceNode type=(type (alias Enum (union (alias A (struct)) (alias B (struct)) (alias C (struct)))))
            |-QNameNode=Enum
              |-NameIdentifierNode="Enum"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-QNameNode=$lhs
                |-NameIdentifierNode="$lhs"
      |-FunDirectiveNode
        |-DecoratorNode
          |-NameIdentifierNode="explicit"
        |-FunctionNode type=(fun "as" ((alias A)) (alias ref)) annotations=IsOverloaded
          |-ParameterNode annotations=Local(lhs:A#0)
            |-NameIdentifierNode="lhs" type=(alias A (struct))
            |-ReferenceNode type=(type (alias A (struct)))
              |-QNameNode=A
                |-NameIdentifierNode="A"
          |-NameIdentifierNode="as" annotations=Explicit
          |-ReferenceNode type=(type (alias ref (ref ?)))
            |-QNameNode=ref
              |-NameIdentifierNode="ref"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-QNameNode=$lhs
                |-NameIdentifierNode="$lhs"
      |-NameIdentifierNode="as" type=(intersection (fun "as" ((alias A)) (alias Enum)) (fun "as" ((alias A)) (alias ref)))
    |-OverloadedFunctionNode type=(fun "A$discriminant" () (alias i64)) annotations=Injected
      |-FunDirectiveNode
        |-DecoratorNode
          |-NameIdentifierNode="inline"
        |-FunctionNode type=(fun "A$discriminant" () (alias i64)) annotations=IsOverloaded
          |-NameIdentifierNode="A$discriminant" annotations=Inline
          |-ReferenceNode type=(type (alias i64 (native i64)))
            |-QNameNode=i64
              |-NameIdentifierNode="i64"
          |-BlockNode type=(alias i64 (native i64)) annotations=IsValueNode
            |-ValDeclarationNode type=(native void) annotations=Local(test/fixtures/compiler/is.lys::discriminant:u32#0)
              |-NameIdentifierNode="discriminant" type=(alias u32 (native u32))
              |-ReferenceNode type=(type (alias u32 (native u32)))
                |-QNameNode=u32
                  |-NameIdentifierNode="u32"
              |-MemberNode type=(native u32) annotations=IsValueNode
                |-ReferenceNode type=(type (alias A (struct)))
                  |-QNameNode=A
                    |-NameIdentifierNode="A"
                |-NameIdentifierNode="discriminant"
            |-BinaryExpressionNode=(fun "<<" ((alias i64) (alias i32)) (alias i64)) type=(alias i64 (native i64)) annotations=IsValueNode,IsReturnExpression
              |-NameIdentifierNode="<<"
              |-AsExpressionNode=(fun "as" ((alias u32)) (alias i64)) type=(alias i64 (native i64)) annotations=IsValueNode
                |-ReferenceNode type=(alias u32 (native u32)) annotations=IsValueNode,Local(test/fixtures/compiler/is.lys::discriminant:u32#0)
                  |-QNameNode=discriminant
                    |-NameIdentifierNode="discriminant"
                |-ReferenceNode type=(type (alias i64 (native i64)))
                  |-QNameNode=i64
                    |-NameIdentifierNode="i64"
              |-IntegerLiteral=32 type=(alias i32 (native i32)) annotations=IsValueNode
      |-NameIdentifierNode="A$discriminant" type=(fun "A$discriminant" () (alias i64))
    |-OverloadedFunctionNode type=(fun "apply" () (alias A)) annotations=Injected
      |-FunDirectiveNode
        |-FunctionNode type=(fun "apply" () (alias A)) annotations=IsOverloaded
          |-NameIdentifierNode="apply"
          |-ReferenceNode type=(type (alias A (struct)))
            |-QNameNode=A
              |-NameIdentifierNode="A"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-ReferenceNode type=(fun "A$discriminant" () (alias i64))
                |-QNameNode=A$discriminant
                  |-NameIdentifierNode="A$discriminant"
      |-NameIdentifierNode="apply" type=(fun "apply" () (alias A))
    |-OverloadedFunctionNode type=(fun "is" ((union (alias A) (alias ref))) (alias boolean)) annotations=Injected
      |-FunDirectiveNode
        |-FunctionNode type=(fun "is" ((union (alias A) (alias ref))) (alias boolean)) annotations=IsOverloaded
          |-ParameterNode annotations=Local(a:A | ref#0)
            |-NameIdentifierNode="a" type=(union (alias A (struct)) (alias ref (ref ?)))
            |-UnionTypeNode type=(type (union (alias A (struct)) (alias ref (ref ?))))
              |-ReferenceNode type=(type (alias A (struct)))
                |-QNameNode=A
                  |-NameIdentifierNode="A"
              |-ReferenceNode type=(type (alias ref (ref ?)))
                |-QNameNode=ref
                  |-NameIdentifierNode="ref"
          |-NameIdentifierNode="is"
          |-ReferenceNode type=(type (alias boolean (native boolean)))
            |-QNameNode=boolean
              |-NameIdentifierNode="boolean"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-WasmAtomNode
                  |-HexLiteral=18446744069414584000
                |-WasmAtomNode
                  |-QNameNode=$a
                    |-NameIdentifierNode="$a"
              |-WasmAtomNode
                |-ReferenceNode type=(fun "A$discriminant" () (alias i64))
                  |-QNameNode=A$discriminant
                    |-NameIdentifierNode="A$discriminant"
      |-NameIdentifierNode="is" type=(fun "is" ((union (alias A) (alias ref))) (alias boolean))
    |-OverloadedFunctionNode type=(fun "==" ((alias A) (alias ref)) (alias boolean)) annotations=Injected
      |-FunDirectiveNode
        |-FunctionNode type=(fun "==" ((alias A) (alias ref)) (alias boolean)) annotations=IsOverloaded
          |-ParameterNode annotations=Local(a:A#0)
            |-NameIdentifierNode="a" type=(alias A (struct))
            |-ReferenceNode type=(type (alias A (struct)))
              |-QNameNode=A
                |-NameIdentifierNode="A"
          |-ParameterNode annotations=Local(b:ref#1)
            |-NameIdentifierNode="b" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-NameIdentifierNode="=="
          |-ReferenceNode type=(type (alias boolean (native boolean)))
            |-QNameNode=boolean
              |-NameIdentifierNode="boolean"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-QNameNode=$a
                  |-NameIdentifierNode="$a"
              |-WasmAtomNode
                |-QNameNode=$b
                  |-NameIdentifierNode="$b"
      |-NameIdentifierNode="==" type=(fun "==" ((alias A) (alias ref)) (alias boolean))
    |-OverloadedFunctionNode type=(fun "!=" ((alias A) (alias ref)) (alias boolean)) annotations=Injected
      |-FunDirectiveNode
        |-FunctionNode type=(fun "!=" ((alias A) (alias ref)) (alias boolean)) annotations=IsOverloaded
          |-ParameterNode annotations=Local(a:A#0)
            |-NameIdentifierNode="a" type=(alias A (struct))
            |-ReferenceNode type=(type (alias A (struct)))
              |-QNameNode=A
                |-NameIdentifierNode="A"
          |-ParameterNode annotations=Local(b:ref#1)
            |-NameIdentifierNode="b" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-NameIdentifierNode="!="
          |-ReferenceNode type=(type (alias boolean (native boolean)))
            |-QNameNode=boolean
              |-NameIdentifierNode="boolean"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-QNameNode=$a
                  |-NameIdentifierNode="$a"
              |-WasmAtomNode
                |-QNameNode=$b
                  |-NameIdentifierNode="$b"
      |-NameIdentifierNode="!=" type=(fun "!=" ((alias A) (alias ref)) (alias boolean))
    |-OverloadedFunctionNode type=(fun "store" ((alias ref) (alias A) (alias u32)) (alias void)) annotations=Injected
      |-FunDirectiveNode
        |-FunctionNode type=(fun "store" ((alias ref) (alias A) (alias u32)) (alias void)) annotations=IsOverloaded
          |-ParameterNode annotations=Local(lhs:ref#0)
            |-NameIdentifierNode="lhs" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ParameterNode annotations=Local(rhs:A#1)
            |-NameIdentifierNode="rhs" type=(alias A (struct))
            |-ReferenceNode type=(type (alias A (struct)))
              |-QNameNode=A
                |-NameIdentifierNode="A"
          |-ParameterNode annotations=Local(offset:u32#2)
            |-NameIdentifierNode="offset" type=(alias u32 (native u32))
            |-ReferenceNode type=(type (alias u32 (native u32)))
              |-QNameNode=u32
                |-NameIdentifierNode="u32"
          |-NameIdentifierNode="store"
          |-ReferenceNode type=(type (alias void (native void)))
            |-QNameNode=void
              |-NameIdentifierNode="void"
          |-WasmExpressionNode type=(never)
            |-WasmAtomNode
              |-WasmAtomNode
                |-WasmAtomNode
                  |-QNameNode=$offset
                    |-NameIdentifierNode="$offset"
                |-WasmAtomNode
                  |-ReferenceNode type=(fun "addressFromRef" ((alias ref)) (alias u32))
                    |-QNameNode=addressFromRef
                      |-NameIdentifierNode="addressFromRef"
                  |-WasmAtomNode
                    |-QNameNode=$lhs
                      |-NameIdentifierNode="$lhs"
              |-WasmAtomNode
                |-QNameNode=$rhs
                  |-NameIdentifierNode="$rhs"
      |-NameIdentifierNode="store" type=(fun "store" ((alias ref) (alias A) (alias u32)) (alias void))
    |-OverloadedFunctionNode type=(fun "load" ((alias ref) (alias u32)) (alias A)) annotations=Injected
      |-FunDirectiveNode
        |-FunctionNode type=(fun "load" ((alias ref) (alias u32)) (alias A)) annotations=IsOverloaded
          |-ParameterNode annotations=Local(lhs:ref#0)
            |-NameIdentifierNode="lhs" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ParameterNode annotations=Local(offset:u32#1)
            |-NameIdentifierNode="offset" type=(alias u32 (native u32))
            |-ReferenceNode type=(type (alias u32 (native u32)))
              |-QNameNode=u32
                |-NameIdentifierNode="u32"
          |-NameIdentifierNode="load"
          |-ReferenceNode type=(type (alias A (struct)))
            |-QNameNode=A
              |-NameIdentifierNode="A"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-WasmAtomNode
                  |-QNameNode=$offset
                    |-NameIdentifierNode="$offset"
                |-WasmAtomNode
                  |-ReferenceNode type=(fun "addressFromRef" ((alias ref)) (alias u32))
                    |-QNameNode=addressFromRef
                      |-NameIdentifierNode="addressFromRef"
                  |-WasmAtomNode
                    |-QNameNode=$lhs
                      |-NameIdentifierNode="$lhs"
      |-NameIdentifierNode="load" type=(fun "load" ((alias ref) (alias u32)) (alias A))
  |-ImplDirective
    |-ReferenceNode
      |-QNameNode=B
        |-NameIdentifierNode="B"
    |-OverloadedFunctionNode type=(intersection (fun "as" ((alias B)) (alias Enum)) (fun "as" ((alias B)) (alias ref))) annotations=Injected
      |-FunDirectiveNode
        |-FunctionNode type=(fun "as" ((alias B)) (alias Enum)) annotations=IsOverloaded
          |-ParameterNode annotations=Local(lhs:B#0)
            |-NameIdentifierNode="lhs" type=(alias B (struct))
            |-ReferenceNode type=(type (alias B (struct)))
              |-QNameNode=B
                |-NameIdentifierNode="B"
          |-NameIdentifierNode="as"
          |-ReferenceNode type=(type (alias Enum (union (alias A (struct)) (alias B (struct)) (alias C (struct)))))
            |-QNameNode=Enum
              |-NameIdentifierNode="Enum"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-QNameNode=$lhs
                |-NameIdentifierNode="$lhs"
      |-FunDirectiveNode
        |-DecoratorNode
          |-NameIdentifierNode="explicit"
        |-FunctionNode type=(fun "as" ((alias B)) (alias ref)) annotations=IsOverloaded
          |-ParameterNode annotations=Local(lhs:B#0)
            |-NameIdentifierNode="lhs" type=(alias B (struct))
            |-ReferenceNode type=(type (alias B (struct)))
              |-QNameNode=B
                |-NameIdentifierNode="B"
          |-NameIdentifierNode="as" annotations=Explicit
          |-ReferenceNode type=(type (alias ref (ref ?)))
            |-QNameNode=ref
              |-NameIdentifierNode="ref"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-QNameNode=$lhs
                |-NameIdentifierNode="$lhs"
      |-NameIdentifierNode="as" type=(intersection (fun "as" ((alias B)) (alias Enum)) (fun "as" ((alias B)) (alias ref)))
    |-OverloadedFunctionNode type=(fun "B$discriminant" () (alias i64)) annotations=Injected
      |-FunDirectiveNode
        |-DecoratorNode
          |-NameIdentifierNode="inline"
        |-FunctionNode type=(fun "B$discriminant" () (alias i64)) annotations=IsOverloaded
          |-NameIdentifierNode="B$discriminant" annotations=Inline
          |-ReferenceNode type=(type (alias i64 (native i64)))
            |-QNameNode=i64
              |-NameIdentifierNode="i64"
          |-BlockNode type=(alias i64 (native i64)) annotations=IsValueNode
            |-ValDeclarationNode type=(native void) annotations=Local(test/fixtures/compiler/is.lys::discriminant_3:u32#0)
              |-NameIdentifierNode="discriminant" type=(alias u32 (native u32))
              |-ReferenceNode type=(type (alias u32 (native u32)))
                |-QNameNode=u32
                  |-NameIdentifierNode="u32"
              |-MemberNode type=(native u32) annotations=IsValueNode
                |-ReferenceNode type=(type (alias B (struct)))
                  |-QNameNode=B
                    |-NameIdentifierNode="B"
                |-NameIdentifierNode="discriminant"
            |-BinaryExpressionNode=(fun "<<" ((alias i64) (alias i32)) (alias i64)) type=(alias i64 (native i64)) annotations=IsValueNode,IsReturnExpression
              |-NameIdentifierNode="<<"
              |-AsExpressionNode=(fun "as" ((alias u32)) (alias i64)) type=(alias i64 (native i64)) annotations=IsValueNode
                |-ReferenceNode type=(alias u32 (native u32)) annotations=IsValueNode,Local(test/fixtures/compiler/is.lys::discriminant_3:u32#0)
                  |-QNameNode=discriminant
                    |-NameIdentifierNode="discriminant"
                |-ReferenceNode type=(type (alias i64 (native i64)))
                  |-QNameNode=i64
                    |-NameIdentifierNode="i64"
              |-IntegerLiteral=32 type=(alias i32 (native i32)) annotations=IsValueNode
      |-NameIdentifierNode="B$discriminant" type=(fun "B$discriminant" () (alias i64))
    |-OverloadedFunctionNode type=(fun "apply" () (alias B)) annotations=Injected
      |-FunDirectiveNode
        |-FunctionNode type=(fun "apply" () (alias B)) annotations=IsOverloaded
          |-NameIdentifierNode="apply"
          |-ReferenceNode type=(type (alias B (struct)))
            |-QNameNode=B
              |-NameIdentifierNode="B"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-ReferenceNode type=(fun "B$discriminant" () (alias i64))
                |-QNameNode=B$discriminant
                  |-NameIdentifierNode="B$discriminant"
      |-NameIdentifierNode="apply" type=(fun "apply" () (alias B))
    |-OverloadedFunctionNode type=(fun "is" ((union (alias B) (alias ref))) (alias boolean)) annotations=Injected
      |-FunDirectiveNode
        |-FunctionNode type=(fun "is" ((union (alias B) (alias ref))) (alias boolean)) annotations=IsOverloaded
          |-ParameterNode annotations=Local(a:B | ref#0)
            |-NameIdentifierNode="a" type=(union (alias B (struct)) (alias ref (ref ?)))
            |-UnionTypeNode type=(type (union (alias B (struct)) (alias ref (ref ?))))
              |-ReferenceNode type=(type (alias B (struct)))
                |-QNameNode=B
                  |-NameIdentifierNode="B"
              |-ReferenceNode type=(type (alias ref (ref ?)))
                |-QNameNode=ref
                  |-NameIdentifierNode="ref"
          |-NameIdentifierNode="is"
          |-ReferenceNode type=(type (alias boolean (native boolean)))
            |-QNameNode=boolean
              |-NameIdentifierNode="boolean"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-WasmAtomNode
                  |-HexLiteral=18446744069414584000
                |-WasmAtomNode
                  |-QNameNode=$a
                    |-NameIdentifierNode="$a"
              |-WasmAtomNode
                |-ReferenceNode type=(fun "B$discriminant" () (alias i64))
                  |-QNameNode=B$discriminant
                    |-NameIdentifierNode="B$discriminant"
      |-NameIdentifierNode="is" type=(fun "is" ((union (alias B) (alias ref))) (alias boolean))
    |-OverloadedFunctionNode type=(fun "==" ((alias B) (alias ref)) (alias boolean)) annotations=Injected
      |-FunDirectiveNode
        |-FunctionNode type=(fun "==" ((alias B) (alias ref)) (alias boolean)) annotations=IsOverloaded
          |-ParameterNode annotations=Local(a:B#0)
            |-NameIdentifierNode="a" type=(alias B (struct))
            |-ReferenceNode type=(type (alias B (struct)))
              |-QNameNode=B
                |-NameIdentifierNode="B"
          |-ParameterNode annotations=Local(b:ref#1)
            |-NameIdentifierNode="b" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-NameIdentifierNode="=="
          |-ReferenceNode type=(type (alias boolean (native boolean)))
            |-QNameNode=boolean
              |-NameIdentifierNode="boolean"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-QNameNode=$a
                  |-NameIdentifierNode="$a"
              |-WasmAtomNode
                |-QNameNode=$b
                  |-NameIdentifierNode="$b"
      |-NameIdentifierNode="==" type=(fun "==" ((alias B) (alias ref)) (alias boolean))
    |-OverloadedFunctionNode type=(fun "!=" ((alias B) (alias ref)) (alias boolean)) annotations=Injected
      |-FunDirectiveNode
        |-FunctionNode type=(fun "!=" ((alias B) (alias ref)) (alias boolean)) annotations=IsOverloaded
          |-ParameterNode annotations=Local(a:B#0)
            |-NameIdentifierNode="a" type=(alias B (struct))
            |-ReferenceNode type=(type (alias B (struct)))
              |-QNameNode=B
                |-NameIdentifierNode="B"
          |-ParameterNode annotations=Local(b:ref#1)
            |-NameIdentifierNode="b" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-NameIdentifierNode="!="
          |-ReferenceNode type=(type (alias boolean (native boolean)))
            |-QNameNode=boolean
              |-NameIdentifierNode="boolean"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-QNameNode=$a
                  |-NameIdentifierNode="$a"
              |-WasmAtomNode
                |-QNameNode=$b
                  |-NameIdentifierNode="$b"
      |-NameIdentifierNode="!=" type=(fun "!=" ((alias B) (alias ref)) (alias boolean))
    |-OverloadedFunctionNode type=(fun "store" ((alias ref) (alias B) (alias u32)) (alias void)) annotations=Injected
      |-FunDirectiveNode
        |-FunctionNode type=(fun "store" ((alias ref) (alias B) (alias u32)) (alias void)) annotations=IsOverloaded
          |-ParameterNode annotations=Local(lhs:ref#0)
            |-NameIdentifierNode="lhs" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ParameterNode annotations=Local(rhs:B#1)
            |-NameIdentifierNode="rhs" type=(alias B (struct))
            |-ReferenceNode type=(type (alias B (struct)))
              |-QNameNode=B
                |-NameIdentifierNode="B"
          |-ParameterNode annotations=Local(offset:u32#2)
            |-NameIdentifierNode="offset" type=(alias u32 (native u32))
            |-ReferenceNode type=(type (alias u32 (native u32)))
              |-QNameNode=u32
                |-NameIdentifierNode="u32"
          |-NameIdentifierNode="store"
          |-ReferenceNode type=(type (alias void (native void)))
            |-QNameNode=void
              |-NameIdentifierNode="void"
          |-WasmExpressionNode type=(never)
            |-WasmAtomNode
              |-WasmAtomNode
                |-WasmAtomNode
                  |-QNameNode=$offset
                    |-NameIdentifierNode="$offset"
                |-WasmAtomNode
                  |-ReferenceNode type=(fun "addressFromRef" ((alias ref)) (alias u32))
                    |-QNameNode=addressFromRef
                      |-NameIdentifierNode="addressFromRef"
                  |-WasmAtomNode
                    |-QNameNode=$lhs
                      |-NameIdentifierNode="$lhs"
              |-WasmAtomNode
                |-QNameNode=$rhs
                  |-NameIdentifierNode="$rhs"
      |-NameIdentifierNode="store" type=(fun "store" ((alias ref) (alias B) (alias u32)) (alias void))
    |-OverloadedFunctionNode type=(fun "load" ((alias ref) (alias u32)) (alias B)) annotations=Injected
      |-FunDirectiveNode
        |-FunctionNode type=(fun "load" ((alias ref) (alias u32)) (alias B)) annotations=IsOverloaded
          |-ParameterNode annotations=Local(lhs:ref#0)
            |-NameIdentifierNode="lhs" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ParameterNode annotations=Local(offset:u32#1)
            |-NameIdentifierNode="offset" type=(alias u32 (native u32))
            |-ReferenceNode type=(type (alias u32 (native u32)))
              |-QNameNode=u32
                |-NameIdentifierNode="u32"
          |-NameIdentifierNode="load"
          |-ReferenceNode type=(type (alias B (struct)))
            |-QNameNode=B
              |-NameIdentifierNode="B"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-WasmAtomNode
                  |-QNameNode=$offset
                    |-NameIdentifierNode="$offset"
                |-WasmAtomNode
                  |-ReferenceNode type=(fun "addressFromRef" ((alias ref)) (alias u32))
                    |-QNameNode=addressFromRef
                      |-NameIdentifierNode="addressFromRef"
                  |-WasmAtomNode
                    |-QNameNode=$lhs
                      |-NameIdentifierNode="$lhs"
      |-NameIdentifierNode="load" type=(fun "load" ((alias ref) (alias u32)) (alias B))
  |-ImplDirective
    |-ReferenceNode
      |-QNameNode=C
        |-NameIdentifierNode="C"
    |-OverloadedFunctionNode type=(intersection (fun "as" ((alias C)) (alias Enum)) (fun "as" ((alias C)) (alias ref))) annotations=Injected
      |-FunDirectiveNode
        |-FunctionNode type=(fun "as" ((alias C)) (alias Enum)) annotations=IsOverloaded
          |-ParameterNode annotations=Local(lhs:C#0)
            |-NameIdentifierNode="lhs" type=(alias C (struct))
            |-ReferenceNode type=(type (alias C (struct)))
              |-QNameNode=C
                |-NameIdentifierNode="C"
          |-NameIdentifierNode="as"
          |-ReferenceNode type=(type (alias Enum (union (alias A (struct)) (alias B (struct)) (alias C (struct)))))
            |-QNameNode=Enum
              |-NameIdentifierNode="Enum"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-QNameNode=$lhs
                |-NameIdentifierNode="$lhs"
      |-FunDirectiveNode
        |-DecoratorNode
          |-NameIdentifierNode="explicit"
        |-FunctionNode type=(fun "as" ((alias C)) (alias ref)) annotations=IsOverloaded
          |-ParameterNode annotations=Local(lhs:C#0)
            |-NameIdentifierNode="lhs" type=(alias C (struct))
            |-ReferenceNode type=(type (alias C (struct)))
              |-QNameNode=C
                |-NameIdentifierNode="C"
          |-NameIdentifierNode="as" annotations=Explicit
          |-ReferenceNode type=(type (alias ref (ref ?)))
            |-QNameNode=ref
              |-NameIdentifierNode="ref"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-QNameNode=$lhs
                |-NameIdentifierNode="$lhs"
      |-NameIdentifierNode="as" type=(intersection (fun "as" ((alias C)) (alias Enum)) (fun "as" ((alias C)) (alias ref)))
    |-OverloadedFunctionNode type=(fun "C$discriminant" () (alias i64)) annotations=Injected
      |-FunDirectiveNode
        |-DecoratorNode
          |-NameIdentifierNode="inline"
        |-FunctionNode type=(fun "C$discriminant" () (alias i64)) annotations=IsOverloaded
          |-NameIdentifierNode="C$discriminant" annotations=Inline
          |-ReferenceNode type=(type (alias i64 (native i64)))
            |-QNameNode=i64
              |-NameIdentifierNode="i64"
          |-BlockNode type=(alias i64 (native i64)) annotations=IsValueNode
            |-ValDeclarationNode type=(native void) annotations=Local(test/fixtures/compiler/is.lys::discriminant_6:u32#0)
              |-NameIdentifierNode="discriminant" type=(alias u32 (native u32))
              |-ReferenceNode type=(type (alias u32 (native u32)))
                |-QNameNode=u32
                  |-NameIdentifierNode="u32"
              |-MemberNode type=(native u32) annotations=IsValueNode
                |-ReferenceNode type=(type (alias C (struct)))
                  |-QNameNode=C
                    |-NameIdentifierNode="C"
                |-NameIdentifierNode="discriminant"
            |-BinaryExpressionNode=(fun "<<" ((alias i64) (alias i32)) (alias i64)) type=(alias i64 (native i64)) annotations=IsValueNode,IsReturnExpression
              |-NameIdentifierNode="<<"
              |-AsExpressionNode=(fun "as" ((alias u32)) (alias i64)) type=(alias i64 (native i64)) annotations=IsValueNode
                |-ReferenceNode type=(alias u32 (native u32)) annotations=IsValueNode,Local(test/fixtures/compiler/is.lys::discriminant_6:u32#0)
                  |-QNameNode=discriminant
                    |-NameIdentifierNode="discriminant"
                |-ReferenceNode type=(type (alias i64 (native i64)))
                  |-QNameNode=i64
                    |-NameIdentifierNode="i64"
              |-IntegerLiteral=32 type=(alias i32 (native i32)) annotations=IsValueNode
      |-NameIdentifierNode="C$discriminant" type=(fun "C$discriminant" () (alias i64))
    |-OverloadedFunctionNode type=(fun "apply" () (alias C)) annotations=Injected
      |-FunDirectiveNode
        |-FunctionNode type=(fun "apply" () (alias C)) annotations=IsOverloaded
          |-NameIdentifierNode="apply"
          |-ReferenceNode type=(type (alias C (struct)))
            |-QNameNode=C
              |-NameIdentifierNode="C"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-ReferenceNode type=(fun "C$discriminant" () (alias i64))
                |-QNameNode=C$discriminant
                  |-NameIdentifierNode="C$discriminant"
      |-NameIdentifierNode="apply" type=(fun "apply" () (alias C))
    |-OverloadedFunctionNode type=(fun "is" ((union (alias C) (alias ref))) (alias boolean)) annotations=Injected
      |-FunDirectiveNode
        |-FunctionNode type=(fun "is" ((union (alias C) (alias ref))) (alias boolean)) annotations=IsOverloaded
          |-ParameterNode annotations=Local(a:C | ref#0)
            |-NameIdentifierNode="a" type=(union (alias C (struct)) (alias ref (ref ?)))
            |-UnionTypeNode type=(type (union (alias C (struct)) (alias ref (ref ?))))
              |-ReferenceNode type=(type (alias C (struct)))
                |-QNameNode=C
                  |-NameIdentifierNode="C"
              |-ReferenceNode type=(type (alias ref (ref ?)))
                |-QNameNode=ref
                  |-NameIdentifierNode="ref"
          |-NameIdentifierNode="is"
          |-ReferenceNode type=(type (alias boolean (native boolean)))
            |-QNameNode=boolean
              |-NameIdentifierNode="boolean"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-WasmAtomNode
                  |-HexLiteral=18446744069414584000
                |-WasmAtomNode
                  |-QNameNode=$a
                    |-NameIdentifierNode="$a"
              |-WasmAtomNode
                |-ReferenceNode type=(fun "C$discriminant" () (alias i64))
                  |-QNameNode=C$discriminant
                    |-NameIdentifierNode="C$discriminant"
      |-NameIdentifierNode="is" type=(fun "is" ((union (alias C) (alias ref))) (alias boolean))
    |-OverloadedFunctionNode type=(fun "==" ((alias C) (alias ref)) (alias boolean)) annotations=Injected
      |-FunDirectiveNode
        |-FunctionNode type=(fun "==" ((alias C) (alias ref)) (alias boolean)) annotations=IsOverloaded
          |-ParameterNode annotations=Local(a:C#0)
            |-NameIdentifierNode="a" type=(alias C (struct))
            |-ReferenceNode type=(type (alias C (struct)))
              |-QNameNode=C
                |-NameIdentifierNode="C"
          |-ParameterNode annotations=Local(b:ref#1)
            |-NameIdentifierNode="b" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-NameIdentifierNode="=="
          |-ReferenceNode type=(type (alias boolean (native boolean)))
            |-QNameNode=boolean
              |-NameIdentifierNode="boolean"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-QNameNode=$a
                  |-NameIdentifierNode="$a"
              |-WasmAtomNode
                |-QNameNode=$b
                  |-NameIdentifierNode="$b"
      |-NameIdentifierNode="==" type=(fun "==" ((alias C) (alias ref)) (alias boolean))
    |-OverloadedFunctionNode type=(fun "!=" ((alias C) (alias ref)) (alias boolean)) annotations=Injected
      |-FunDirectiveNode
        |-FunctionNode type=(fun "!=" ((alias C) (alias ref)) (alias boolean)) annotations=IsOverloaded
          |-ParameterNode annotations=Local(a:C#0)
            |-NameIdentifierNode="a" type=(alias C (struct))
            |-ReferenceNode type=(type (alias C (struct)))
              |-QNameNode=C
                |-NameIdentifierNode="C"
          |-ParameterNode annotations=Local(b:ref#1)
            |-NameIdentifierNode="b" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-NameIdentifierNode="!="
          |-ReferenceNode type=(type (alias boolean (native boolean)))
            |-QNameNode=boolean
              |-NameIdentifierNode="boolean"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-QNameNode=$a
                  |-NameIdentifierNode="$a"
              |-WasmAtomNode
                |-QNameNode=$b
                  |-NameIdentifierNode="$b"
      |-NameIdentifierNode="!=" type=(fun "!=" ((alias C) (alias ref)) (alias boolean))
    |-OverloadedFunctionNode type=(fun "store" ((alias ref) (alias C) (alias u32)) (alias void)) annotations=Injected
      |-FunDirectiveNode
        |-FunctionNode type=(fun "store" ((alias ref) (alias C) (alias u32)) (alias void)) annotations=IsOverloaded
          |-ParameterNode annotations=Local(lhs:ref#0)
            |-NameIdentifierNode="lhs" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ParameterNode annotations=Local(rhs:C#1)
            |-NameIdentifierNode="rhs" type=(alias C (struct))
            |-ReferenceNode type=(type (alias C (struct)))
              |-QNameNode=C
                |-NameIdentifierNode="C"
          |-ParameterNode annotations=Local(offset:u32#2)
            |-NameIdentifierNode="offset" type=(alias u32 (native u32))
            |-ReferenceNode type=(type (alias u32 (native u32)))
              |-QNameNode=u32
                |-NameIdentifierNode="u32"
          |-NameIdentifierNode="store"
          |-ReferenceNode type=(type (alias void (native void)))
            |-QNameNode=void
              |-NameIdentifierNode="void"
          |-WasmExpressionNode type=(never)
            |-WasmAtomNode
              |-WasmAtomNode
                |-WasmAtomNode
                  |-QNameNode=$offset
                    |-NameIdentifierNode="$offset"
                |-WasmAtomNode
                  |-ReferenceNode type=(fun "addressFromRef" ((alias ref)) (alias u32))
                    |-QNameNode=addressFromRef
                      |-NameIdentifierNode="addressFromRef"
                  |-WasmAtomNode
                    |-QNameNode=$lhs
                      |-NameIdentifierNode="$lhs"
              |-WasmAtomNode
                |-QNameNode=$rhs
                  |-NameIdentifierNode="$rhs"
      |-NameIdentifierNode="store" type=(fun "store" ((alias ref) (alias C) (alias u32)) (alias void))
    |-OverloadedFunctionNode type=(fun "load" ((alias ref) (alias u32)) (alias C)) annotations=Injected
      |-FunDirectiveNode
        |-FunctionNode type=(fun "load" ((alias ref) (alias u32)) (alias C)) annotations=IsOverloaded
          |-ParameterNode annotations=Local(lhs:ref#0)
            |-NameIdentifierNode="lhs" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ParameterNode annotations=Local(offset:u32#1)
            |-NameIdentifierNode="offset" type=(alias u32 (native u32))
            |-ReferenceNode type=(type (alias u32 (native u32)))
              |-QNameNode=u32
                |-NameIdentifierNode="u32"
          |-NameIdentifierNode="load"
          |-ReferenceNode type=(type (alias C (struct)))
            |-QNameNode=C
              |-NameIdentifierNode="C"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-WasmAtomNode
                  |-QNameNode=$offset
                    |-NameIdentifierNode="$offset"
                |-WasmAtomNode
                  |-ReferenceNode type=(fun "addressFromRef" ((alias ref)) (alias u32))
                    |-QNameNode=addressFromRef
                      |-NameIdentifierNode="addressFromRef"
                  |-WasmAtomNode
                    |-QNameNode=$lhs
                      |-NameIdentifierNode="$lhs"
      |-NameIdentifierNode="load" type=(fun "load" ((alias ref) (alias u32)) (alias C))
  |-TypeDirectiveNode annotations=Injected
    |-NameIdentifierNode="A" type=(type (alias A (struct)))
    |-StructTypeNode type=(type (alias A (struct)))
  |-TypeDirectiveNode annotations=Injected
    |-NameIdentifierNode="B" type=(type (alias B (struct)))
    |-StructTypeNode type=(type (alias B (struct)))
  |-TypeDirectiveNode annotations=Injected
    |-NameIdentifierNode="C" type=(type (alias C (struct)))
    |-StructTypeNode type=(type (alias C (struct)))
  |-VarDirectiveNode
    |-VarDeclarationNode annotations=Global(test/fixtures/compiler/is.lys::value1:<no-type>)
      |-NameIdentifierNode="value1" type=(alias Enum (union (alias A (struct)) (alias B (struct)) (alias C (struct))))
      |-ReferenceNode type=(type (alias Enum (union (alias A (struct)) (alias B (struct)) (alias C (struct)))))
        |-QNameNode=Enum
          |-NameIdentifierNode="Enum"
      |-ReferenceNode type=(alias A (struct)) annotations=IsValueNode,ImplicitCall(fun "apply" () (alias A))
        |-QNameNode=A
          |-NameIdentifierNode="A"
  |-VarDirectiveNode
    |-VarDeclarationNode annotations=Global(test/fixtures/compiler/is.lys::value2:<no-type>)
      |-NameIdentifierNode="value2" type=(union (alias A (struct)) (alias B (struct)))
      |-UnionTypeNode type=(type (union (alias A (struct)) (alias B (struct))))
        |-ReferenceNode type=(type (alias A (struct)))
          |-QNameNode=A
            |-NameIdentifierNode="A"
        |-ReferenceNode type=(type (alias B (struct)))
          |-QNameNode=B
            |-NameIdentifierNode="B"
      |-ReferenceNode type=(alias A (struct)) annotations=IsValueNode,ImplicitCall(fun "apply" () (alias A))
        |-QNameNode=A
          |-NameIdentifierNode="A"
  |-VarDirectiveNode
    |-VarDeclarationNode annotations=Global(test/fixtures/compiler/is.lys::value3:<no-type>)
      |-NameIdentifierNode="value3" type=(alias A (struct))
      |-ReferenceNode type=(type (alias A (struct)))
        |-QNameNode=A
          |-NameIdentifierNode="A"
      |-ReferenceNode type=(alias A (struct)) annotations=IsValueNode,ImplicitCall(fun "apply" () (alias A))
        |-QNameNode=A
          |-NameIdentifierNode="A"
  |-OverloadedFunctionNode type=(fun "identity" ((alias ref)) (alias ref)) annotations=Injected
    |-FunDirectiveNode
      |-DecoratorNode
        |-NameIdentifierNode="export"
      |-FunctionNode type=(fun "identity" ((alias ref)) (alias ref)) annotations=IsOverloaded
        |-ParameterNode annotations=Local(a:ref#0)
          |-NameIdentifierNode="a" type=(alias ref (ref ?))
          |-ReferenceNode type=(type (alias ref (ref ?)))
            |-QNameNode=ref
              |-NameIdentifierNode="ref"
        |-NameIdentifierNode="identity" annotations=Export
        |-ReferenceNode type=(type (alias ref (ref ?)))
          |-QNameNode=ref
            |-NameIdentifierNode="ref"
        |-ReferenceNode type=(alias ref (ref ?)) annotations=IsValueNode,IsReturnExpression,Local(a:ref#0)
          |-QNameNode=a
            |-NameIdentifierNode="a"
    |-NameIdentifierNode="identity" type=(fun "identity" ((alias ref)) (alias ref))
  |-OverloadedFunctionNode type=(fun "test" () (alias void)) annotations=Injected
    |-FunDirectiveNode
      |-DecoratorNode
        |-NameIdentifierNode="export"
      |-FunctionNode type=(fun "test" () (alias void)) annotations=IsOverloaded
        |-NameIdentifierNode="test" annotations=Export
        |-ReferenceNode type=(type (alias void (native void)))
          |-QNameNode=void
            |-NameIdentifierNode="void"
        |-BlockNode type=(native void)
          |-VarDeclarationNode type=(native void) annotations=Local(test/fixtures/compiler/is.lys::x1:boolean#0)
            |-NameIdentifierNode="x1" type=(alias boolean (native boolean))
            |-IsExpressionNode=(fun "is" ((union (alias A) (alias ref))) (alias boolean)) type=(alias boolean (native boolean)) annotations=IsValueNode
              |-ReferenceNode type=(alias Enum (union (alias A (struct)) (alias B (struct)) (alias C (struct)))) annotations=IsValueNode,Global(test/fixtures/compiler/is.lys::value1:<no-type>)
                |-QNameNode=value1
                  |-NameIdentifierNode="value1"
              |-ReferenceNode type=(type (alias A (struct)))
                |-QNameNode=A
                  |-NameIdentifierNode="A"
          |-VarDeclarationNode type=(native void) annotations=Local(test/fixtures/compiler/is.lys::y1:boolean#1)
            |-NameIdentifierNode="y1" type=(alias boolean (native boolean))
            |-IsExpressionNode=(fun "is" ((union (alias Enum) (alias ref))) (alias boolean)) type=(alias boolean (native boolean)) annotations=IsValueNode
              |-ReferenceNode type=(alias Enum (union (alias A (struct)) (alias B (struct)) (alias C (struct)))) annotations=IsValueNode,Global(test/fixtures/compiler/is.lys::value1:<no-type>)
                |-QNameNode=value1
                  |-NameIdentifierNode="value1"
              |-ReferenceNode type=(type (alias Enum (union (alias A (struct)) (alias B (struct)) (alias C (struct)))))
                |-QNameNode=Enum
                  |-NameIdentifierNode="Enum"
          |-VarDeclarationNode type=(native void) annotations=Local(test/fixtures/compiler/is.lys::z1:boolean#2)
            |-NameIdentifierNode="z1" type=(alias boolean (native boolean))
            |-IsExpressionNode=(fun "is" ((union (alias B) (alias ref))) (alias boolean)) type=(alias boolean (native boolean)) annotations=IsValueNode
              |-ReferenceNode type=(alias Enum (union (alias A (struct)) (alias B (struct)) (alias C (struct)))) annotations=IsValueNode,Global(test/fixtures/compiler/is.lys::value1:<no-type>)
                |-QNameNode=value1
                  |-NameIdentifierNode="value1"
              |-ReferenceNode type=(type (alias B (struct)))
                |-QNameNode=B
                  |-NameIdentifierNode="B"
          |-VarDeclarationNode type=(native void) annotations=Local(test/fixtures/compiler/is.lys::x2:boolean#3)
            |-NameIdentifierNode="x2" type=(alias boolean (native boolean))
            |-IsExpressionNode=(fun "is" ((union (alias A) (alias ref))) (alias boolean)) type=(alias boolean (native boolean)) annotations=IsValueNode
              |-ReferenceNode type=(union (alias A (struct)) (alias B (struct))) annotations=IsValueNode,Global(test/fixtures/compiler/is.lys::value2:<no-type>)
                |-QNameNode=value2
                  |-NameIdentifierNode="value2"
              |-ReferenceNode type=(type (alias A (struct)))
                |-QNameNode=A
                  |-NameIdentifierNode="A"
          |-VarDeclarationNode type=(native void) annotations=Local(test/fixtures/compiler/is.lys::y2:boolean#4)
            |-NameIdentifierNode="y2" type=(alias boolean (native boolean))
            |-IsExpressionNode=(fun "is" ((union (alias Enum) (alias ref))) (alias boolean)) type=(alias boolean (native boolean)) annotations=IsValueNode
              |-ReferenceNode type=(union (alias A (struct)) (alias B (struct))) annotations=IsValueNode,Global(test/fixtures/compiler/is.lys::value2:<no-type>)
                |-QNameNode=value2
                  |-NameIdentifierNode="value2"
              |-ReferenceNode type=(type (alias Enum (union (alias A (struct)) (alias B (struct)) (alias C (struct)))))
                |-QNameNode=Enum
                  |-NameIdentifierNode="Enum"
          |-VarDeclarationNode type=(native void) annotations=Local(test/fixtures/compiler/is.lys::z2:boolean#5)
            |-NameIdentifierNode="z2" type=(alias boolean (native boolean))
            |-IsExpressionNode=(fun "is" ((union (alias B) (alias ref))) (alias boolean)) type=(alias boolean (native boolean)) annotations=IsValueNode
              |-ReferenceNode type=(union (alias A (struct)) (alias B (struct))) annotations=IsValueNode,Global(test/fixtures/compiler/is.lys::value2:<no-type>)
                |-QNameNode=value2
                  |-NameIdentifierNode="value2"
              |-ReferenceNode type=(type (alias B (struct)))
                |-QNameNode=B
                  |-NameIdentifierNode="B"
          |-VarDeclarationNode type=(native void) annotations=Local(test/fixtures/compiler/is.lys::x3:boolean#6)
            |-NameIdentifierNode="x3" type=(alias boolean (native boolean))
            |-IsExpressionNode=(fun "is" ((union (alias A) (alias ref))) (alias boolean)) type=(alias boolean (native boolean)) annotations=IsValueNode
              |-ReferenceNode type=(alias A (struct)) annotations=IsValueNode,Global(test/fixtures/compiler/is.lys::value3:<no-type>)
                |-QNameNode=value3
                  |-NameIdentifierNode="value3"
              |-ReferenceNode type=(type (alias A (struct)))
                |-QNameNode=A
                  |-NameIdentifierNode="A"
          |-VarDeclarationNode type=(native void) annotations=Local(test/fixtures/compiler/is.lys::y3:boolean#7)
            |-NameIdentifierNode="y3" type=(alias boolean (native boolean))
            |-IsExpressionNode=(fun "is" ((union (alias Enum) (alias ref))) (alias boolean)) type=(alias boolean (native boolean)) annotations=IsValueNode
              |-ReferenceNode type=(alias A (struct)) annotations=IsValueNode,Global(test/fixtures/compiler/is.lys::value3:<no-type>)
                |-QNameNode=value3
                  |-NameIdentifierNode="value3"
              |-ReferenceNode type=(type (alias Enum (union (alias A (struct)) (alias B (struct)) (alias C (struct)))))
                |-QNameNode=Enum
                  |-NameIdentifierNode="Enum"
          |-VarDeclarationNode type=(native void) annotations=Local(test/fixtures/compiler/is.lys::z3:boolean#8)
            |-NameIdentifierNode="z3" type=(alias boolean (native boolean))
            |-IsExpressionNode=(fun "is" ((union (alias B) (alias ref))) (alias boolean)) type=(alias boolean (native boolean)) annotations=IsValueNode
              |-FunctionCallNode=(fun "identity" ((alias ref)) (alias ref)) type=(alias ref (ref ?)) annotations=IsValueNode
                |-ReferenceNode type=(fun "identity" ((alias ref)) (alias ref))
                  |-QNameNode=identity
                    |-NameIdentifierNode="identity"
                |-ReferenceNode type=(alias A (struct)) annotations=IsValueNode,Global(test/fixtures/compiler/is.lys::value3:<no-type>)
                  |-QNameNode=value3
                    |-NameIdentifierNode="value3"
              |-ReferenceNode type=(type (alias B (struct)))
                |-QNameNode=B
                  |-NameIdentifierNode="B"
    |-NameIdentifierNode="test" type=(fun "test" () (alias void))