import support::test

import support::env

type Color = (None | Red | Custom)

impl Reference for Color {
  #[inline]
  fun is(self: (Color | ref)): boolean = {
    self is None || self is Red || self is Custom
  }

  #[explicit]
  #[inline]
  fun as(self: Color): ref = %wasm {
    (local.get $self)
  }
}

impl Color {
  fun ==(lhs: ref, rhs: ref): boolean = lhs == rhs

  fun !=(lhs: ref, rhs: ref): boolean = lhs != rhs

  fun store(lhs: ref, rhs: Color, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Color = %wasm {
    (i64.load (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))))
  }
}

impl None {
  fun as(lhs: None): Color = %wasm {
    (local.get $lhs)
  }
}

impl Red {
  fun as(lhs: Red): Color = %wasm {
    (local.get $lhs)
  }
}

impl Custom {
  fun as(lhs: Custom): Color = %wasm {
    (local.get $lhs)
  }
}

type None = %struct {  }

type Red = %struct {  }

type Custom = %struct { hex: u32 }

impl Reference for None {
  #[inline]
  fun is(a: (Self | ref)): boolean = {
    val discriminant: u32 = Self.^discriminant
    ref.getDiscriminant(a) == discriminant
  }

  #[explicit]
  #[inline]
  fun as(lhs: Self): ref = %wasm {
    (local.get $lhs)
  }
}

impl None {
  #[inline]
  private fun None$discriminant(): i64 = {
    val discriminant: u32 = None.^discriminant
    discriminant as i64 << 32
  }

  #[inline]
  fun apply(): None = %wasm {
    (call None$discriminant)
  }

  fun ==(a: None, b: ref): boolean = %wasm {
    (i64.eq (local.get $a) (local.get $b))
  }

  fun !=(a: None, b: ref): boolean = %wasm {
    (i64.ne (local.get $a) (local.get $b))
  }

  fun store(lhs: ref, rhs: None, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): None = %wasm {
    (i64.load (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))))
  }
}

impl Reference for Red {
  #[inline]
  fun is(a: (Self | ref)): boolean = {
    val discriminant: u32 = Self.^discriminant
    ref.getDiscriminant(a) == discriminant
  }

  #[explicit]
  #[inline]
  fun as(lhs: Self): ref = %wasm {
    (local.get $lhs)
  }
}

impl Red {
  #[inline]
  private fun Red$discriminant(): i64 = {
    val discriminant: u32 = Red.^discriminant
    discriminant as i64 << 32
  }

  #[inline]
  fun apply(): Red = %wasm {
    (call Red$discriminant)
  }

  fun ==(a: Red, b: ref): boolean = %wasm {
    (i64.eq (local.get $a) (local.get $b))
  }

  fun !=(a: Red, b: ref): boolean = %wasm {
    (i64.ne (local.get $a) (local.get $b))
  }

  fun store(lhs: ref, rhs: Red, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Red = %wasm {
    (i64.load (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))))
  }
}

impl Reference for Custom {
  #[inline]
  fun is(a: (Self | ref)): boolean = {
    val discriminant: u32 = Self.^discriminant
    ref.getDiscriminant(a) == discriminant
  }

  #[explicit]
  #[inline]
  fun as(lhs: Self): ref = %wasm {
    (local.get $lhs)
  }
}

impl Custom {
  #[inline]
  private fun Custom$discriminant(): u64 = {
    val discriminant: u32 = Custom.^discriminant
    discriminant as u64 << 32
  }

  #[inline]
  fun apply(hex: u32): Custom = {
    var $ref = fromPointer(system::core::memory::calloc(1 as u32, Custom.^allocationSize))
    property$0($ref, hex)
    $ref
  }

  fun as(self: Custom): UnsafeCPointer = %wasm {
    (call addressFromRef (get_local $self))
  }

  private fun fromPointer(ptr: u32): Custom = %wasm {
    (i64.or (call Custom$discriminant) (i64.extend_u/i32 (local.get $ptr)))
  }

  fun ==(a: Custom, b: Custom): boolean = %wasm {
    (i64.eq (local.get $a) (local.get $b))
  }

  fun !=(a: Custom, b: Custom): boolean = %wasm {
    (i64.ne (local.get $a) (local.get $b))
  }

  #[getter]
  fun hex(self: Custom): u32 = property$0(self)
  #[setter]
  fun hex(self: Custom, value: u32): void = property$0(self, value)

  #[inline]
  private fun property$0(self: Custom): u32 = u32.load(self, Custom.^property$0_offset)
  #[inline]
  private fun property$0(self: Custom, value: u32): void = u32.store(self, value, Custom.^property$0_offset)

  fun store(lhs: ref, rhs: Custom, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Custom = %wasm {
    (i64.load (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))))
  }
}

type CatBag = %struct { f: Color, g: (Red | None) }

impl Reference for CatBag {
  #[inline]
  fun is(a: (Self | ref)): boolean = {
    val discriminant: u32 = Self.^discriminant
    ref.getDiscriminant(a) == discriminant
  }

  #[explicit]
  #[inline]
  fun as(lhs: Self): ref = %wasm {
    (local.get $lhs)
  }
}

impl CatBag {
  #[inline]
  private fun CatBag$discriminant(): u64 = {
    val discriminant: u32 = CatBag.^discriminant
    discriminant as u64 << 32
  }

  #[inline]
  fun apply(f: Color, g: ((Red | None))): CatBag = {
    var $ref = fromPointer(system::core::memory::calloc(1 as u32, CatBag.^allocationSize))
    property$0($ref, f)
    property$1($ref, g)
    $ref
  }

  fun as(self: CatBag): UnsafeCPointer = %wasm {
    (call addressFromRef (get_local $self))
  }

  private fun fromPointer(ptr: u32): CatBag = %wasm {
    (i64.or (call CatBag$discriminant) (i64.extend_u/i32 (local.get $ptr)))
  }

  fun ==(a: CatBag, b: CatBag): boolean = %wasm {
    (i64.eq (local.get $a) (local.get $b))
  }

  fun !=(a: CatBag, b: CatBag): boolean = %wasm {
    (i64.ne (local.get $a) (local.get $b))
  }

  #[getter]
  fun f(self: CatBag): Color = property$0(self)
  #[setter]
  fun f(self: CatBag, value: Color): void = property$0(self, value)

  #[inline]
  private fun property$0(self: CatBag): Color = Color.load(self, CatBag.^property$0_offset)
  #[inline]
  private fun property$0(self: CatBag, value: Color): void = Color.store(self, value, CatBag.^property$0_offset)

  #[getter]
  fun g(self: CatBag): ((Red | None)) = property$1(self)
  #[setter]
  fun g(self: CatBag, value: ((Red | None))): void = property$1(self, value)

  #[inline]
  private fun property$1(self: CatBag): ((Red | None)) = loadPropertyWithOffset$1(self, CatBag.^property$1_offset)
  #[inline]
  private fun property$1(self: CatBag, value: ((Red | None))): void = storePropertyWithOffset$1(self, value, CatBag.^property$1_offset)

  #[inline]
  private fun loadPropertyWithOffset$1(self: CatBag, offset: u32): ((Red | None)) = %wasm {
    (i64.load (i32.add (local.get $offset) (call addressFromRef (local.get $self))))
  }

  #[inline]
  private fun storePropertyWithOffset$1(self: CatBag, value: ((Red | None)), offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call addressFromRef (local.get $self))) (local.get $value))
  }

  fun store(lhs: ref, rhs: CatBag, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): CatBag = %wasm {
    (i64.load (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))))
  }
}

type Custom2 = %struct { r: i32, g: i32 }

impl Reference for Custom2 {
  #[inline]
  fun is(a: (Self | ref)): boolean = {
    val discriminant: u32 = Self.^discriminant
    ref.getDiscriminant(a) == discriminant
  }

  #[explicit]
  #[inline]
  fun as(lhs: Self): ref = %wasm {
    (local.get $lhs)
  }
}

impl Custom2 {
  #[inline]
  private fun Custom2$discriminant(): u64 = {
    val discriminant: u32 = Custom2.^discriminant
    discriminant as u64 << 32
  }

  #[inline]
  fun apply(r: i32, g: i32): Custom2 = {
    var $ref = fromPointer(system::core::memory::calloc(1 as u32, Custom2.^allocationSize))
    property$0($ref, r)
    property$1($ref, g)
    $ref
  }

  fun as(self: Custom2): UnsafeCPointer = %wasm {
    (call addressFromRef (get_local $self))
  }

  private fun fromPointer(ptr: u32): Custom2 = %wasm {
    (i64.or (call Custom2$discriminant) (i64.extend_u/i32 (local.get $ptr)))
  }

  fun ==(a: Custom2, b: Custom2): boolean = %wasm {
    (i64.eq (local.get $a) (local.get $b))
  }

  fun !=(a: Custom2, b: Custom2): boolean = %wasm {
    (i64.ne (local.get $a) (local.get $b))
  }

  #[getter]
  fun r(self: Custom2): i32 = property$0(self)
  #[setter]
  fun r(self: Custom2, value: i32): void = property$0(self, value)

  #[inline]
  private fun property$0(self: Custom2): i32 = i32.load(self, Custom2.^property$0_offset)
  #[inline]
  private fun property$0(self: Custom2, value: i32): void = i32.store(self, value, Custom2.^property$0_offset)

  #[getter]
  fun g(self: Custom2): i32 = property$1(self)
  #[setter]
  fun g(self: Custom2, value: i32): void = property$1(self, value)

  #[inline]
  private fun property$1(self: Custom2): i32 = i32.load(self, Custom2.^property$1_offset)
  #[inline]
  private fun property$1(self: Custom2, value: i32): void = i32.store(self, value, Custom2.^property$1_offset)

  fun store(lhs: ref, rhs: Custom2, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Custom2 = %wasm {
    (i64.load (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))))
  }
}

val x = Custom2(0, 0)

val y = Custom2(0, 0)

private fun testLoad(): void = {
  START("testLoad")
  support::test::mustEqual(i32.load(x), 0, "i32.load(x) == 0")
  support::test::mustEqual(i32.load(y), 0, "i32.load(y) == 0")
  END()
}

private fun testStore(): void = {
  START("testStore")
  i32.store(x, 3)
  i32.store(y, 2882400001)
  i32.store(y, 5, 5 as u32)
  END()
}

private fun testNumbers(): void = {
  START("testNumbers")
  support::test::mustEqual(0xFFFFFFFF as i32, -1, "0xFFFFFFFF == -1")
  support::test::mustEqual(0xFFFFFFFF as u32, -1 as u32, "0xFFFFFFFF as u32 == -1 as u32")
  testLoad()
  testStore()
  support::env::printf("i32.load(x) %X", i32.load(x))
  support::env::printf("i32.load(y) %X", i32.load(y))
  support::test::mustEqual(0xABCDEF01 as i64, 0xABCDEF01 as i64, "0xABCDEF01 as i64 == 0xABCDEF01 as i64")
  support::test::mustEqual(i32.load(x), 3, "i32.load(x) == 3")
  support::test::mustEqual(i32.load(y) as u32, 0xABCDEF01, "i32.load(y) as u32 == 0xABCDEF01")
  support::test::mustEqual(i32.load(y), 0xABCDEF01 as i32, "i32.load(y) == 0xABCDEF01 as i32")
  {
    val VAR = i32.load(y) as i32 as i64
    val VAR2 = 0xABCDEF01 as i32 as i64
    support::test::mustEqual(VAR, VAR2, "VAR == VAR2")
  }
  support::test::mustEqual(i32.load(y) as i64, 0xABCDEF01 as i32 as i64, "i32.load(y) as i64 == 0xABCDEF01 as i64")
  support::test::mustEqual(i32.load(y) as u64, 0xABCDEF01 as i32 as u64, "i32.load(y) as u64 == 0xABCDEF01 as u64")
  support::test::mustEqual(u8.load(y) as i32, 0x01 as i32, "u8.load(y) as i32 == 0x01")
  support::test::mustEqual(u8.load(y, 5 as u32) as i32, 5, "u8.load(y, 5 as u32) as i32 == 5")
  END()
}

#[export]
fun main(): void = {
  START("set values in struct")
  var a = CatBag(Red, None)
  printMemory(addressFromRef(a), CatBag.^allocationSize)
  {
    START("getters of the constructor")
    verify(a is CatBag, "a is CatBag")
    verify(a.f is Color, "a.f is Color")
    verify(a.g is Color, "a.g is Color")
    verify(a.f is Red, "a.f is Red")
    verify(a.g is None, "a.g is Red")
    END()
  }
  {
    START("setters")
    val y = Custom(0xAABBCCDD)
    verify(y.hex == 0xAABBCCDD, "y.hex == 0xAABBCCDD")
    a.f = y
    verify(y == y, "y == y")
    var tmp = a.f
    verify(tmp == y, "tmp == y")
    verify(a.f == y, "a.f == y")
    verify(a.f == tmp, "a.f == tmp")
    a.g = Red
    verify(a.g is Red, "a.g is Red")
    END()
  }
  {
    START("validate setters")
    verify(a.f is Custom, "a.f is Custom")
    verify(a.g is Red, "a.g is Red")
    verify(a.f is Color, "a.f is Color")
    verify(a.g is Color, "a.g is Color")
    match a.f {
      case x is Custom -> {
        val hex = x.hex
        verify(x.hex == 0xAABBCCDD, "x.hex == 0xAABBCCDD")
        verify(hex == 0xAABBCCDD, "hex == 0xAABBCCDD")
      }
      else -> verify(false, "a.f is not Custom in pattern matching")
    }
    END()
  }
  testNumbers()
  END()
}