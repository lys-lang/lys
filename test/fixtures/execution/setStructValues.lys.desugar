import support::test

import support::env

type Color = (None | Red | Custom)

impl Color {
  fun is(a: Color): boolean = {
    a is None || a is Red || a is Custom
  }
  
  fun ==(lhs: ref, rhs: ref): boolean = lhs == rhs
  
  fun !=(lhs: ref, rhs: ref): boolean = lhs != rhs
  
  fun store(lhs: ref, rhs: Color, offset: i32): void = %wasm {
    (i64.store (i32.add (get_local $offset) (call addressFromRef (get_local $lhs))) (get_local $rhs))
  }
  
  fun load(lhs: ref, offset: i32): Color = %wasm {
    (i64.load (i32.add (get_local $offset) (call addressFromRef (get_local $lhs))))
  }
}

impl Color {
  fun as(a: Color): ref = %wasm {
    (get_local $a)
  }
}

impl None {
  fun as(a: None): Color = %wasm {
    (get_local $a)
  }
}

impl Red {
  fun as(a: Red): Color = %wasm {
    (get_local $a)
  }
}

impl Custom {
  fun as(a: Custom): Color = %wasm {
    (get_local $a)
  }
}

type None = %struct {  }

type Red = %struct {  }

type Custom = %struct { hex: i32 }

impl None {
  #[inline]
  private fun None$discriminant(): i64 = {
    val discriminant: i32 = None.^discriminant
    discriminant as i64 << 32
  }
  
  fun apply(): None = %wasm {
    (call None$discriminant)
  }
  
  fun is(a: None): boolean = %wasm {
    (i64.eq (i64.and (i64.const 0xffffffff00000000) (get_local $a)) (call None$discriminant))
  }
  
  fun ==(a: None, b: ref): boolean = %wasm {
    (i64.eq (get_local $a) (get_local $b))
  }
  
  fun !=(a: None, b: ref): boolean = %wasm {
    (i64.ne (get_local $a) (get_local $b))
  }
  
  fun store(lhs: ref, rhs: None, offset: i32): void = %wasm {
    (i64.store (i32.add (get_local $offset) (call addressFromRef (get_local $lhs))) (get_local $rhs))
  }
  
  fun load(lhs: ref, offset: i32): None = %wasm {
    (i64.load (i32.add (get_local $offset) (call addressFromRef (get_local $lhs))))
  }
}

impl Red {
  #[inline]
  private fun Red$discriminant(): i64 = {
    val discriminant: i32 = Red.^discriminant
    discriminant as i64 << 32
  }
  
  fun apply(): Red = %wasm {
    (call Red$discriminant)
  }
  
  fun is(a: Red): boolean = %wasm {
    (i64.eq (i64.and (i64.const 0xffffffff00000000) (get_local $a)) (call Red$discriminant))
  }
  
  fun ==(a: Red, b: ref): boolean = %wasm {
    (i64.eq (get_local $a) (get_local $b))
  }
  
  fun !=(a: Red, b: ref): boolean = %wasm {
    (i64.ne (get_local $a) (get_local $b))
  }
  
  fun store(lhs: ref, rhs: Red, offset: i32): void = %wasm {
    (i64.store (i32.add (get_local $offset) (call addressFromRef (get_local $lhs))) (get_local $rhs))
  }
  
  fun load(lhs: ref, offset: i32): Red = %wasm {
    (i64.load (i32.add (get_local $offset) (call addressFromRef (get_local $lhs))))
  }
}

impl Custom {
  #[inline]
  private fun Custom$discriminant(): i64 = {
    val discriminant: i32 = Custom.^discriminant
    discriminant as i64 << 32
  }
  
  fun apply(hex: i32): Custom = {
    var $ref = fromPointer(system::memory::calloc(1, Custom.^allocationSize))
    property$0($ref, hex)
    $ref
  }
  
  private fun fromPointer(ptr: i32): Custom = %wasm {
    (i64.or (call Custom$discriminant) (i64.extend_u/i32 (get_local $ptr)))
  }
  
  fun ==(a: Custom, b: Custom): boolean = %wasm {
    (i64.eq (get_local $a) (get_local $b))
  }
  
  fun !=(a: Custom, b: Custom): boolean = %wasm {
    (i64.ne (get_local $a) (get_local $b))
  }
  
  fun property_hex(self: Custom): i32 = property$0(self)
  fun property_hex(self: Custom, value: i32): void = property$0(self, value)
  
  #[inline]
  private fun property$0(self: Custom): i32 = i32.load(self, Custom.^property$0_offset)
  #[inline]
  private fun property$0(self: Custom, value: i32): void = i32.store(self, value, Custom.^property$0_offset)
  
  fun is(a: Custom): boolean = %wasm {
    (i64.eq (i64.and (i64.const 0xffffffff00000000) (get_local $a)) (call Custom$discriminant))
  }
  
  fun store(lhs: ref, rhs: Custom, offset: i32): void = %wasm {
    (i64.store (i32.add (get_local $offset) (call addressFromRef (get_local $lhs))) (get_local $rhs))
  }
  
  fun load(lhs: ref, offset: i32): Custom = %wasm {
    (i64.load (i32.add (get_local $offset) (call addressFromRef (get_local $lhs))))
  }
}

type CatBag = %struct { f: Color, g: (Red | None) }

impl CatBag {
  #[inline]
  private fun CatBag$discriminant(): i64 = {
    val discriminant: i32 = CatBag.^discriminant
    discriminant as i64 << 32
  }
  
  fun apply(f: Color, g: ((Red | None))): CatBag = {
    var $ref = fromPointer(system::memory::calloc(1, CatBag.^allocationSize))
    property$0($ref, f)
    property$1($ref, g)
    $ref
  }
  
  private fun fromPointer(ptr: i32): CatBag = %wasm {
    (i64.or (call CatBag$discriminant) (i64.extend_u/i32 (get_local $ptr)))
  }
  
  fun ==(a: CatBag, b: CatBag): boolean = %wasm {
    (i64.eq (get_local $a) (get_local $b))
  }
  
  fun !=(a: CatBag, b: CatBag): boolean = %wasm {
    (i64.ne (get_local $a) (get_local $b))
  }
  
  fun property_f(self: CatBag): Color = property$0(self)
  fun property_f(self: CatBag, value: Color): void = property$0(self, value)
  
  #[inline]
  private fun property$0(self: CatBag): Color = Color.load(self, CatBag.^property$0_offset)
  #[inline]
  private fun property$0(self: CatBag, value: Color): void = Color.store(self, value, CatBag.^property$0_offset)
  
  fun property_g(self: CatBag): ((Red | None)) = property$1(self)
  fun property_g(self: CatBag, value: ((Red | None))): void = property$1(self, value)
  
  #[inline]
  private fun property$1(self: CatBag): ((Red | None)) = loadPropertyWithOffset$1(self, CatBag.^property$1_offset)
  #[inline]
  private fun property$1(self: CatBag, value: ((Red | None))): void = storePropertyWithOffset$1(self, value, CatBag.^property$1_offset)
  
  #[inline]
  private fun loadPropertyWithOffset$1(self: CatBag, offset: i32): ((Red | None)) = %wasm {
    (i64.load (i32.add (get_local $offset) (call addressFromRef (get_local $self))))
  }
  
  #[inline]
  private fun storePropertyWithOffset$1(self: CatBag, value: ((Red | None)), offset: i32): void = %wasm {
    (i64.store (i32.add (get_local $offset) (call addressFromRef (get_local $self))) (get_local $value))
  }
  
  fun is(a: CatBag): boolean = %wasm {
    (i64.eq (i64.and (i64.const 0xffffffff00000000) (get_local $a)) (call CatBag$discriminant))
  }
  
  fun store(lhs: ref, rhs: CatBag, offset: i32): void = %wasm {
    (i64.store (i32.add (get_local $offset) (call addressFromRef (get_local $lhs))) (get_local $rhs))
  }
  
  fun load(lhs: ref, offset: i32): CatBag = %wasm {
    (i64.load (i32.add (get_local $offset) (call addressFromRef (get_local $lhs))))
  }
}

#[export]
fun main(): void = {
  START("set values in struct")
  var a = CatBag(Red, None)
  printMemory(addressFromRef(a), CatBag.^allocationSize)
  {
    START("getters of the constructor")
    verify(a is CatBag, "a is CatBag")
    verify(a.f is Color, "a.f is Color")
    verify(a.g is Color, "a.g is Color")
    verify(a.f is Red, "a.f is Red")
    verify(a.g is None, "a.g is Red")
    END()
  }
  {
    START("setters")
    val y = Custom(0xAABBCCDD)
    verify(y.hex == 0xAABBCCDD, "y.hex == 0xAABBCCDD")
    a.f = y
    verify(y == y, "y == y")
    var tmp = a.f
    verify(tmp == y, "tmp == y")
    verify(a.f == y, "a.f == y")
    verify(a.f == tmp, "a.f == tmp")
    a.g = Red
    verify(a.g is Red, "a.g is Red")
    END()
  }
  {
    START("validate setters")
    verify(a.f is Custom, "a.f is Custom")
    verify(a.g is Red, "a.g is Red")
    verify(a.f is Color, "a.f is Color")
    verify(a.g is Color, "a.g is Color")
    match a.f {
      case x is Custom -> {
        val hex = x.hex
        verify(x.hex == 0xAABBCCDD, "x.hex == 0xAABBCCDD")
        verify(hex == 0xAABBCCDD, "hex == 0xAABBCCDD")
      }
      else -> verify(false, "a.f is not Custom in pattern matching")
    }
    END()
  }
  END()
}