import support::test

fun maxI64(): i64 = %wasm {
  (i64.const 0xFFFFFFFFFFFF)
}

fun maxI16inI64(): i64 = %wasm {
  (i64.const 0xFFFF)
}

fun i32_one(): i32 = %wasm {
  (i32.const 1)
}

fun u32_one(): u32 = %wasm {
  (i32.const 1)
}

fun i32const_u32(x: i32): u32 = %wasm {
  (get_local $x)
}

fun i32const_i32(x: i32): i32 = %wasm {
  (get_local $x)
}

#[export]
fun main(): void = {
  START("Number sanity checks")
  verify(0 == 1 - 1, "1")
  verify(0 == 0 / 10, "0 / 10")
  verify(1 == 10 / 10, "10 / 10")
  verify(0 == 10 / 100, "10 / 100")
  verify(maxI16inI64() as i32 as i16 == 0xFFFF as i16, "2")
  verify(0xFFFF as i16 as i32 == 0xFFFFFFFF, "0xFFFF as i16 as i32")
  verify(0x8000 as i16 as i32 == -32768, "0x8000 as i16 as i32")
  verify(1 as u32 == u32_one(), "3")
  verify(i32const_i32(44) == i32const_u32(44) as i32, "4")
  verify(i32const_u32(44) == i32const_i32(44) as u32, "5")
  verify(44 / 10 == 4, "6")
  verify((44 as u64) / 10 as u64 == 4 as u64, "7")
  verify(-1 == 0xFFFFFFFF, "8")
  verify(-1 as u32 == 0xFFFFFFFF as u32, "9")
  verify((-(-1)) as u32 == 1 as u32, "10")
  END()
}