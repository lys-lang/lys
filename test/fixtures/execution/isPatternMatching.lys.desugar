import support::test

type Enum = (A | B | C)

impl Enum {
  fun is(a: Enum): boolean = {
    a is A || a is B || a is C
  }

  fun ==(lhs: ref, rhs: ref): boolean = lhs == rhs

  fun !=(lhs: ref, rhs: ref): boolean = lhs != rhs

  fun store(lhs: ref, rhs: Enum, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Enum = %wasm {
    (i64.load (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))))
  }
}

impl Enum {
  fun as(a: Enum): ref = %wasm {
    (local.get $a)
  }
}

impl A {
  fun as(a: A): Enum = %wasm {
    (local.get $a)
  }
}

impl B {
  fun as(a: B): Enum = %wasm {
    (local.get $a)
  }
}

impl C {
  fun as(a: C): Enum = %wasm {
    (local.get $a)
  }
}

type A = %struct {  }

type B = %struct {  }

type C = %struct {  }

impl A {
  #[inline]
  private fun A$discriminant(): i64 = {
    val discriminant: u32 = A.^discriminant
    discriminant as i64 << 32
  }

  fun apply(): A = %wasm {
    (call A$discriminant)
  }

  fun is(a: A): boolean = %wasm {
    (i64.eq (i64.and (i64.const 0xffffffff00000000) (local.get $a)) (call A$discriminant))
  }

  fun ==(a: A, b: ref): boolean = %wasm {
    (i64.eq (local.get $a) (local.get $b))
  }

  fun !=(a: A, b: ref): boolean = %wasm {
    (i64.ne (local.get $a) (local.get $b))
  }

  fun store(lhs: ref, rhs: A, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): A = %wasm {
    (i64.load (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))))
  }
}

impl B {
  #[inline]
  private fun B$discriminant(): i64 = {
    val discriminant: u32 = B.^discriminant
    discriminant as i64 << 32
  }

  fun apply(): B = %wasm {
    (call B$discriminant)
  }

  fun is(a: B): boolean = %wasm {
    (i64.eq (i64.and (i64.const 0xffffffff00000000) (local.get $a)) (call B$discriminant))
  }

  fun ==(a: B, b: ref): boolean = %wasm {
    (i64.eq (local.get $a) (local.get $b))
  }

  fun !=(a: B, b: ref): boolean = %wasm {
    (i64.ne (local.get $a) (local.get $b))
  }

  fun store(lhs: ref, rhs: B, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): B = %wasm {
    (i64.load (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))))
  }
}

impl C {
  #[inline]
  private fun C$discriminant(): i64 = {
    val discriminant: u32 = C.^discriminant
    discriminant as i64 << 32
  }

  fun apply(): C = %wasm {
    (call C$discriminant)
  }

  fun is(a: C): boolean = %wasm {
    (i64.eq (i64.and (i64.const 0xffffffff00000000) (local.get $a)) (call C$discriminant))
  }

  fun ==(a: C, b: ref): boolean = %wasm {
    (i64.eq (local.get $a) (local.get $b))
  }

  fun !=(a: C, b: ref): boolean = %wasm {
    (i64.ne (local.get $a) (local.get $b))
  }

  fun store(lhs: ref, rhs: C, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): C = %wasm {
    (i64.load (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))))
  }
}

type Color = (Red | Green | Blue | Custom)

impl Color {
  fun is(a: Color): boolean = {
    a is Red || a is Green || a is Blue || a is Custom
  }

  fun ==(lhs: ref, rhs: ref): boolean = lhs == rhs

  fun !=(lhs: ref, rhs: ref): boolean = lhs != rhs

  fun store(lhs: ref, rhs: Color, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Color = %wasm {
    (i64.load (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))))
  }
}

impl Color {
  fun as(a: Color): ref = %wasm {
    (local.get $a)
  }
}

impl Red {
  fun as(a: Red): Color = %wasm {
    (local.get $a)
  }
}

impl Green {
  fun as(a: Green): Color = %wasm {
    (local.get $a)
  }
}

impl Blue {
  fun as(a: Blue): Color = %wasm {
    (local.get $a)
  }
}

impl Custom {
  fun as(a: Custom): Color = %wasm {
    (local.get $a)
  }
}

type Red = %struct {  }

type Green = %struct {  }

type Blue = %struct {  }

type Custom = %struct { a: i32 }

impl Red {
  #[inline]
  private fun Red$discriminant(): i64 = {
    val discriminant: u32 = Red.^discriminant
    discriminant as i64 << 32
  }

  fun apply(): Red = %wasm {
    (call Red$discriminant)
  }

  fun is(a: Red): boolean = %wasm {
    (i64.eq (i64.and (i64.const 0xffffffff00000000) (local.get $a)) (call Red$discriminant))
  }

  fun ==(a: Red, b: ref): boolean = %wasm {
    (i64.eq (local.get $a) (local.get $b))
  }

  fun !=(a: Red, b: ref): boolean = %wasm {
    (i64.ne (local.get $a) (local.get $b))
  }

  fun store(lhs: ref, rhs: Red, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Red = %wasm {
    (i64.load (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))))
  }
}

impl Green {
  #[inline]
  private fun Green$discriminant(): i64 = {
    val discriminant: u32 = Green.^discriminant
    discriminant as i64 << 32
  }

  fun apply(): Green = %wasm {
    (call Green$discriminant)
  }

  fun is(a: Green): boolean = %wasm {
    (i64.eq (i64.and (i64.const 0xffffffff00000000) (local.get $a)) (call Green$discriminant))
  }

  fun ==(a: Green, b: ref): boolean = %wasm {
    (i64.eq (local.get $a) (local.get $b))
  }

  fun !=(a: Green, b: ref): boolean = %wasm {
    (i64.ne (local.get $a) (local.get $b))
  }

  fun store(lhs: ref, rhs: Green, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Green = %wasm {
    (i64.load (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))))
  }
}

impl Blue {
  #[inline]
  private fun Blue$discriminant(): i64 = {
    val discriminant: u32 = Blue.^discriminant
    discriminant as i64 << 32
  }

  fun apply(): Blue = %wasm {
    (call Blue$discriminant)
  }

  fun is(a: Blue): boolean = %wasm {
    (i64.eq (i64.and (i64.const 0xffffffff00000000) (local.get $a)) (call Blue$discriminant))
  }

  fun ==(a: Blue, b: ref): boolean = %wasm {
    (i64.eq (local.get $a) (local.get $b))
  }

  fun !=(a: Blue, b: ref): boolean = %wasm {
    (i64.ne (local.get $a) (local.get $b))
  }

  fun store(lhs: ref, rhs: Blue, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Blue = %wasm {
    (i64.load (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))))
  }
}

impl Custom {
  #[inline]
  private fun Custom$discriminant(): u64 = {
    val discriminant: u32 = Custom.^discriminant
    discriminant as u64 << 32
  }

  fun apply(a: i32): Custom = {
    var $ref = fromPointer(system::memory::calloc(1 as u32, Custom.^allocationSize))
    property$0($ref, a)
    $ref
  }

  private fun fromPointer(ptr: u32): Custom = %wasm {
    (i64.or (call Custom$discriminant) (i64.extend_u/i32 (local.get $ptr)))
  }

  fun ==(a: Custom, b: Custom): boolean = %wasm {
    (i64.eq (local.get $a) (local.get $b))
  }

  fun !=(a: Custom, b: Custom): boolean = %wasm {
    (i64.ne (local.get $a) (local.get $b))
  }

  fun property_a(self: Custom): i32 = property$0(self)
  fun property_a(self: Custom, value: i32): void = property$0(self, value)

  #[inline]
  private fun property$0(self: Custom): i32 = i32.load(self, Custom.^property$0_offset)
  #[inline]
  private fun property$0(self: Custom, value: i32): void = i32.store(self, value, Custom.^property$0_offset)

  fun is(a: Custom): boolean = %wasm {
    (i64.eq (i64.and (i64.const 0xffffffff00000000) (local.get $a)) (call Custom$discriminant))
  }

  fun store(lhs: ref, rhs: Custom, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Custom = %wasm {
    (i64.load (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))))
  }
}

var value1: Enum = A

var value2: (A | B) = A

var value3: A = A

fun isA(x: ref): boolean = {
  match x {
    case is A -> true
    else -> false
  }
}

fun isB(x: ref): boolean = {
  match x {
    case is B -> true
    else -> false
  }
}

fun isEnum(x: ref): boolean = {
  match x {
    case is Enum -> true
    else -> false
  }
}

fun isRed(x: ref): boolean = {
  match x {
    case is Red -> true
    else -> false
  }
}

fun isColor(x: ref): boolean = {
  match x {
    case is Color -> true
    else -> false
  }
}

fun isCustom(x: ref): boolean = {
  match x {
    case is Custom -> true
    else -> false
  }
}

#[export]
fun main(): void = {
  START("is with pattern matchin")
  assert(isA(A) == true)
  assert(isEnum(A) == true)
  assert(isB(B) == true)
  assert(isA(B) == false)
  assert(isEnum(B) == true)
  assert(isB(B) == true)
  assert(isA(C) == false)
  assert(isEnum(C) == true)
  assert(isB(C) == false)
  assert(isA(value1) == true)
  assert(isB(value1) == false)
  assert(isEnum(value1) == true)
  assert(isA(value2) == true)
  assert(isB(value2) == false)
  assert(isEnum(value2) == true)
  assert(isA(value3) == true)
  assert(isB(value3) == false)
  assert(isEnum(value3) == true)
  assert(isRed(value3) == false)
  assert(isRed(Red) == true)
  assert(isColor(Custom(1)) == true)
  assert(isCustom(Custom(1)) == true)
  assert(isRed(Custom(1)) == false)
  assert(isB(Custom(1)) == false)
  END()
}