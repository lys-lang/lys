type Tree = (Node | Empty)

impl Tree {
  fun is(a: (Tree | ref)): boolean = {
    a is Node || a is Empty
  }

  #[explicit]
  fun as(a: Tree): ref = %wasm {
    (local.get $a)
  }

  fun ==(lhs: ref, rhs: ref): boolean = lhs == rhs

  fun !=(lhs: ref, rhs: ref): boolean = lhs != rhs

  fun store(lhs: ref, rhs: Tree, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Tree = %wasm {
    (i64.load (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))))
  }
}

impl Node {
  fun as(lhs: Node): Tree = %wasm {
    (local.get $lhs)
  }
  #[explicit]
  fun as(lhs: Node): ref = %wasm {
    (local.get $lhs)
  }

  #[inline]
  private fun Node$discriminant(): u64 = {
    val discriminant: u32 = Node.^discriminant
    discriminant as u64 << 32
  }

  fun apply(value: i32, left: Tree, right: Tree): Node = {
    var $ref = fromPointer(system::core::memory::calloc(1 as u32, Node.^allocationSize))
    property$0($ref, value)
    property$1($ref, left)
    property$2($ref, right)
    $ref
  }

  private fun fromPointer(ptr: u32): Node = %wasm {
    (i64.or (call Node$discriminant) (i64.extend_u/i32 (local.get $ptr)))
  }

  fun ==(a: Node, b: Node): boolean = %wasm {
    (i64.eq (local.get $a) (local.get $b))
  }

  fun !=(a: Node, b: Node): boolean = %wasm {
    (i64.ne (local.get $a) (local.get $b))
  }

  fun property_value(self: Node): i32 = property$0(self)
  fun property_value(self: Node, value: i32): void = property$0(self, value)

  #[inline]
  private fun property$0(self: Node): i32 = i32.load(self, Node.^property$0_offset)
  #[inline]
  private fun property$0(self: Node, value: i32): void = i32.store(self, value, Node.^property$0_offset)

  fun property_left(self: Node): Tree = property$1(self)
  fun property_left(self: Node, value: Tree): void = property$1(self, value)

  #[inline]
  private fun property$1(self: Node): Tree = Tree.load(self, Node.^property$1_offset)
  #[inline]
  private fun property$1(self: Node, value: Tree): void = Tree.store(self, value, Node.^property$1_offset)

  fun property_right(self: Node): Tree = property$2(self)
  fun property_right(self: Node, value: Tree): void = property$2(self, value)

  #[inline]
  private fun property$2(self: Node): Tree = Tree.load(self, Node.^property$2_offset)
  #[inline]
  private fun property$2(self: Node, value: Tree): void = Tree.store(self, value, Node.^property$2_offset)

  fun is(a: (Node | ref)): boolean = %wasm {
    (i64.eq (i64.and (i64.const 0xffffffff00000000) (local.get $a)) (call Node$discriminant))
  }

  fun store(lhs: ref, rhs: Node, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Node = %wasm {
    (i64.load (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))))
  }
}

impl Empty {
  fun as(lhs: Empty): Tree = %wasm {
    (local.get $lhs)
  }
  #[explicit]
  fun as(lhs: Empty): ref = %wasm {
    (local.get $lhs)
  }

  #[inline]
  private fun Empty$discriminant(): i64 = {
    val discriminant: u32 = Empty.^discriminant
    discriminant as i64 << 32
  }

  fun apply(): Empty = %wasm {
    (call Empty$discriminant)
  }

  fun is(a: (Empty | ref)): boolean = %wasm {
    (i64.eq (i64.and (i64.const 0xffffffff00000000) (local.get $a)) (call Empty$discriminant))
  }

  fun ==(a: Empty, b: ref): boolean = %wasm {
    (i64.eq (local.get $a) (local.get $b))
  }

  fun !=(a: Empty, b: ref): boolean = %wasm {
    (i64.ne (local.get $a) (local.get $b))
  }

  fun store(lhs: ref, rhs: Empty, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Empty = %wasm {
    (i64.load (i32.add (local.get $offset) (call addressFromRef (local.get $lhs))))
  }
}

type Node = %struct { value: i32, left: Tree, right: Tree }

type Empty = %struct {  }

fun sum(arg: Tree): i32 = {
  match arg {
    case is Empty -> 0
    case is Node -> {
      val value = $.value
      val left = $.left
      val right = $.right
      value + sum(left) + sum(right)
    }
  }
}

#[export]
fun main(): void = {
  support::test::START("Traverse tree")
  val tree = Node(42, Node(3, Empty, Empty), Empty)
  support::test::mustEqual(sum(tree), 45, "sum(tree) returns 45")
  support::test::END()
}