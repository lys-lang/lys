
|-DocumentNode
  |-ImportDirectiveNode
    |-QNameNode=system::core
      |-NameIdentifierNode="system"
      |-NameIdentifierNode="core"
  |-ImportDirectiveNode
    |-QNameNode=support::test
      |-NameIdentifierNode="support"
      |-NameIdentifierNode="test"
  |-TypeDirectiveNode
    |-NameIdentifierNode="Tree" type=(type (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))))
    |-UnionTypeNode type=(type (union (alias Empty (struct)) (alias Node (struct a:<null>))))
      |-ReferenceNode type=(type (alias Empty (struct)))
        |-QNameNode=Empty
          |-NameIdentifierNode="Empty"
      |-ReferenceNode type=(type (alias Node (struct a:<null>)))
        |-QNameNode=Node
          |-NameIdentifierNode="Node"
  |-ImplDirective
    |-ReferenceNode
      |-QNameNode=Tree
        |-NameIdentifierNode="Tree"
    |-OverloadedFunctionNode type=(fun "is" ((union (alias Tree) (alias ref))) (alias boolean)) annotations=Injected
      |-NameIdentifierNode="is" type=(fun "is" ((union (alias Tree) (alias ref))) (alias boolean))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "is" ((union (alias Tree) (alias ref))) (alias boolean)) annotations=IsOverloaded
          |-NameIdentifierNode="is"
          |-ParameterNode annotations=Local(a:Tree | ref#0)
            |-NameIdentifierNode="a" type=(union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias ref (ref ?)))
            |-UnionTypeNode type=(type (union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias ref (ref ?))))
              |-ReferenceNode type=(type (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))))
                |-QNameNode=Tree
                  |-NameIdentifierNode="Tree"
              |-ReferenceNode type=(type (alias ref (ref ?)))
                |-QNameNode=ref
                  |-NameIdentifierNode="ref"
          |-ReferenceNode type=(type (alias boolean (native boolean)))
            |-QNameNode=boolean
              |-NameIdentifierNode="boolean"
          |-BlockNode type=(alias boolean (native boolean)) annotations=IsValueNode
            |-BinaryExpressionNode=(fun "||" ((alias boolean) (alias boolean)) (alias boolean)) type=(alias boolean (native boolean)) annotations=IsValueNode,IsReturnExpression
              |-IsExpressionNode=(fun "is" ((union (alias Empty) (alias ref))) (alias boolean)) type=(alias boolean (native boolean)) annotations=IsValueNode
                |-ReferenceNode type=(union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias ref (ref ?))) annotations=IsValueNode,Local(a:Tree | ref#0)
                  |-QNameNode=a
                    |-NameIdentifierNode="a"
                |-ReferenceNode type=(type (alias Empty (struct)))
                  |-QNameNode=Empty
                    |-NameIdentifierNode="Empty"
              |-NameIdentifierNode="||"
              |-IsExpressionNode=(fun "is" ((union (alias Node) (alias ref))) (alias boolean)) type=(alias boolean (native boolean)) annotations=IsValueNode
                |-ReferenceNode type=(union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias ref (ref ?))) annotations=IsValueNode,Local(a:Tree | ref#0)
                  |-QNameNode=a
                    |-NameIdentifierNode="a"
                |-ReferenceNode type=(type (alias Node (struct a:<null>)))
                  |-QNameNode=Node
                    |-NameIdentifierNode="Node"
    |-OverloadedFunctionNode type=(fun "as" ((alias Tree)) (alias ref)) annotations=Injected
      |-NameIdentifierNode="as" type=(fun "as" ((alias Tree)) (alias ref))
      |-FunDirectiveNode
        |-DecoratorNode
          |-NameIdentifierNode="explicit"
        |-FunctionNode type=(fun "as" ((alias Tree)) (alias ref)) annotations=IsOverloaded
          |-NameIdentifierNode="as" annotations=Explicit
          |-ParameterNode annotations=Local(a:Tree#0)
            |-NameIdentifierNode="a" type=(alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>))))
            |-ReferenceNode type=(type (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))))
              |-QNameNode=Tree
                |-NameIdentifierNode="Tree"
          |-ReferenceNode type=(type (alias ref (ref ?)))
            |-QNameNode=ref
              |-NameIdentifierNode="ref"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-QNameNode=$a
                |-NameIdentifierNode="$a"
    |-OverloadedFunctionNode type=(fun "==" ((alias ref) (alias ref)) (alias boolean)) annotations=Injected
      |-NameIdentifierNode="==" type=(fun "==" ((alias ref) (alias ref)) (alias boolean))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "==" ((alias ref) (alias ref)) (alias boolean)) annotations=IsOverloaded
          |-NameIdentifierNode="=="
          |-ParameterNode annotations=Local(lhs:ref#0)
            |-NameIdentifierNode="lhs" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ParameterNode annotations=Local(rhs:ref#1)
            |-NameIdentifierNode="rhs" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ReferenceNode type=(type (alias boolean (native boolean)))
            |-QNameNode=boolean
              |-NameIdentifierNode="boolean"
          |-BinaryExpressionNode=(fun "==" ((alias ref) (alias ref)) (alias boolean)) type=(alias boolean (native boolean)) annotations=IsValueNode,IsReturnExpression
            |-ReferenceNode type=(alias ref (ref ?)) annotations=IsValueNode,Local(lhs:ref#0)
              |-QNameNode=lhs
                |-NameIdentifierNode="lhs"
            |-NameIdentifierNode="=="
            |-ReferenceNode type=(alias ref (ref ?)) annotations=IsValueNode,Local(rhs:ref#1)
              |-QNameNode=rhs
                |-NameIdentifierNode="rhs"
    |-OverloadedFunctionNode type=(fun "!=" ((alias ref) (alias ref)) (alias boolean)) annotations=Injected
      |-NameIdentifierNode="!=" type=(fun "!=" ((alias ref) (alias ref)) (alias boolean))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "!=" ((alias ref) (alias ref)) (alias boolean)) annotations=IsOverloaded
          |-NameIdentifierNode="!="
          |-ParameterNode annotations=Local(lhs:ref#0)
            |-NameIdentifierNode="lhs" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ParameterNode annotations=Local(rhs:ref#1)
            |-NameIdentifierNode="rhs" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ReferenceNode type=(type (alias boolean (native boolean)))
            |-QNameNode=boolean
              |-NameIdentifierNode="boolean"
          |-BinaryExpressionNode=(fun "!=" ((alias ref) (alias ref)) (alias boolean)) type=(alias boolean (native boolean)) annotations=IsValueNode,IsReturnExpression
            |-ReferenceNode type=(alias ref (ref ?)) annotations=IsValueNode,Local(lhs:ref#0)
              |-QNameNode=lhs
                |-NameIdentifierNode="lhs"
            |-NameIdentifierNode="!="
            |-ReferenceNode type=(alias ref (ref ?)) annotations=IsValueNode,Local(rhs:ref#1)
              |-QNameNode=rhs
                |-NameIdentifierNode="rhs"
    |-OverloadedFunctionNode type=(fun "store" ((alias ref) (alias Tree) (alias u32)) (alias void)) annotations=Injected
      |-NameIdentifierNode="store" type=(fun "store" ((alias ref) (alias Tree) (alias u32)) (alias void))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "store" ((alias ref) (alias Tree) (alias u32)) (alias void)) annotations=IsOverloaded
          |-NameIdentifierNode="store"
          |-ParameterNode annotations=Local(lhs:ref#0)
            |-NameIdentifierNode="lhs" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ParameterNode annotations=Local(rhs:Tree#1)
            |-NameIdentifierNode="rhs" type=(alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>))))
            |-ReferenceNode type=(type (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))))
              |-QNameNode=Tree
                |-NameIdentifierNode="Tree"
          |-ParameterNode annotations=Local(offset:u32#2)
            |-NameIdentifierNode="offset" type=(alias u32 (native u32))
            |-ReferenceNode type=(type (alias u32 (native u32)))
              |-QNameNode=u32
                |-NameIdentifierNode="u32"
          |-ReferenceNode type=(type (alias void (native void)))
            |-QNameNode=void
              |-NameIdentifierNode="void"
          |-WasmExpressionNode type=(never)
            |-WasmAtomNode
              |-WasmAtomNode
                |-WasmAtomNode
                  |-QNameNode=$offset
                    |-NameIdentifierNode="$offset"
                |-WasmAtomNode
                  |-ReferenceNode type=(fun "addressFromRef" ((alias ref)) (alias u32))
                    |-QNameNode=addressFromRef
                      |-NameIdentifierNode="addressFromRef"
                  |-WasmAtomNode
                    |-QNameNode=$lhs
                      |-NameIdentifierNode="$lhs"
              |-WasmAtomNode
                |-QNameNode=$rhs
                  |-NameIdentifierNode="$rhs"
    |-OverloadedFunctionNode type=(fun "load" ((alias ref) (alias u32)) (alias Tree)) annotations=Injected
      |-NameIdentifierNode="load" type=(fun "load" ((alias ref) (alias u32)) (alias Tree))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "load" ((alias ref) (alias u32)) (alias Tree)) annotations=IsOverloaded
          |-NameIdentifierNode="load"
          |-ParameterNode annotations=Local(lhs:ref#0)
            |-NameIdentifierNode="lhs" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ParameterNode annotations=Local(offset:u32#1)
            |-NameIdentifierNode="offset" type=(alias u32 (native u32))
            |-ReferenceNode type=(type (alias u32 (native u32)))
              |-QNameNode=u32
                |-NameIdentifierNode="u32"
          |-ReferenceNode type=(type (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))))
            |-QNameNode=Tree
              |-NameIdentifierNode="Tree"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-WasmAtomNode
                  |-QNameNode=$offset
                    |-NameIdentifierNode="$offset"
                |-WasmAtomNode
                  |-ReferenceNode type=(fun "addressFromRef" ((alias ref)) (alias u32))
                    |-QNameNode=addressFromRef
                      |-NameIdentifierNode="addressFromRef"
                  |-WasmAtomNode
                    |-QNameNode=$lhs
                      |-NameIdentifierNode="$lhs"
  |-ImplDirective
    |-ReferenceNode
      |-QNameNode=Empty
        |-NameIdentifierNode="Empty"
    |-OverloadedFunctionNode type=(intersection (fun "as" ((alias Empty)) (alias Tree)) (fun "as" ((alias Empty)) (alias ref))) annotations=Injected
      |-NameIdentifierNode="as" type=(intersection (fun "as" ((alias Empty)) (alias Tree)) (fun "as" ((alias Empty)) (alias ref)))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "as" ((alias Empty)) (alias Tree)) annotations=IsOverloaded
          |-NameIdentifierNode="as"
          |-ParameterNode annotations=Local(lhs:Empty#0)
            |-NameIdentifierNode="lhs" type=(alias Empty (struct))
            |-ReferenceNode type=(type (alias Empty (struct)))
              |-QNameNode=Empty
                |-NameIdentifierNode="Empty"
          |-ReferenceNode type=(type (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))))
            |-QNameNode=Tree
              |-NameIdentifierNode="Tree"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-QNameNode=$lhs
                |-NameIdentifierNode="$lhs"
      |-FunDirectiveNode
        |-DecoratorNode
          |-NameIdentifierNode="explicit"
        |-FunctionNode type=(fun "as" ((alias Empty)) (alias ref)) annotations=IsOverloaded
          |-NameIdentifierNode="as" annotations=Explicit
          |-ParameterNode annotations=Local(lhs:Empty#0)
            |-NameIdentifierNode="lhs" type=(alias Empty (struct))
            |-ReferenceNode type=(type (alias Empty (struct)))
              |-QNameNode=Empty
                |-NameIdentifierNode="Empty"
          |-ReferenceNode type=(type (alias ref (ref ?)))
            |-QNameNode=ref
              |-NameIdentifierNode="ref"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-QNameNode=$lhs
                |-NameIdentifierNode="$lhs"
    |-OverloadedFunctionNode type=(fun "Empty$discriminant" () (alias i64)) annotations=Injected
      |-NameIdentifierNode="Empty$discriminant" type=(fun "Empty$discriminant" () (alias i64))
      |-FunDirectiveNode
        |-DecoratorNode
          |-NameIdentifierNode="inline"
        |-FunctionNode type=(fun "Empty$discriminant" () (alias i64)) annotations=IsOverloaded
          |-NameIdentifierNode="Empty$discriminant" annotations=Inline
          |-ReferenceNode type=(type (alias i64 (native i64)))
            |-QNameNode=i64
              |-NameIdentifierNode="i64"
          |-BlockNode type=(alias i64 (native i64)) annotations=IsValueNode
            |-ValDeclarationNode type=(native void) annotations=Local(test::fixtures::execution::recursiveStruct::discriminant:u32#0)
              |-NameIdentifierNode="discriminant" type=(alias u32 (native u32))
              |-ReferenceNode type=(type (alias u32 (native u32)))
                |-QNameNode=u32
                  |-NameIdentifierNode="u32"
              |-MemberNode type=(native u32) annotations=IsValueNode
                |-ReferenceNode type=(type (alias Empty (struct)))
                  |-QNameNode=Empty
                    |-NameIdentifierNode="Empty"
                |-NameIdentifierNode="discriminant"
            |-BinaryExpressionNode=(fun "<<" ((alias i64) (alias i32)) (alias i64)) type=(alias i64 (native i64)) annotations=IsValueNode,IsReturnExpression
              |-AsExpressionNode=(fun "as" ((alias u32)) (alias i64)) type=(alias i64 (native i64)) annotations=IsValueNode
                |-ReferenceNode type=(alias u32 (native u32)) annotations=IsValueNode,Local(test::fixtures::execution::recursiveStruct::discriminant:u32#0)
                  |-QNameNode=discriminant
                    |-NameIdentifierNode="discriminant"
                |-ReferenceNode type=(type (alias i64 (native i64)))
                  |-QNameNode=i64
                    |-NameIdentifierNode="i64"
              |-NameIdentifierNode="<<"
              |-IntegerLiteral=32 type=(alias i32 (native i32)) annotations=IsValueNode
    |-OverloadedFunctionNode type=(fun "apply" () (alias Empty)) annotations=Injected
      |-NameIdentifierNode="apply" type=(fun "apply" () (alias Empty))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "apply" () (alias Empty)) annotations=IsOverloaded
          |-NameIdentifierNode="apply"
          |-ReferenceNode type=(type (alias Empty (struct)))
            |-QNameNode=Empty
              |-NameIdentifierNode="Empty"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-ReferenceNode type=(fun "Empty$discriminant" () (alias i64))
                |-QNameNode=Empty$discriminant
                  |-NameIdentifierNode="Empty$discriminant"
    |-OverloadedFunctionNode type=(fun "is" ((union (alias Empty) (alias ref))) (alias boolean)) annotations=Injected
      |-NameIdentifierNode="is" type=(fun "is" ((union (alias Empty) (alias ref))) (alias boolean))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "is" ((union (alias Empty) (alias ref))) (alias boolean)) annotations=IsOverloaded
          |-NameIdentifierNode="is"
          |-ParameterNode annotations=Local(a:Empty | ref#0)
            |-NameIdentifierNode="a" type=(union (alias Empty (struct)) (alias ref (ref ?)))
            |-UnionTypeNode type=(type (union (alias Empty (struct)) (alias ref (ref ?))))
              |-ReferenceNode type=(type (alias Empty (struct)))
                |-QNameNode=Empty
                  |-NameIdentifierNode="Empty"
              |-ReferenceNode type=(type (alias ref (ref ?)))
                |-QNameNode=ref
                  |-NameIdentifierNode="ref"
          |-ReferenceNode type=(type (alias boolean (native boolean)))
            |-QNameNode=boolean
              |-NameIdentifierNode="boolean"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-WasmAtomNode
                  |-HexLiteral=18446744069414584000
                |-WasmAtomNode
                  |-QNameNode=$a
                    |-NameIdentifierNode="$a"
              |-WasmAtomNode
                |-ReferenceNode type=(fun "Empty$discriminant" () (alias i64))
                  |-QNameNode=Empty$discriminant
                    |-NameIdentifierNode="Empty$discriminant"
    |-OverloadedFunctionNode type=(fun "==" ((alias Empty) (alias ref)) (alias boolean)) annotations=Injected
      |-NameIdentifierNode="==" type=(fun "==" ((alias Empty) (alias ref)) (alias boolean))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "==" ((alias Empty) (alias ref)) (alias boolean)) annotations=IsOverloaded
          |-NameIdentifierNode="=="
          |-ParameterNode annotations=Local(a:Empty#0)
            |-NameIdentifierNode="a" type=(alias Empty (struct))
            |-ReferenceNode type=(type (alias Empty (struct)))
              |-QNameNode=Empty
                |-NameIdentifierNode="Empty"
          |-ParameterNode annotations=Local(b:ref#1)
            |-NameIdentifierNode="b" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ReferenceNode type=(type (alias boolean (native boolean)))
            |-QNameNode=boolean
              |-NameIdentifierNode="boolean"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-QNameNode=$a
                  |-NameIdentifierNode="$a"
              |-WasmAtomNode
                |-QNameNode=$b
                  |-NameIdentifierNode="$b"
    |-OverloadedFunctionNode type=(fun "!=" ((alias Empty) (alias ref)) (alias boolean)) annotations=Injected
      |-NameIdentifierNode="!=" type=(fun "!=" ((alias Empty) (alias ref)) (alias boolean))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "!=" ((alias Empty) (alias ref)) (alias boolean)) annotations=IsOverloaded
          |-NameIdentifierNode="!="
          |-ParameterNode annotations=Local(a:Empty#0)
            |-NameIdentifierNode="a" type=(alias Empty (struct))
            |-ReferenceNode type=(type (alias Empty (struct)))
              |-QNameNode=Empty
                |-NameIdentifierNode="Empty"
          |-ParameterNode annotations=Local(b:ref#1)
            |-NameIdentifierNode="b" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ReferenceNode type=(type (alias boolean (native boolean)))
            |-QNameNode=boolean
              |-NameIdentifierNode="boolean"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-QNameNode=$a
                  |-NameIdentifierNode="$a"
              |-WasmAtomNode
                |-QNameNode=$b
                  |-NameIdentifierNode="$b"
    |-OverloadedFunctionNode type=(fun "store" ((alias ref) (alias Empty) (alias u32)) (alias void)) annotations=Injected
      |-NameIdentifierNode="store" type=(fun "store" ((alias ref) (alias Empty) (alias u32)) (alias void))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "store" ((alias ref) (alias Empty) (alias u32)) (alias void)) annotations=IsOverloaded
          |-NameIdentifierNode="store"
          |-ParameterNode annotations=Local(lhs:ref#0)
            |-NameIdentifierNode="lhs" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ParameterNode annotations=Local(rhs:Empty#1)
            |-NameIdentifierNode="rhs" type=(alias Empty (struct))
            |-ReferenceNode type=(type (alias Empty (struct)))
              |-QNameNode=Empty
                |-NameIdentifierNode="Empty"
          |-ParameterNode annotations=Local(offset:u32#2)
            |-NameIdentifierNode="offset" type=(alias u32 (native u32))
            |-ReferenceNode type=(type (alias u32 (native u32)))
              |-QNameNode=u32
                |-NameIdentifierNode="u32"
          |-ReferenceNode type=(type (alias void (native void)))
            |-QNameNode=void
              |-NameIdentifierNode="void"
          |-WasmExpressionNode type=(never)
            |-WasmAtomNode
              |-WasmAtomNode
                |-WasmAtomNode
                  |-QNameNode=$offset
                    |-NameIdentifierNode="$offset"
                |-WasmAtomNode
                  |-ReferenceNode type=(fun "addressFromRef" ((alias ref)) (alias u32))
                    |-QNameNode=addressFromRef
                      |-NameIdentifierNode="addressFromRef"
                  |-WasmAtomNode
                    |-QNameNode=$lhs
                      |-NameIdentifierNode="$lhs"
              |-WasmAtomNode
                |-QNameNode=$rhs
                  |-NameIdentifierNode="$rhs"
    |-OverloadedFunctionNode type=(fun "load" ((alias ref) (alias u32)) (alias Empty)) annotations=Injected
      |-NameIdentifierNode="load" type=(fun "load" ((alias ref) (alias u32)) (alias Empty))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "load" ((alias ref) (alias u32)) (alias Empty)) annotations=IsOverloaded
          |-NameIdentifierNode="load"
          |-ParameterNode annotations=Local(lhs:ref#0)
            |-NameIdentifierNode="lhs" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ParameterNode annotations=Local(offset:u32#1)
            |-NameIdentifierNode="offset" type=(alias u32 (native u32))
            |-ReferenceNode type=(type (alias u32 (native u32)))
              |-QNameNode=u32
                |-NameIdentifierNode="u32"
          |-ReferenceNode type=(type (alias Empty (struct)))
            |-QNameNode=Empty
              |-NameIdentifierNode="Empty"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-WasmAtomNode
                  |-QNameNode=$offset
                    |-NameIdentifierNode="$offset"
                |-WasmAtomNode
                  |-ReferenceNode type=(fun "addressFromRef" ((alias ref)) (alias u32))
                    |-QNameNode=addressFromRef
                      |-NameIdentifierNode="addressFromRef"
                  |-WasmAtomNode
                    |-QNameNode=$lhs
                      |-NameIdentifierNode="$lhs"
  |-ImplDirective
    |-ReferenceNode
      |-QNameNode=Node
        |-NameIdentifierNode="Node"
    |-OverloadedFunctionNode type=(intersection (fun "as" ((alias Node)) (alias Tree)) (fun "as" ((alias Node)) (alias ref))) annotations=Injected
      |-NameIdentifierNode="as" type=(intersection (fun "as" ((alias Node)) (alias Tree)) (fun "as" ((alias Node)) (alias ref)))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "as" ((alias Node)) (alias Tree)) annotations=IsOverloaded
          |-NameIdentifierNode="as"
          |-ParameterNode annotations=Local(lhs:Node#0)
            |-NameIdentifierNode="lhs" type=(alias Node (struct a:<null>))
            |-ReferenceNode type=(type (alias Node (struct a:<null>)))
              |-QNameNode=Node
                |-NameIdentifierNode="Node"
          |-ReferenceNode type=(type (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))))
            |-QNameNode=Tree
              |-NameIdentifierNode="Tree"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-QNameNode=$lhs
                |-NameIdentifierNode="$lhs"
      |-FunDirectiveNode
        |-DecoratorNode
          |-NameIdentifierNode="explicit"
        |-FunctionNode type=(fun "as" ((alias Node)) (alias ref)) annotations=IsOverloaded
          |-NameIdentifierNode="as" annotations=Explicit
          |-ParameterNode annotations=Local(lhs:Node#0)
            |-NameIdentifierNode="lhs" type=(alias Node (struct a:<null>))
            |-ReferenceNode type=(type (alias Node (struct a:<null>)))
              |-QNameNode=Node
                |-NameIdentifierNode="Node"
          |-ReferenceNode type=(type (alias ref (ref ?)))
            |-QNameNode=ref
              |-NameIdentifierNode="ref"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-QNameNode=$lhs
                |-NameIdentifierNode="$lhs"
    |-OverloadedFunctionNode type=(fun "Node$discriminant" () (alias u64)) annotations=Injected
      |-NameIdentifierNode="Node$discriminant" type=(fun "Node$discriminant" () (alias u64))
      |-FunDirectiveNode
        |-DecoratorNode
          |-NameIdentifierNode="inline"
        |-FunctionNode type=(fun "Node$discriminant" () (alias u64)) annotations=IsOverloaded
          |-NameIdentifierNode="Node$discriminant" annotations=Inline
          |-ReferenceNode type=(type (alias u64 (native u64)))
            |-QNameNode=u64
              |-NameIdentifierNode="u64"
          |-BlockNode type=(alias u64 (native u64)) annotations=IsValueNode
            |-ValDeclarationNode type=(native void) annotations=Local(test::fixtures::execution::recursiveStruct::discriminant_3:u32#0)
              |-NameIdentifierNode="discriminant" type=(alias u32 (native u32))
              |-ReferenceNode type=(type (alias u32 (native u32)))
                |-QNameNode=u32
                  |-NameIdentifierNode="u32"
              |-MemberNode type=(native u32) annotations=IsValueNode
                |-ReferenceNode type=(type (alias Node (struct a:<null>)))
                  |-QNameNode=Node
                    |-NameIdentifierNode="Node"
                |-NameIdentifierNode="discriminant"
            |-BinaryExpressionNode=(fun "<<" ((alias u64) (alias i32)) (alias u64)) type=(alias u64 (native u64)) annotations=IsValueNode,IsReturnExpression
              |-AsExpressionNode=(fun "as" ((alias u32)) (alias u64)) type=(alias u64 (native u64)) annotations=IsValueNode
                |-ReferenceNode type=(alias u32 (native u32)) annotations=IsValueNode,Local(test::fixtures::execution::recursiveStruct::discriminant_3:u32#0)
                  |-QNameNode=discriminant
                    |-NameIdentifierNode="discriminant"
                |-ReferenceNode type=(type (alias u64 (native u64)))
                  |-QNameNode=u64
                    |-NameIdentifierNode="u64"
              |-NameIdentifierNode="<<"
              |-IntegerLiteral=32 type=(alias i32 (native i32)) annotations=IsValueNode
    |-OverloadedFunctionNode type=(fun "apply" ((union (alias Tree) (alias Forest))) (alias Node)) annotations=Injected
      |-NameIdentifierNode="apply" type=(fun "apply" ((union (alias Tree) (alias Forest))) (alias Node))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "apply" ((union (alias Tree) (alias Forest))) (alias Node)) annotations=IsOverloaded
          |-NameIdentifierNode="apply"
          |-ParameterNode annotations=Local(a:Tree | Forest#0)
            |-NameIdentifierNode="a" type=(union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))))
            |-UnionTypeNode type=(type (union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>))))))
              |-ReferenceNode type=(type (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))))
                |-QNameNode=Tree
                  |-NameIdentifierNode="Tree"
              |-ReferenceNode type=(type (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))))
                |-QNameNode=Forest
                  |-NameIdentifierNode="Forest"
          |-ReferenceNode type=(type (alias Node (struct a:<null>)))
            |-QNameNode=Node
              |-NameIdentifierNode="Node"
          |-BlockNode type=(alias Node (struct a:<null>)) annotations=IsValueNode
            |-VarDeclarationNode type=(native void) annotations=Local(test::fixtures::execution::recursiveStruct::$ref:Node#1)
              |-NameIdentifierNode="$ref" type=(alias Node (struct a:<null>))
              |-FunctionCallNode=(fun "fromPointer" ((alias u32)) (alias Node)) type=(alias Node (struct a:<null>)) annotations=IsValueNode
                |-ReferenceNode type=(fun "fromPointer" ((alias u32)) (alias Node))
                  |-QNameNode=fromPointer
                    |-NameIdentifierNode="fromPointer"
                |-FunctionCallNode=(fun "calloc" ((alias u32) (alias u32)) (alias u32)) type=(alias u32 (native u32)) annotations=IsValueNode
                  |-ReferenceNode type=(fun "calloc" ((alias u32) (alias u32)) (alias u32))
                    |-QNameNode=system::memory::calloc
                      |-NameIdentifierNode="system"
                      |-NameIdentifierNode="memory"
                      |-NameIdentifierNode="calloc"
                  |-AsExpressionNode=(fun "as" ((alias i32)) (alias u32)) type=(alias u32 (native u32)) annotations=IsValueNode
                    |-IntegerLiteral=1 type=(alias i32 (native i32)) annotations=IsValueNode
                    |-ReferenceNode type=(type (alias u32 (native u32)))
                      |-QNameNode=u32
                        |-NameIdentifierNode="u32"
                  |-MemberNode type=(native u32) annotations=IsValueNode
                    |-ReferenceNode type=(type (alias Node (struct a:<null>)))
                      |-QNameNode=Node
                        |-NameIdentifierNode="Node"
                    |-NameIdentifierNode="allocationSize"
            |-FunctionCallNode=(fun "property$0" ((alias Node) (union (alias Tree) (alias Forest))) (alias void)) type=(alias void (native void))
              |-ReferenceNode type=(intersection (fun "property$0" ((alias Node)) (union (alias Tree) (alias Forest))) (fun "property$0" ((alias Node) (union (alias Tree) (alias Forest))) (alias void)))
                |-QNameNode=property$0
                  |-NameIdentifierNode="property$0"
              |-ReferenceNode type=(alias Node (struct a:<null>)) annotations=IsValueNode,Local(test::fixtures::execution::recursiveStruct::$ref:Node#1)
                |-QNameNode=$ref
                  |-NameIdentifierNode="$ref"
              |-ReferenceNode type=(union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>))))) annotations=IsValueNode,Local(a:Tree | Forest#0)
                |-QNameNode=a
                  |-NameIdentifierNode="a"
            |-ReferenceNode type=(alias Node (struct a:<null>)) annotations=IsValueNode,IsReturnExpression,Local(test::fixtures::execution::recursiveStruct::$ref:Node#1)
              |-QNameNode=$ref
                |-NameIdentifierNode="$ref"
    |-OverloadedFunctionNode type=(fun "fromPointer" ((alias u32)) (alias Node)) annotations=Injected
      |-NameIdentifierNode="fromPointer" type=(fun "fromPointer" ((alias u32)) (alias Node))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "fromPointer" ((alias u32)) (alias Node)) annotations=IsOverloaded
          |-NameIdentifierNode="fromPointer"
          |-ParameterNode annotations=Local(ptr:u32#0)
            |-NameIdentifierNode="ptr" type=(alias u32 (native u32))
            |-ReferenceNode type=(type (alias u32 (native u32)))
              |-QNameNode=u32
                |-NameIdentifierNode="u32"
          |-ReferenceNode type=(type (alias Node (struct a:<null>)))
            |-QNameNode=Node
              |-NameIdentifierNode="Node"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-ReferenceNode type=(fun "Node$discriminant" () (alias u64))
                  |-QNameNode=Node$discriminant
                    |-NameIdentifierNode="Node$discriminant"
              |-WasmAtomNode
                |-WasmAtomNode
                  |-QNameNode=$ptr
                    |-NameIdentifierNode="$ptr"
    |-OverloadedFunctionNode type=(fun "==" ((alias Node) (alias Node)) (alias boolean)) annotations=Injected
      |-NameIdentifierNode="==" type=(fun "==" ((alias Node) (alias Node)) (alias boolean))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "==" ((alias Node) (alias Node)) (alias boolean)) annotations=IsOverloaded
          |-NameIdentifierNode="=="
          |-ParameterNode annotations=Local(a:Node#0)
            |-NameIdentifierNode="a" type=(alias Node (struct a:<null>))
            |-ReferenceNode type=(type (alias Node (struct a:<null>)))
              |-QNameNode=Node
                |-NameIdentifierNode="Node"
          |-ParameterNode annotations=Local(b:Node#1)
            |-NameIdentifierNode="b" type=(alias Node (struct a:<null>))
            |-ReferenceNode type=(type (alias Node (struct a:<null>)))
              |-QNameNode=Node
                |-NameIdentifierNode="Node"
          |-ReferenceNode type=(type (alias boolean (native boolean)))
            |-QNameNode=boolean
              |-NameIdentifierNode="boolean"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-QNameNode=$a
                  |-NameIdentifierNode="$a"
              |-WasmAtomNode
                |-QNameNode=$b
                  |-NameIdentifierNode="$b"
    |-OverloadedFunctionNode type=(fun "!=" ((alias Node) (alias Node)) (alias boolean)) annotations=Injected
      |-NameIdentifierNode="!=" type=(fun "!=" ((alias Node) (alias Node)) (alias boolean))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "!=" ((alias Node) (alias Node)) (alias boolean)) annotations=IsOverloaded
          |-NameIdentifierNode="!="
          |-ParameterNode annotations=Local(a:Node#0)
            |-NameIdentifierNode="a" type=(alias Node (struct a:<null>))
            |-ReferenceNode type=(type (alias Node (struct a:<null>)))
              |-QNameNode=Node
                |-NameIdentifierNode="Node"
          |-ParameterNode annotations=Local(b:Node#1)
            |-NameIdentifierNode="b" type=(alias Node (struct a:<null>))
            |-ReferenceNode type=(type (alias Node (struct a:<null>)))
              |-QNameNode=Node
                |-NameIdentifierNode="Node"
          |-ReferenceNode type=(type (alias boolean (native boolean)))
            |-QNameNode=boolean
              |-NameIdentifierNode="boolean"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-QNameNode=$a
                  |-NameIdentifierNode="$a"
              |-WasmAtomNode
                |-QNameNode=$b
                  |-NameIdentifierNode="$b"
    |-OverloadedFunctionNode type=(intersection (fun "property_a" ((alias Node)) (union (alias Tree) (alias Forest))) (fun "property_a" ((alias Node) (union (alias Tree) (alias Forest))) (alias void))) annotations=Injected
      |-NameIdentifierNode="property_a" type=(intersection (fun "property_a" ((alias Node)) (union (alias Tree) (alias Forest))) (fun "property_a" ((alias Node) (union (alias Tree) (alias Forest))) (alias void)))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "property_a" ((alias Node)) (union (alias Tree) (alias Forest))) annotations=IsOverloaded
          |-NameIdentifierNode="property_a"
          |-ParameterNode annotations=Local(self:Node#0)
            |-NameIdentifierNode="self" type=(alias Node (struct a:<null>))
            |-ReferenceNode type=(type (alias Node (struct a:<null>)))
              |-QNameNode=Node
                |-NameIdentifierNode="Node"
          |-UnionTypeNode type=(type (union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>))))))
            |-ReferenceNode type=(type (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))))
              |-QNameNode=Tree
                |-NameIdentifierNode="Tree"
            |-ReferenceNode type=(type (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))))
              |-QNameNode=Forest
                |-NameIdentifierNode="Forest"
          |-FunctionCallNode=(fun "property$0" ((alias Node)) (union (alias Tree) (alias Forest))) type=(union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>))))) annotations=IsValueNode,IsReturnExpression
            |-ReferenceNode type=(intersection (fun "property$0" ((alias Node)) (union (alias Tree) (alias Forest))) (fun "property$0" ((alias Node) (union (alias Tree) (alias Forest))) (alias void)))
              |-QNameNode=property$0
                |-NameIdentifierNode="property$0"
            |-ReferenceNode type=(alias Node (struct a:<null>)) annotations=IsValueNode,Local(self:Node#0)
              |-QNameNode=self
                |-NameIdentifierNode="self"
      |-FunDirectiveNode
        |-FunctionNode type=(fun "property_a" ((alias Node) (union (alias Tree) (alias Forest))) (alias void)) annotations=IsOverloaded
          |-NameIdentifierNode="property_a"
          |-ParameterNode annotations=Local(self:Node#0)
            |-NameIdentifierNode="self" type=(alias Node (struct a:<null>))
            |-ReferenceNode type=(type (alias Node (struct a:<null>)))
              |-QNameNode=Node
                |-NameIdentifierNode="Node"
          |-ParameterNode annotations=Local(value:Tree | Forest#1)
            |-NameIdentifierNode="value" type=(union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))))
            |-UnionTypeNode type=(type (union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>))))))
              |-ReferenceNode type=(type (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))))
                |-QNameNode=Tree
                  |-NameIdentifierNode="Tree"
              |-ReferenceNode type=(type (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))))
                |-QNameNode=Forest
                  |-NameIdentifierNode="Forest"
          |-ReferenceNode type=(type (alias void (native void)))
            |-QNameNode=void
              |-NameIdentifierNode="void"
          |-FunctionCallNode=(fun "property$0" ((alias Node) (union (alias Tree) (alias Forest))) (alias void)) type=(alias void (native void))
            |-ReferenceNode type=(intersection (fun "property$0" ((alias Node)) (union (alias Tree) (alias Forest))) (fun "property$0" ((alias Node) (union (alias Tree) (alias Forest))) (alias void)))
              |-QNameNode=property$0
                |-NameIdentifierNode="property$0"
            |-ReferenceNode type=(alias Node (struct a:<null>)) annotations=IsValueNode,Local(self:Node#0)
              |-QNameNode=self
                |-NameIdentifierNode="self"
            |-ReferenceNode type=(union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>))))) annotations=IsValueNode,Local(value:Tree | Forest#1)
              |-QNameNode=value
                |-NameIdentifierNode="value"
    |-OverloadedFunctionNode type=(intersection (fun "property$0" ((alias Node)) (union (alias Tree) (alias Forest))) (fun "property$0" ((alias Node) (union (alias Tree) (alias Forest))) (alias void))) annotations=Injected
      |-NameIdentifierNode="property$0" type=(intersection (fun "property$0" ((alias Node)) (union (alias Tree) (alias Forest))) (fun "property$0" ((alias Node) (union (alias Tree) (alias Forest))) (alias void)))
      |-FunDirectiveNode
        |-DecoratorNode
          |-NameIdentifierNode="inline"
        |-FunctionNode type=(fun "property$0" ((alias Node)) (union (alias Tree) (alias Forest))) annotations=IsOverloaded
          |-NameIdentifierNode="property$0" annotations=Inline
          |-ParameterNode annotations=Local(self:Node#0)
            |-NameIdentifierNode="self" type=(alias Node (struct a:<null>))
            |-ReferenceNode type=(type (alias Node (struct a:<null>)))
              |-QNameNode=Node
                |-NameIdentifierNode="Node"
          |-UnionTypeNode type=(type (union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>))))))
            |-ReferenceNode type=(type (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))))
              |-QNameNode=Tree
                |-NameIdentifierNode="Tree"
            |-ReferenceNode type=(type (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))))
              |-QNameNode=Forest
                |-NameIdentifierNode="Forest"
          |-FunctionCallNode=(fun "loadPropertyWithOffset$0" ((alias Node) (alias u32)) (union (alias Tree) (alias Forest))) type=(union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>))))) annotations=IsValueNode,IsReturnExpression
            |-ReferenceNode type=(fun "loadPropertyWithOffset$0" ((alias Node) (alias u32)) (union (alias Tree) (alias Forest)))
              |-QNameNode=loadPropertyWithOffset$0
                |-NameIdentifierNode="loadPropertyWithOffset$0"
            |-ReferenceNode type=(alias Node (struct a:<null>)) annotations=IsValueNode,Local(self:Node#0)
              |-QNameNode=self
                |-NameIdentifierNode="self"
            |-MemberNode type=(native u32) annotations=IsValueNode
              |-ReferenceNode type=(type (alias Node (struct a:<null>)))
                |-QNameNode=Node
                  |-NameIdentifierNode="Node"
              |-NameIdentifierNode="property$0_offset"
      |-FunDirectiveNode
        |-DecoratorNode
          |-NameIdentifierNode="inline"
        |-FunctionNode type=(fun "property$0" ((alias Node) (union (alias Tree) (alias Forest))) (alias void)) annotations=IsOverloaded
          |-NameIdentifierNode="property$0" annotations=Inline
          |-ParameterNode annotations=Local(self:Node#0)
            |-NameIdentifierNode="self" type=(alias Node (struct a:<null>))
            |-ReferenceNode type=(type (alias Node (struct a:<null>)))
              |-QNameNode=Node
                |-NameIdentifierNode="Node"
          |-ParameterNode annotations=Local(value:Tree | Forest#1)
            |-NameIdentifierNode="value" type=(union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))))
            |-UnionTypeNode type=(type (union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>))))))
              |-ReferenceNode type=(type (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))))
                |-QNameNode=Tree
                  |-NameIdentifierNode="Tree"
              |-ReferenceNode type=(type (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))))
                |-QNameNode=Forest
                  |-NameIdentifierNode="Forest"
          |-ReferenceNode type=(type (alias void (native void)))
            |-QNameNode=void
              |-NameIdentifierNode="void"
          |-FunctionCallNode=(fun "storePropertyWithOffset$0" ((alias Node) (union (alias Tree) (alias Forest)) (alias u32)) (alias void)) type=(alias void (native void))
            |-ReferenceNode type=(fun "storePropertyWithOffset$0" ((alias Node) (union (alias Tree) (alias Forest)) (alias u32)) (alias void))
              |-QNameNode=storePropertyWithOffset$0
                |-NameIdentifierNode="storePropertyWithOffset$0"
            |-ReferenceNode type=(alias Node (struct a:<null>)) annotations=IsValueNode,Local(self:Node#0)
              |-QNameNode=self
                |-NameIdentifierNode="self"
            |-ReferenceNode type=(union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>))))) annotations=IsValueNode,Local(value:Tree | Forest#1)
              |-QNameNode=value
                |-NameIdentifierNode="value"
            |-MemberNode type=(native u32) annotations=IsValueNode
              |-ReferenceNode type=(type (alias Node (struct a:<null>)))
                |-QNameNode=Node
                  |-NameIdentifierNode="Node"
              |-NameIdentifierNode="property$0_offset"
    |-OverloadedFunctionNode type=(fun "loadPropertyWithOffset$0" ((alias Node) (alias u32)) (union (alias Tree) (alias Forest))) annotations=Injected
      |-NameIdentifierNode="loadPropertyWithOffset$0" type=(fun "loadPropertyWithOffset$0" ((alias Node) (alias u32)) (union (alias Tree) (alias Forest)))
      |-FunDirectiveNode
        |-DecoratorNode
          |-NameIdentifierNode="inline"
        |-FunctionNode type=(fun "loadPropertyWithOffset$0" ((alias Node) (alias u32)) (union (alias Tree) (alias Forest))) annotations=IsOverloaded
          |-NameIdentifierNode="loadPropertyWithOffset$0" annotations=Inline
          |-ParameterNode annotations=Local(self:Node#0)
            |-NameIdentifierNode="self" type=(alias Node (struct a:<null>))
            |-ReferenceNode type=(type (alias Node (struct a:<null>)))
              |-QNameNode=Node
                |-NameIdentifierNode="Node"
          |-ParameterNode annotations=Local(offset:u32#1)
            |-NameIdentifierNode="offset" type=(alias u32 (native u32))
            |-ReferenceNode type=(type (alias u32 (native u32)))
              |-QNameNode=u32
                |-NameIdentifierNode="u32"
          |-UnionTypeNode type=(type (union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>))))))
            |-ReferenceNode type=(type (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))))
              |-QNameNode=Tree
                |-NameIdentifierNode="Tree"
            |-ReferenceNode type=(type (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))))
              |-QNameNode=Forest
                |-NameIdentifierNode="Forest"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-WasmAtomNode
                  |-QNameNode=$offset
                    |-NameIdentifierNode="$offset"
                |-WasmAtomNode
                  |-ReferenceNode type=(fun "addressFromRef" ((alias ref)) (alias u32))
                    |-QNameNode=addressFromRef
                      |-NameIdentifierNode="addressFromRef"
                  |-WasmAtomNode
                    |-QNameNode=$self
                      |-NameIdentifierNode="$self"
    |-OverloadedFunctionNode type=(fun "storePropertyWithOffset$0" ((alias Node) (union (alias Tree) (alias Forest)) (alias u32)) (alias void)) annotations=Injected
      |-NameIdentifierNode="storePropertyWithOffset$0" type=(fun "storePropertyWithOffset$0" ((alias Node) (union (alias Tree) (alias Forest)) (alias u32)) (alias void))
      |-FunDirectiveNode
        |-DecoratorNode
          |-NameIdentifierNode="inline"
        |-FunctionNode type=(fun "storePropertyWithOffset$0" ((alias Node) (union (alias Tree) (alias Forest)) (alias u32)) (alias void)) annotations=IsOverloaded
          |-NameIdentifierNode="storePropertyWithOffset$0" annotations=Inline
          |-ParameterNode annotations=Local(self:Node#0)
            |-NameIdentifierNode="self" type=(alias Node (struct a:<null>))
            |-ReferenceNode type=(type (alias Node (struct a:<null>)))
              |-QNameNode=Node
                |-NameIdentifierNode="Node"
          |-ParameterNode annotations=Local(value:Tree | Forest#1)
            |-NameIdentifierNode="value" type=(union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))))
            |-UnionTypeNode type=(type (union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>))))))
              |-ReferenceNode type=(type (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))))
                |-QNameNode=Tree
                  |-NameIdentifierNode="Tree"
              |-ReferenceNode type=(type (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))))
                |-QNameNode=Forest
                  |-NameIdentifierNode="Forest"
          |-ParameterNode annotations=Local(offset:u32#2)
            |-NameIdentifierNode="offset" type=(alias u32 (native u32))
            |-ReferenceNode type=(type (alias u32 (native u32)))
              |-QNameNode=u32
                |-NameIdentifierNode="u32"
          |-ReferenceNode type=(type (alias void (native void)))
            |-QNameNode=void
              |-NameIdentifierNode="void"
          |-WasmExpressionNode type=(never)
            |-WasmAtomNode
              |-WasmAtomNode
                |-WasmAtomNode
                  |-QNameNode=$offset
                    |-NameIdentifierNode="$offset"
                |-WasmAtomNode
                  |-ReferenceNode type=(fun "addressFromRef" ((alias ref)) (alias u32))
                    |-QNameNode=addressFromRef
                      |-NameIdentifierNode="addressFromRef"
                  |-WasmAtomNode
                    |-QNameNode=$self
                      |-NameIdentifierNode="$self"
              |-WasmAtomNode
                |-QNameNode=$value
                  |-NameIdentifierNode="$value"
    |-OverloadedFunctionNode type=(fun "is" ((union (alias Node) (alias ref))) (alias boolean)) annotations=Injected
      |-NameIdentifierNode="is" type=(fun "is" ((union (alias Node) (alias ref))) (alias boolean))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "is" ((union (alias Node) (alias ref))) (alias boolean)) annotations=IsOverloaded
          |-NameIdentifierNode="is"
          |-ParameterNode annotations=Local(a:Node | ref#0)
            |-NameIdentifierNode="a" type=(union (alias Node (struct a:<null>)) (alias ref (ref ?)))
            |-UnionTypeNode type=(type (union (alias Node (struct a:<null>)) (alias ref (ref ?))))
              |-ReferenceNode type=(type (alias Node (struct a:<null>)))
                |-QNameNode=Node
                  |-NameIdentifierNode="Node"
              |-ReferenceNode type=(type (alias ref (ref ?)))
                |-QNameNode=ref
                  |-NameIdentifierNode="ref"
          |-ReferenceNode type=(type (alias boolean (native boolean)))
            |-QNameNode=boolean
              |-NameIdentifierNode="boolean"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-WasmAtomNode
                  |-HexLiteral=18446744069414584000
                |-WasmAtomNode
                  |-QNameNode=$a
                    |-NameIdentifierNode="$a"
              |-WasmAtomNode
                |-ReferenceNode type=(fun "Node$discriminant" () (alias u64))
                  |-QNameNode=Node$discriminant
                    |-NameIdentifierNode="Node$discriminant"
    |-OverloadedFunctionNode type=(fun "store" ((alias ref) (alias Node) (alias u32)) (alias void)) annotations=Injected
      |-NameIdentifierNode="store" type=(fun "store" ((alias ref) (alias Node) (alias u32)) (alias void))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "store" ((alias ref) (alias Node) (alias u32)) (alias void)) annotations=IsOverloaded
          |-NameIdentifierNode="store"
          |-ParameterNode annotations=Local(lhs:ref#0)
            |-NameIdentifierNode="lhs" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ParameterNode annotations=Local(rhs:Node#1)
            |-NameIdentifierNode="rhs" type=(alias Node (struct a:<null>))
            |-ReferenceNode type=(type (alias Node (struct a:<null>)))
              |-QNameNode=Node
                |-NameIdentifierNode="Node"
          |-ParameterNode annotations=Local(offset:u32#2)
            |-NameIdentifierNode="offset" type=(alias u32 (native u32))
            |-ReferenceNode type=(type (alias u32 (native u32)))
              |-QNameNode=u32
                |-NameIdentifierNode="u32"
          |-ReferenceNode type=(type (alias void (native void)))
            |-QNameNode=void
              |-NameIdentifierNode="void"
          |-WasmExpressionNode type=(never)
            |-WasmAtomNode
              |-WasmAtomNode
                |-WasmAtomNode
                  |-QNameNode=$offset
                    |-NameIdentifierNode="$offset"
                |-WasmAtomNode
                  |-ReferenceNode type=(fun "addressFromRef" ((alias ref)) (alias u32))
                    |-QNameNode=addressFromRef
                      |-NameIdentifierNode="addressFromRef"
                  |-WasmAtomNode
                    |-QNameNode=$lhs
                      |-NameIdentifierNode="$lhs"
              |-WasmAtomNode
                |-QNameNode=$rhs
                  |-NameIdentifierNode="$rhs"
    |-OverloadedFunctionNode type=(fun "load" ((alias ref) (alias u32)) (alias Node)) annotations=Injected
      |-NameIdentifierNode="load" type=(fun "load" ((alias ref) (alias u32)) (alias Node))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "load" ((alias ref) (alias u32)) (alias Node)) annotations=IsOverloaded
          |-NameIdentifierNode="load"
          |-ParameterNode annotations=Local(lhs:ref#0)
            |-NameIdentifierNode="lhs" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ParameterNode annotations=Local(offset:u32#1)
            |-NameIdentifierNode="offset" type=(alias u32 (native u32))
            |-ReferenceNode type=(type (alias u32 (native u32)))
              |-QNameNode=u32
                |-NameIdentifierNode="u32"
          |-ReferenceNode type=(type (alias Node (struct a:<null>)))
            |-QNameNode=Node
              |-NameIdentifierNode="Node"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-WasmAtomNode
                  |-QNameNode=$offset
                    |-NameIdentifierNode="$offset"
                |-WasmAtomNode
                  |-ReferenceNode type=(fun "addressFromRef" ((alias ref)) (alias u32))
                    |-QNameNode=addressFromRef
                      |-NameIdentifierNode="addressFromRef"
                  |-WasmAtomNode
                    |-QNameNode=$lhs
                      |-NameIdentifierNode="$lhs"
  |-TypeDirectiveNode annotations=Injected
    |-NameIdentifierNode="Empty" type=(type (alias Empty (struct)))
    |-StructTypeNode type=(type (alias Empty (struct)))
  |-TypeDirectiveNode annotations=Injected
    |-NameIdentifierNode="Node" type=(type (alias Node (struct a:<null>)))
    |-StructTypeNode type=(type (alias Node (struct a:<null>)))
      |-ParameterNode
        |-NameIdentifierNode="a"
        |-UnionTypeNode
          |-ReferenceNode
            |-QNameNode=Tree
              |-NameIdentifierNode="Tree"
          |-ReferenceNode
            |-QNameNode=Forest
              |-NameIdentifierNode="Forest"
  |-TypeDirectiveNode
    |-NameIdentifierNode="Forest" type=(type (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))))
    |-UnionTypeNode type=(type (union (alias Nil (struct)) (alias Cons (struct tree:<null>))))
      |-ReferenceNode type=(type (alias Nil (struct)))
        |-QNameNode=Nil
          |-NameIdentifierNode="Nil"
      |-ReferenceNode type=(type (alias Cons (struct tree:<null>)))
        |-QNameNode=Cons
          |-NameIdentifierNode="Cons"
  |-ImplDirective
    |-ReferenceNode
      |-QNameNode=Forest
        |-NameIdentifierNode="Forest"
    |-OverloadedFunctionNode type=(fun "is" ((union (alias Forest) (alias ref))) (alias boolean)) annotations=Injected
      |-NameIdentifierNode="is" type=(fun "is" ((union (alias Forest) (alias ref))) (alias boolean))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "is" ((union (alias Forest) (alias ref))) (alias boolean)) annotations=IsOverloaded
          |-NameIdentifierNode="is"
          |-ParameterNode annotations=Local(a:Forest | ref#0)
            |-NameIdentifierNode="a" type=(union (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))) (alias ref (ref ?)))
            |-UnionTypeNode type=(type (union (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))) (alias ref (ref ?))))
              |-ReferenceNode type=(type (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))))
                |-QNameNode=Forest
                  |-NameIdentifierNode="Forest"
              |-ReferenceNode type=(type (alias ref (ref ?)))
                |-QNameNode=ref
                  |-NameIdentifierNode="ref"
          |-ReferenceNode type=(type (alias boolean (native boolean)))
            |-QNameNode=boolean
              |-NameIdentifierNode="boolean"
          |-BlockNode type=(alias boolean (native boolean)) annotations=IsValueNode
            |-BinaryExpressionNode=(fun "||" ((alias boolean) (alias boolean)) (alias boolean)) type=(alias boolean (native boolean)) annotations=IsValueNode,IsReturnExpression
              |-IsExpressionNode=(fun "is" ((union (alias Nil) (alias ref))) (alias boolean)) type=(alias boolean (native boolean)) annotations=IsValueNode
                |-ReferenceNode type=(union (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))) (alias ref (ref ?))) annotations=IsValueNode,Local(a:Forest | ref#0)
                  |-QNameNode=a
                    |-NameIdentifierNode="a"
                |-ReferenceNode type=(type (alias Nil (struct)))
                  |-QNameNode=Nil
                    |-NameIdentifierNode="Nil"
              |-NameIdentifierNode="||"
              |-IsExpressionNode=(fun "is" ((union (alias Cons) (alias ref))) (alias boolean)) type=(alias boolean (native boolean)) annotations=IsValueNode
                |-ReferenceNode type=(union (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))) (alias ref (ref ?))) annotations=IsValueNode,Local(a:Forest | ref#0)
                  |-QNameNode=a
                    |-NameIdentifierNode="a"
                |-ReferenceNode type=(type (alias Cons (struct tree:<null>)))
                  |-QNameNode=Cons
                    |-NameIdentifierNode="Cons"
    |-OverloadedFunctionNode type=(fun "as" ((alias Forest)) (alias ref)) annotations=Injected
      |-NameIdentifierNode="as" type=(fun "as" ((alias Forest)) (alias ref))
      |-FunDirectiveNode
        |-DecoratorNode
          |-NameIdentifierNode="explicit"
        |-FunctionNode type=(fun "as" ((alias Forest)) (alias ref)) annotations=IsOverloaded
          |-NameIdentifierNode="as" annotations=Explicit
          |-ParameterNode annotations=Local(a:Forest#0)
            |-NameIdentifierNode="a" type=(alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>))))
            |-ReferenceNode type=(type (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))))
              |-QNameNode=Forest
                |-NameIdentifierNode="Forest"
          |-ReferenceNode type=(type (alias ref (ref ?)))
            |-QNameNode=ref
              |-NameIdentifierNode="ref"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-QNameNode=$a
                |-NameIdentifierNode="$a"
    |-OverloadedFunctionNode type=(fun "==" ((alias ref) (alias ref)) (alias boolean)) annotations=Injected
      |-NameIdentifierNode="==" type=(fun "==" ((alias ref) (alias ref)) (alias boolean))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "==" ((alias ref) (alias ref)) (alias boolean)) annotations=IsOverloaded
          |-NameIdentifierNode="=="
          |-ParameterNode annotations=Local(lhs:ref#0)
            |-NameIdentifierNode="lhs" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ParameterNode annotations=Local(rhs:ref#1)
            |-NameIdentifierNode="rhs" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ReferenceNode type=(type (alias boolean (native boolean)))
            |-QNameNode=boolean
              |-NameIdentifierNode="boolean"
          |-BinaryExpressionNode=(fun "==" ((alias ref) (alias ref)) (alias boolean)) type=(alias boolean (native boolean)) annotations=IsValueNode,IsReturnExpression
            |-ReferenceNode type=(alias ref (ref ?)) annotations=IsValueNode,Local(lhs:ref#0)
              |-QNameNode=lhs
                |-NameIdentifierNode="lhs"
            |-NameIdentifierNode="=="
            |-ReferenceNode type=(alias ref (ref ?)) annotations=IsValueNode,Local(rhs:ref#1)
              |-QNameNode=rhs
                |-NameIdentifierNode="rhs"
    |-OverloadedFunctionNode type=(fun "!=" ((alias ref) (alias ref)) (alias boolean)) annotations=Injected
      |-NameIdentifierNode="!=" type=(fun "!=" ((alias ref) (alias ref)) (alias boolean))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "!=" ((alias ref) (alias ref)) (alias boolean)) annotations=IsOverloaded
          |-NameIdentifierNode="!="
          |-ParameterNode annotations=Local(lhs:ref#0)
            |-NameIdentifierNode="lhs" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ParameterNode annotations=Local(rhs:ref#1)
            |-NameIdentifierNode="rhs" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ReferenceNode type=(type (alias boolean (native boolean)))
            |-QNameNode=boolean
              |-NameIdentifierNode="boolean"
          |-BinaryExpressionNode=(fun "!=" ((alias ref) (alias ref)) (alias boolean)) type=(alias boolean (native boolean)) annotations=IsValueNode,IsReturnExpression
            |-ReferenceNode type=(alias ref (ref ?)) annotations=IsValueNode,Local(lhs:ref#0)
              |-QNameNode=lhs
                |-NameIdentifierNode="lhs"
            |-NameIdentifierNode="!="
            |-ReferenceNode type=(alias ref (ref ?)) annotations=IsValueNode,Local(rhs:ref#1)
              |-QNameNode=rhs
                |-NameIdentifierNode="rhs"
    |-OverloadedFunctionNode type=(fun "store" ((alias ref) (alias Forest) (alias u32)) (alias void)) annotations=Injected
      |-NameIdentifierNode="store" type=(fun "store" ((alias ref) (alias Forest) (alias u32)) (alias void))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "store" ((alias ref) (alias Forest) (alias u32)) (alias void)) annotations=IsOverloaded
          |-NameIdentifierNode="store"
          |-ParameterNode annotations=Local(lhs:ref#0)
            |-NameIdentifierNode="lhs" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ParameterNode annotations=Local(rhs:Forest#1)
            |-NameIdentifierNode="rhs" type=(alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>))))
            |-ReferenceNode type=(type (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))))
              |-QNameNode=Forest
                |-NameIdentifierNode="Forest"
          |-ParameterNode annotations=Local(offset:u32#2)
            |-NameIdentifierNode="offset" type=(alias u32 (native u32))
            |-ReferenceNode type=(type (alias u32 (native u32)))
              |-QNameNode=u32
                |-NameIdentifierNode="u32"
          |-ReferenceNode type=(type (alias void (native void)))
            |-QNameNode=void
              |-NameIdentifierNode="void"
          |-WasmExpressionNode type=(never)
            |-WasmAtomNode
              |-WasmAtomNode
                |-WasmAtomNode
                  |-QNameNode=$offset
                    |-NameIdentifierNode="$offset"
                |-WasmAtomNode
                  |-ReferenceNode type=(fun "addressFromRef" ((alias ref)) (alias u32))
                    |-QNameNode=addressFromRef
                      |-NameIdentifierNode="addressFromRef"
                  |-WasmAtomNode
                    |-QNameNode=$lhs
                      |-NameIdentifierNode="$lhs"
              |-WasmAtomNode
                |-QNameNode=$rhs
                  |-NameIdentifierNode="$rhs"
    |-OverloadedFunctionNode type=(fun "load" ((alias ref) (alias u32)) (alias Forest)) annotations=Injected
      |-NameIdentifierNode="load" type=(fun "load" ((alias ref) (alias u32)) (alias Forest))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "load" ((alias ref) (alias u32)) (alias Forest)) annotations=IsOverloaded
          |-NameIdentifierNode="load"
          |-ParameterNode annotations=Local(lhs:ref#0)
            |-NameIdentifierNode="lhs" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ParameterNode annotations=Local(offset:u32#1)
            |-NameIdentifierNode="offset" type=(alias u32 (native u32))
            |-ReferenceNode type=(type (alias u32 (native u32)))
              |-QNameNode=u32
                |-NameIdentifierNode="u32"
          |-ReferenceNode type=(type (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))))
            |-QNameNode=Forest
              |-NameIdentifierNode="Forest"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-WasmAtomNode
                  |-QNameNode=$offset
                    |-NameIdentifierNode="$offset"
                |-WasmAtomNode
                  |-ReferenceNode type=(fun "addressFromRef" ((alias ref)) (alias u32))
                    |-QNameNode=addressFromRef
                      |-NameIdentifierNode="addressFromRef"
                  |-WasmAtomNode
                    |-QNameNode=$lhs
                      |-NameIdentifierNode="$lhs"
  |-ImplDirective
    |-ReferenceNode
      |-QNameNode=Nil
        |-NameIdentifierNode="Nil"
    |-OverloadedFunctionNode type=(intersection (fun "as" ((alias Nil)) (alias Forest)) (fun "as" ((alias Nil)) (alias ref))) annotations=Injected
      |-NameIdentifierNode="as" type=(intersection (fun "as" ((alias Nil)) (alias Forest)) (fun "as" ((alias Nil)) (alias ref)))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "as" ((alias Nil)) (alias Forest)) annotations=IsOverloaded
          |-NameIdentifierNode="as"
          |-ParameterNode annotations=Local(lhs:Nil#0)
            |-NameIdentifierNode="lhs" type=(alias Nil (struct))
            |-ReferenceNode type=(type (alias Nil (struct)))
              |-QNameNode=Nil
                |-NameIdentifierNode="Nil"
          |-ReferenceNode type=(type (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))))
            |-QNameNode=Forest
              |-NameIdentifierNode="Forest"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-QNameNode=$lhs
                |-NameIdentifierNode="$lhs"
      |-FunDirectiveNode
        |-DecoratorNode
          |-NameIdentifierNode="explicit"
        |-FunctionNode type=(fun "as" ((alias Nil)) (alias ref)) annotations=IsOverloaded
          |-NameIdentifierNode="as" annotations=Explicit
          |-ParameterNode annotations=Local(lhs:Nil#0)
            |-NameIdentifierNode="lhs" type=(alias Nil (struct))
            |-ReferenceNode type=(type (alias Nil (struct)))
              |-QNameNode=Nil
                |-NameIdentifierNode="Nil"
          |-ReferenceNode type=(type (alias ref (ref ?)))
            |-QNameNode=ref
              |-NameIdentifierNode="ref"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-QNameNode=$lhs
                |-NameIdentifierNode="$lhs"
    |-OverloadedFunctionNode type=(fun "Nil$discriminant" () (alias i64)) annotations=Injected
      |-NameIdentifierNode="Nil$discriminant" type=(fun "Nil$discriminant" () (alias i64))
      |-FunDirectiveNode
        |-DecoratorNode
          |-NameIdentifierNode="inline"
        |-FunctionNode type=(fun "Nil$discriminant" () (alias i64)) annotations=IsOverloaded
          |-NameIdentifierNode="Nil$discriminant" annotations=Inline
          |-ReferenceNode type=(type (alias i64 (native i64)))
            |-QNameNode=i64
              |-NameIdentifierNode="i64"
          |-BlockNode type=(alias i64 (native i64)) annotations=IsValueNode
            |-ValDeclarationNode type=(native void) annotations=Local(test::fixtures::execution::recursiveStruct::discriminant_6:u32#0)
              |-NameIdentifierNode="discriminant" type=(alias u32 (native u32))
              |-ReferenceNode type=(type (alias u32 (native u32)))
                |-QNameNode=u32
                  |-NameIdentifierNode="u32"
              |-MemberNode type=(native u32) annotations=IsValueNode
                |-ReferenceNode type=(type (alias Nil (struct)))
                  |-QNameNode=Nil
                    |-NameIdentifierNode="Nil"
                |-NameIdentifierNode="discriminant"
            |-BinaryExpressionNode=(fun "<<" ((alias i64) (alias i32)) (alias i64)) type=(alias i64 (native i64)) annotations=IsValueNode,IsReturnExpression
              |-AsExpressionNode=(fun "as" ((alias u32)) (alias i64)) type=(alias i64 (native i64)) annotations=IsValueNode
                |-ReferenceNode type=(alias u32 (native u32)) annotations=IsValueNode,Local(test::fixtures::execution::recursiveStruct::discriminant_6:u32#0)
                  |-QNameNode=discriminant
                    |-NameIdentifierNode="discriminant"
                |-ReferenceNode type=(type (alias i64 (native i64)))
                  |-QNameNode=i64
                    |-NameIdentifierNode="i64"
              |-NameIdentifierNode="<<"
              |-IntegerLiteral=32 type=(alias i32 (native i32)) annotations=IsValueNode
    |-OverloadedFunctionNode type=(fun "apply" () (alias Nil)) annotations=Injected
      |-NameIdentifierNode="apply" type=(fun "apply" () (alias Nil))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "apply" () (alias Nil)) annotations=IsOverloaded
          |-NameIdentifierNode="apply"
          |-ReferenceNode type=(type (alias Nil (struct)))
            |-QNameNode=Nil
              |-NameIdentifierNode="Nil"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-ReferenceNode type=(fun "Nil$discriminant" () (alias i64))
                |-QNameNode=Nil$discriminant
                  |-NameIdentifierNode="Nil$discriminant"
    |-OverloadedFunctionNode type=(fun "is" ((union (alias Nil) (alias ref))) (alias boolean)) annotations=Injected
      |-NameIdentifierNode="is" type=(fun "is" ((union (alias Nil) (alias ref))) (alias boolean))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "is" ((union (alias Nil) (alias ref))) (alias boolean)) annotations=IsOverloaded
          |-NameIdentifierNode="is"
          |-ParameterNode annotations=Local(a:Nil | ref#0)
            |-NameIdentifierNode="a" type=(union (alias Nil (struct)) (alias ref (ref ?)))
            |-UnionTypeNode type=(type (union (alias Nil (struct)) (alias ref (ref ?))))
              |-ReferenceNode type=(type (alias Nil (struct)))
                |-QNameNode=Nil
                  |-NameIdentifierNode="Nil"
              |-ReferenceNode type=(type (alias ref (ref ?)))
                |-QNameNode=ref
                  |-NameIdentifierNode="ref"
          |-ReferenceNode type=(type (alias boolean (native boolean)))
            |-QNameNode=boolean
              |-NameIdentifierNode="boolean"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-WasmAtomNode
                  |-HexLiteral=18446744069414584000
                |-WasmAtomNode
                  |-QNameNode=$a
                    |-NameIdentifierNode="$a"
              |-WasmAtomNode
                |-ReferenceNode type=(fun "Nil$discriminant" () (alias i64))
                  |-QNameNode=Nil$discriminant
                    |-NameIdentifierNode="Nil$discriminant"
    |-OverloadedFunctionNode type=(fun "==" ((alias Nil) (alias ref)) (alias boolean)) annotations=Injected
      |-NameIdentifierNode="==" type=(fun "==" ((alias Nil) (alias ref)) (alias boolean))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "==" ((alias Nil) (alias ref)) (alias boolean)) annotations=IsOverloaded
          |-NameIdentifierNode="=="
          |-ParameterNode annotations=Local(a:Nil#0)
            |-NameIdentifierNode="a" type=(alias Nil (struct))
            |-ReferenceNode type=(type (alias Nil (struct)))
              |-QNameNode=Nil
                |-NameIdentifierNode="Nil"
          |-ParameterNode annotations=Local(b:ref#1)
            |-NameIdentifierNode="b" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ReferenceNode type=(type (alias boolean (native boolean)))
            |-QNameNode=boolean
              |-NameIdentifierNode="boolean"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-QNameNode=$a
                  |-NameIdentifierNode="$a"
              |-WasmAtomNode
                |-QNameNode=$b
                  |-NameIdentifierNode="$b"
    |-OverloadedFunctionNode type=(fun "!=" ((alias Nil) (alias ref)) (alias boolean)) annotations=Injected
      |-NameIdentifierNode="!=" type=(fun "!=" ((alias Nil) (alias ref)) (alias boolean))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "!=" ((alias Nil) (alias ref)) (alias boolean)) annotations=IsOverloaded
          |-NameIdentifierNode="!="
          |-ParameterNode annotations=Local(a:Nil#0)
            |-NameIdentifierNode="a" type=(alias Nil (struct))
            |-ReferenceNode type=(type (alias Nil (struct)))
              |-QNameNode=Nil
                |-NameIdentifierNode="Nil"
          |-ParameterNode annotations=Local(b:ref#1)
            |-NameIdentifierNode="b" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ReferenceNode type=(type (alias boolean (native boolean)))
            |-QNameNode=boolean
              |-NameIdentifierNode="boolean"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-QNameNode=$a
                  |-NameIdentifierNode="$a"
              |-WasmAtomNode
                |-QNameNode=$b
                  |-NameIdentifierNode="$b"
    |-OverloadedFunctionNode type=(fun "store" ((alias ref) (alias Nil) (alias u32)) (alias void)) annotations=Injected
      |-NameIdentifierNode="store" type=(fun "store" ((alias ref) (alias Nil) (alias u32)) (alias void))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "store" ((alias ref) (alias Nil) (alias u32)) (alias void)) annotations=IsOverloaded
          |-NameIdentifierNode="store"
          |-ParameterNode annotations=Local(lhs:ref#0)
            |-NameIdentifierNode="lhs" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ParameterNode annotations=Local(rhs:Nil#1)
            |-NameIdentifierNode="rhs" type=(alias Nil (struct))
            |-ReferenceNode type=(type (alias Nil (struct)))
              |-QNameNode=Nil
                |-NameIdentifierNode="Nil"
          |-ParameterNode annotations=Local(offset:u32#2)
            |-NameIdentifierNode="offset" type=(alias u32 (native u32))
            |-ReferenceNode type=(type (alias u32 (native u32)))
              |-QNameNode=u32
                |-NameIdentifierNode="u32"
          |-ReferenceNode type=(type (alias void (native void)))
            |-QNameNode=void
              |-NameIdentifierNode="void"
          |-WasmExpressionNode type=(never)
            |-WasmAtomNode
              |-WasmAtomNode
                |-WasmAtomNode
                  |-QNameNode=$offset
                    |-NameIdentifierNode="$offset"
                |-WasmAtomNode
                  |-ReferenceNode type=(fun "addressFromRef" ((alias ref)) (alias u32))
                    |-QNameNode=addressFromRef
                      |-NameIdentifierNode="addressFromRef"
                  |-WasmAtomNode
                    |-QNameNode=$lhs
                      |-NameIdentifierNode="$lhs"
              |-WasmAtomNode
                |-QNameNode=$rhs
                  |-NameIdentifierNode="$rhs"
    |-OverloadedFunctionNode type=(fun "load" ((alias ref) (alias u32)) (alias Nil)) annotations=Injected
      |-NameIdentifierNode="load" type=(fun "load" ((alias ref) (alias u32)) (alias Nil))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "load" ((alias ref) (alias u32)) (alias Nil)) annotations=IsOverloaded
          |-NameIdentifierNode="load"
          |-ParameterNode annotations=Local(lhs:ref#0)
            |-NameIdentifierNode="lhs" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ParameterNode annotations=Local(offset:u32#1)
            |-NameIdentifierNode="offset" type=(alias u32 (native u32))
            |-ReferenceNode type=(type (alias u32 (native u32)))
              |-QNameNode=u32
                |-NameIdentifierNode="u32"
          |-ReferenceNode type=(type (alias Nil (struct)))
            |-QNameNode=Nil
              |-NameIdentifierNode="Nil"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-WasmAtomNode
                  |-QNameNode=$offset
                    |-NameIdentifierNode="$offset"
                |-WasmAtomNode
                  |-ReferenceNode type=(fun "addressFromRef" ((alias ref)) (alias u32))
                    |-QNameNode=addressFromRef
                      |-NameIdentifierNode="addressFromRef"
                  |-WasmAtomNode
                    |-QNameNode=$lhs
                      |-NameIdentifierNode="$lhs"
  |-ImplDirective
    |-ReferenceNode
      |-QNameNode=Cons
        |-NameIdentifierNode="Cons"
    |-OverloadedFunctionNode type=(intersection (fun "as" ((alias Cons)) (alias Forest)) (fun "as" ((alias Cons)) (alias ref))) annotations=Injected
      |-NameIdentifierNode="as" type=(intersection (fun "as" ((alias Cons)) (alias Forest)) (fun "as" ((alias Cons)) (alias ref)))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "as" ((alias Cons)) (alias Forest)) annotations=IsOverloaded
          |-NameIdentifierNode="as"
          |-ParameterNode annotations=Local(lhs:Cons#0)
            |-NameIdentifierNode="lhs" type=(alias Cons (struct tree:<null>))
            |-ReferenceNode type=(type (alias Cons (struct tree:<null>)))
              |-QNameNode=Cons
                |-NameIdentifierNode="Cons"
          |-ReferenceNode type=(type (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))))
            |-QNameNode=Forest
              |-NameIdentifierNode="Forest"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-QNameNode=$lhs
                |-NameIdentifierNode="$lhs"
      |-FunDirectiveNode
        |-DecoratorNode
          |-NameIdentifierNode="explicit"
        |-FunctionNode type=(fun "as" ((alias Cons)) (alias ref)) annotations=IsOverloaded
          |-NameIdentifierNode="as" annotations=Explicit
          |-ParameterNode annotations=Local(lhs:Cons#0)
            |-NameIdentifierNode="lhs" type=(alias Cons (struct tree:<null>))
            |-ReferenceNode type=(type (alias Cons (struct tree:<null>)))
              |-QNameNode=Cons
                |-NameIdentifierNode="Cons"
          |-ReferenceNode type=(type (alias ref (ref ?)))
            |-QNameNode=ref
              |-NameIdentifierNode="ref"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-QNameNode=$lhs
                |-NameIdentifierNode="$lhs"
    |-OverloadedFunctionNode type=(fun "Cons$discriminant" () (alias u64)) annotations=Injected
      |-NameIdentifierNode="Cons$discriminant" type=(fun "Cons$discriminant" () (alias u64))
      |-FunDirectiveNode
        |-DecoratorNode
          |-NameIdentifierNode="inline"
        |-FunctionNode type=(fun "Cons$discriminant" () (alias u64)) annotations=IsOverloaded
          |-NameIdentifierNode="Cons$discriminant" annotations=Inline
          |-ReferenceNode type=(type (alias u64 (native u64)))
            |-QNameNode=u64
              |-NameIdentifierNode="u64"
          |-BlockNode type=(alias u64 (native u64)) annotations=IsValueNode
            |-ValDeclarationNode type=(native void) annotations=Local(test::fixtures::execution::recursiveStruct::discriminant_9:u32#0)
              |-NameIdentifierNode="discriminant" type=(alias u32 (native u32))
              |-ReferenceNode type=(type (alias u32 (native u32)))
                |-QNameNode=u32
                  |-NameIdentifierNode="u32"
              |-MemberNode type=(native u32) annotations=IsValueNode
                |-ReferenceNode type=(type (alias Cons (struct tree:<null>)))
                  |-QNameNode=Cons
                    |-NameIdentifierNode="Cons"
                |-NameIdentifierNode="discriminant"
            |-BinaryExpressionNode=(fun "<<" ((alias u64) (alias i32)) (alias u64)) type=(alias u64 (native u64)) annotations=IsValueNode,IsReturnExpression
              |-AsExpressionNode=(fun "as" ((alias u32)) (alias u64)) type=(alias u64 (native u64)) annotations=IsValueNode
                |-ReferenceNode type=(alias u32 (native u32)) annotations=IsValueNode,Local(test::fixtures::execution::recursiveStruct::discriminant_9:u32#0)
                  |-QNameNode=discriminant
                    |-NameIdentifierNode="discriminant"
                |-ReferenceNode type=(type (alias u64 (native u64)))
                  |-QNameNode=u64
                    |-NameIdentifierNode="u64"
              |-NameIdentifierNode="<<"
              |-IntegerLiteral=32 type=(alias i32 (native i32)) annotations=IsValueNode
    |-OverloadedFunctionNode type=(fun "apply" ((union (alias Tree) (alias Forest))) (alias Cons)) annotations=Injected
      |-NameIdentifierNode="apply" type=(fun "apply" ((union (alias Tree) (alias Forest))) (alias Cons))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "apply" ((union (alias Tree) (alias Forest))) (alias Cons)) annotations=IsOverloaded
          |-NameIdentifierNode="apply"
          |-ParameterNode annotations=Local(tree:Tree | Forest#0)
            |-NameIdentifierNode="tree" type=(union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))))
            |-UnionTypeNode type=(type (union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>))))))
              |-ReferenceNode type=(type (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))))
                |-QNameNode=Tree
                  |-NameIdentifierNode="Tree"
              |-ReferenceNode type=(type (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))))
                |-QNameNode=Forest
                  |-NameIdentifierNode="Forest"
          |-ReferenceNode type=(type (alias Cons (struct tree:<null>)))
            |-QNameNode=Cons
              |-NameIdentifierNode="Cons"
          |-BlockNode type=(alias Cons (struct tree:<null>)) annotations=IsValueNode
            |-VarDeclarationNode type=(native void) annotations=Local(test::fixtures::execution::recursiveStruct::$ref_3:Cons#1)
              |-NameIdentifierNode="$ref" type=(alias Cons (struct tree:<null>))
              |-FunctionCallNode=(fun "fromPointer" ((alias u32)) (alias Cons)) type=(alias Cons (struct tree:<null>)) annotations=IsValueNode
                |-ReferenceNode type=(fun "fromPointer" ((alias u32)) (alias Cons))
                  |-QNameNode=fromPointer
                    |-NameIdentifierNode="fromPointer"
                |-FunctionCallNode=(fun "calloc" ((alias u32) (alias u32)) (alias u32)) type=(alias u32 (native u32)) annotations=IsValueNode
                  |-ReferenceNode type=(fun "calloc" ((alias u32) (alias u32)) (alias u32))
                    |-QNameNode=system::memory::calloc
                      |-NameIdentifierNode="system"
                      |-NameIdentifierNode="memory"
                      |-NameIdentifierNode="calloc"
                  |-AsExpressionNode=(fun "as" ((alias i32)) (alias u32)) type=(alias u32 (native u32)) annotations=IsValueNode
                    |-IntegerLiteral=1 type=(alias i32 (native i32)) annotations=IsValueNode
                    |-ReferenceNode type=(type (alias u32 (native u32)))
                      |-QNameNode=u32
                        |-NameIdentifierNode="u32"
                  |-MemberNode type=(native u32) annotations=IsValueNode
                    |-ReferenceNode type=(type (alias Cons (struct tree:<null>)))
                      |-QNameNode=Cons
                        |-NameIdentifierNode="Cons"
                    |-NameIdentifierNode="allocationSize"
            |-FunctionCallNode=(fun "property$0" ((alias Cons) (union (alias Tree) (alias Forest))) (alias void)) type=(alias void (native void))
              |-ReferenceNode type=(intersection (fun "property$0" ((alias Cons)) (union (alias Tree) (alias Forest))) (fun "property$0" ((alias Cons) (union (alias Tree) (alias Forest))) (alias void)))
                |-QNameNode=property$0
                  |-NameIdentifierNode="property$0"
              |-ReferenceNode type=(alias Cons (struct tree:<null>)) annotations=IsValueNode,Local(test::fixtures::execution::recursiveStruct::$ref_3:Cons#1)
                |-QNameNode=$ref
                  |-NameIdentifierNode="$ref"
              |-ReferenceNode type=(union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>))))) annotations=IsValueNode,Local(tree:Tree | Forest#0)
                |-QNameNode=tree
                  |-NameIdentifierNode="tree"
            |-ReferenceNode type=(alias Cons (struct tree:<null>)) annotations=IsValueNode,IsReturnExpression,Local(test::fixtures::execution::recursiveStruct::$ref_3:Cons#1)
              |-QNameNode=$ref
                |-NameIdentifierNode="$ref"
    |-OverloadedFunctionNode type=(fun "fromPointer" ((alias u32)) (alias Cons)) annotations=Injected
      |-NameIdentifierNode="fromPointer" type=(fun "fromPointer" ((alias u32)) (alias Cons))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "fromPointer" ((alias u32)) (alias Cons)) annotations=IsOverloaded
          |-NameIdentifierNode="fromPointer"
          |-ParameterNode annotations=Local(ptr:u32#0)
            |-NameIdentifierNode="ptr" type=(alias u32 (native u32))
            |-ReferenceNode type=(type (alias u32 (native u32)))
              |-QNameNode=u32
                |-NameIdentifierNode="u32"
          |-ReferenceNode type=(type (alias Cons (struct tree:<null>)))
            |-QNameNode=Cons
              |-NameIdentifierNode="Cons"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-ReferenceNode type=(fun "Cons$discriminant" () (alias u64))
                  |-QNameNode=Cons$discriminant
                    |-NameIdentifierNode="Cons$discriminant"
              |-WasmAtomNode
                |-WasmAtomNode
                  |-QNameNode=$ptr
                    |-NameIdentifierNode="$ptr"
    |-OverloadedFunctionNode type=(fun "==" ((alias Cons) (alias Cons)) (alias boolean)) annotations=Injected
      |-NameIdentifierNode="==" type=(fun "==" ((alias Cons) (alias Cons)) (alias boolean))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "==" ((alias Cons) (alias Cons)) (alias boolean)) annotations=IsOverloaded
          |-NameIdentifierNode="=="
          |-ParameterNode annotations=Local(a:Cons#0)
            |-NameIdentifierNode="a" type=(alias Cons (struct tree:<null>))
            |-ReferenceNode type=(type (alias Cons (struct tree:<null>)))
              |-QNameNode=Cons
                |-NameIdentifierNode="Cons"
          |-ParameterNode annotations=Local(b:Cons#1)
            |-NameIdentifierNode="b" type=(alias Cons (struct tree:<null>))
            |-ReferenceNode type=(type (alias Cons (struct tree:<null>)))
              |-QNameNode=Cons
                |-NameIdentifierNode="Cons"
          |-ReferenceNode type=(type (alias boolean (native boolean)))
            |-QNameNode=boolean
              |-NameIdentifierNode="boolean"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-QNameNode=$a
                  |-NameIdentifierNode="$a"
              |-WasmAtomNode
                |-QNameNode=$b
                  |-NameIdentifierNode="$b"
    |-OverloadedFunctionNode type=(fun "!=" ((alias Cons) (alias Cons)) (alias boolean)) annotations=Injected
      |-NameIdentifierNode="!=" type=(fun "!=" ((alias Cons) (alias Cons)) (alias boolean))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "!=" ((alias Cons) (alias Cons)) (alias boolean)) annotations=IsOverloaded
          |-NameIdentifierNode="!="
          |-ParameterNode annotations=Local(a:Cons#0)
            |-NameIdentifierNode="a" type=(alias Cons (struct tree:<null>))
            |-ReferenceNode type=(type (alias Cons (struct tree:<null>)))
              |-QNameNode=Cons
                |-NameIdentifierNode="Cons"
          |-ParameterNode annotations=Local(b:Cons#1)
            |-NameIdentifierNode="b" type=(alias Cons (struct tree:<null>))
            |-ReferenceNode type=(type (alias Cons (struct tree:<null>)))
              |-QNameNode=Cons
                |-NameIdentifierNode="Cons"
          |-ReferenceNode type=(type (alias boolean (native boolean)))
            |-QNameNode=boolean
              |-NameIdentifierNode="boolean"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-QNameNode=$a
                  |-NameIdentifierNode="$a"
              |-WasmAtomNode
                |-QNameNode=$b
                  |-NameIdentifierNode="$b"
    |-OverloadedFunctionNode type=(intersection (fun "property_tree" ((alias Cons)) (union (alias Tree) (alias Forest))) (fun "property_tree" ((alias Cons) (union (alias Tree) (alias Forest))) (alias void))) annotations=Injected
      |-NameIdentifierNode="property_tree" type=(intersection (fun "property_tree" ((alias Cons)) (union (alias Tree) (alias Forest))) (fun "property_tree" ((alias Cons) (union (alias Tree) (alias Forest))) (alias void)))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "property_tree" ((alias Cons)) (union (alias Tree) (alias Forest))) annotations=IsOverloaded
          |-NameIdentifierNode="property_tree"
          |-ParameterNode annotations=Local(self:Cons#0)
            |-NameIdentifierNode="self" type=(alias Cons (struct tree:<null>))
            |-ReferenceNode type=(type (alias Cons (struct tree:<null>)))
              |-QNameNode=Cons
                |-NameIdentifierNode="Cons"
          |-UnionTypeNode type=(type (union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>))))))
            |-ReferenceNode type=(type (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))))
              |-QNameNode=Tree
                |-NameIdentifierNode="Tree"
            |-ReferenceNode type=(type (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))))
              |-QNameNode=Forest
                |-NameIdentifierNode="Forest"
          |-FunctionCallNode=(fun "property$0" ((alias Cons)) (union (alias Tree) (alias Forest))) type=(union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>))))) annotations=IsValueNode,IsReturnExpression
            |-ReferenceNode type=(intersection (fun "property$0" ((alias Cons)) (union (alias Tree) (alias Forest))) (fun "property$0" ((alias Cons) (union (alias Tree) (alias Forest))) (alias void)))
              |-QNameNode=property$0
                |-NameIdentifierNode="property$0"
            |-ReferenceNode type=(alias Cons (struct tree:<null>)) annotations=IsValueNode,Local(self:Cons#0)
              |-QNameNode=self
                |-NameIdentifierNode="self"
      |-FunDirectiveNode
        |-FunctionNode type=(fun "property_tree" ((alias Cons) (union (alias Tree) (alias Forest))) (alias void)) annotations=IsOverloaded
          |-NameIdentifierNode="property_tree"
          |-ParameterNode annotations=Local(self:Cons#0)
            |-NameIdentifierNode="self" type=(alias Cons (struct tree:<null>))
            |-ReferenceNode type=(type (alias Cons (struct tree:<null>)))
              |-QNameNode=Cons
                |-NameIdentifierNode="Cons"
          |-ParameterNode annotations=Local(value:Tree | Forest#1)
            |-NameIdentifierNode="value" type=(union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))))
            |-UnionTypeNode type=(type (union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>))))))
              |-ReferenceNode type=(type (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))))
                |-QNameNode=Tree
                  |-NameIdentifierNode="Tree"
              |-ReferenceNode type=(type (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))))
                |-QNameNode=Forest
                  |-NameIdentifierNode="Forest"
          |-ReferenceNode type=(type (alias void (native void)))
            |-QNameNode=void
              |-NameIdentifierNode="void"
          |-FunctionCallNode=(fun "property$0" ((alias Cons) (union (alias Tree) (alias Forest))) (alias void)) type=(alias void (native void))
            |-ReferenceNode type=(intersection (fun "property$0" ((alias Cons)) (union (alias Tree) (alias Forest))) (fun "property$0" ((alias Cons) (union (alias Tree) (alias Forest))) (alias void)))
              |-QNameNode=property$0
                |-NameIdentifierNode="property$0"
            |-ReferenceNode type=(alias Cons (struct tree:<null>)) annotations=IsValueNode,Local(self:Cons#0)
              |-QNameNode=self
                |-NameIdentifierNode="self"
            |-ReferenceNode type=(union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>))))) annotations=IsValueNode,Local(value:Tree | Forest#1)
              |-QNameNode=value
                |-NameIdentifierNode="value"
    |-OverloadedFunctionNode type=(intersection (fun "property$0" ((alias Cons)) (union (alias Tree) (alias Forest))) (fun "property$0" ((alias Cons) (union (alias Tree) (alias Forest))) (alias void))) annotations=Injected
      |-NameIdentifierNode="property$0" type=(intersection (fun "property$0" ((alias Cons)) (union (alias Tree) (alias Forest))) (fun "property$0" ((alias Cons) (union (alias Tree) (alias Forest))) (alias void)))
      |-FunDirectiveNode
        |-DecoratorNode
          |-NameIdentifierNode="inline"
        |-FunctionNode type=(fun "property$0" ((alias Cons)) (union (alias Tree) (alias Forest))) annotations=IsOverloaded
          |-NameIdentifierNode="property$0" annotations=Inline
          |-ParameterNode annotations=Local(self:Cons#0)
            |-NameIdentifierNode="self" type=(alias Cons (struct tree:<null>))
            |-ReferenceNode type=(type (alias Cons (struct tree:<null>)))
              |-QNameNode=Cons
                |-NameIdentifierNode="Cons"
          |-UnionTypeNode type=(type (union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>))))))
            |-ReferenceNode type=(type (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))))
              |-QNameNode=Tree
                |-NameIdentifierNode="Tree"
            |-ReferenceNode type=(type (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))))
              |-QNameNode=Forest
                |-NameIdentifierNode="Forest"
          |-FunctionCallNode=(fun "loadPropertyWithOffset$0" ((alias Cons) (alias u32)) (union (alias Tree) (alias Forest))) type=(union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>))))) annotations=IsValueNode,IsReturnExpression
            |-ReferenceNode type=(fun "loadPropertyWithOffset$0" ((alias Cons) (alias u32)) (union (alias Tree) (alias Forest)))
              |-QNameNode=loadPropertyWithOffset$0
                |-NameIdentifierNode="loadPropertyWithOffset$0"
            |-ReferenceNode type=(alias Cons (struct tree:<null>)) annotations=IsValueNode,Local(self:Cons#0)
              |-QNameNode=self
                |-NameIdentifierNode="self"
            |-MemberNode type=(native u32) annotations=IsValueNode
              |-ReferenceNode type=(type (alias Cons (struct tree:<null>)))
                |-QNameNode=Cons
                  |-NameIdentifierNode="Cons"
              |-NameIdentifierNode="property$0_offset"
      |-FunDirectiveNode
        |-DecoratorNode
          |-NameIdentifierNode="inline"
        |-FunctionNode type=(fun "property$0" ((alias Cons) (union (alias Tree) (alias Forest))) (alias void)) annotations=IsOverloaded
          |-NameIdentifierNode="property$0" annotations=Inline
          |-ParameterNode annotations=Local(self:Cons#0)
            |-NameIdentifierNode="self" type=(alias Cons (struct tree:<null>))
            |-ReferenceNode type=(type (alias Cons (struct tree:<null>)))
              |-QNameNode=Cons
                |-NameIdentifierNode="Cons"
          |-ParameterNode annotations=Local(value:Tree | Forest#1)
            |-NameIdentifierNode="value" type=(union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))))
            |-UnionTypeNode type=(type (union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>))))))
              |-ReferenceNode type=(type (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))))
                |-QNameNode=Tree
                  |-NameIdentifierNode="Tree"
              |-ReferenceNode type=(type (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))))
                |-QNameNode=Forest
                  |-NameIdentifierNode="Forest"
          |-ReferenceNode type=(type (alias void (native void)))
            |-QNameNode=void
              |-NameIdentifierNode="void"
          |-FunctionCallNode=(fun "storePropertyWithOffset$0" ((alias Cons) (union (alias Tree) (alias Forest)) (alias u32)) (alias void)) type=(alias void (native void))
            |-ReferenceNode type=(fun "storePropertyWithOffset$0" ((alias Cons) (union (alias Tree) (alias Forest)) (alias u32)) (alias void))
              |-QNameNode=storePropertyWithOffset$0
                |-NameIdentifierNode="storePropertyWithOffset$0"
            |-ReferenceNode type=(alias Cons (struct tree:<null>)) annotations=IsValueNode,Local(self:Cons#0)
              |-QNameNode=self
                |-NameIdentifierNode="self"
            |-ReferenceNode type=(union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>))))) annotations=IsValueNode,Local(value:Tree | Forest#1)
              |-QNameNode=value
                |-NameIdentifierNode="value"
            |-MemberNode type=(native u32) annotations=IsValueNode
              |-ReferenceNode type=(type (alias Cons (struct tree:<null>)))
                |-QNameNode=Cons
                  |-NameIdentifierNode="Cons"
              |-NameIdentifierNode="property$0_offset"
    |-OverloadedFunctionNode type=(fun "loadPropertyWithOffset$0" ((alias Cons) (alias u32)) (union (alias Tree) (alias Forest))) annotations=Injected
      |-NameIdentifierNode="loadPropertyWithOffset$0" type=(fun "loadPropertyWithOffset$0" ((alias Cons) (alias u32)) (union (alias Tree) (alias Forest)))
      |-FunDirectiveNode
        |-DecoratorNode
          |-NameIdentifierNode="inline"
        |-FunctionNode type=(fun "loadPropertyWithOffset$0" ((alias Cons) (alias u32)) (union (alias Tree) (alias Forest))) annotations=IsOverloaded
          |-NameIdentifierNode="loadPropertyWithOffset$0" annotations=Inline
          |-ParameterNode annotations=Local(self:Cons#0)
            |-NameIdentifierNode="self" type=(alias Cons (struct tree:<null>))
            |-ReferenceNode type=(type (alias Cons (struct tree:<null>)))
              |-QNameNode=Cons
                |-NameIdentifierNode="Cons"
          |-ParameterNode annotations=Local(offset:u32#1)
            |-NameIdentifierNode="offset" type=(alias u32 (native u32))
            |-ReferenceNode type=(type (alias u32 (native u32)))
              |-QNameNode=u32
                |-NameIdentifierNode="u32"
          |-UnionTypeNode type=(type (union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>))))))
            |-ReferenceNode type=(type (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))))
              |-QNameNode=Tree
                |-NameIdentifierNode="Tree"
            |-ReferenceNode type=(type (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))))
              |-QNameNode=Forest
                |-NameIdentifierNode="Forest"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-WasmAtomNode
                  |-QNameNode=$offset
                    |-NameIdentifierNode="$offset"
                |-WasmAtomNode
                  |-ReferenceNode type=(fun "addressFromRef" ((alias ref)) (alias u32))
                    |-QNameNode=addressFromRef
                      |-NameIdentifierNode="addressFromRef"
                  |-WasmAtomNode
                    |-QNameNode=$self
                      |-NameIdentifierNode="$self"
    |-OverloadedFunctionNode type=(fun "storePropertyWithOffset$0" ((alias Cons) (union (alias Tree) (alias Forest)) (alias u32)) (alias void)) annotations=Injected
      |-NameIdentifierNode="storePropertyWithOffset$0" type=(fun "storePropertyWithOffset$0" ((alias Cons) (union (alias Tree) (alias Forest)) (alias u32)) (alias void))
      |-FunDirectiveNode
        |-DecoratorNode
          |-NameIdentifierNode="inline"
        |-FunctionNode type=(fun "storePropertyWithOffset$0" ((alias Cons) (union (alias Tree) (alias Forest)) (alias u32)) (alias void)) annotations=IsOverloaded
          |-NameIdentifierNode="storePropertyWithOffset$0" annotations=Inline
          |-ParameterNode annotations=Local(self:Cons#0)
            |-NameIdentifierNode="self" type=(alias Cons (struct tree:<null>))
            |-ReferenceNode type=(type (alias Cons (struct tree:<null>)))
              |-QNameNode=Cons
                |-NameIdentifierNode="Cons"
          |-ParameterNode annotations=Local(value:Tree | Forest#1)
            |-NameIdentifierNode="value" type=(union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))))
            |-UnionTypeNode type=(type (union (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))) (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>))))))
              |-ReferenceNode type=(type (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))))
                |-QNameNode=Tree
                  |-NameIdentifierNode="Tree"
              |-ReferenceNode type=(type (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))))
                |-QNameNode=Forest
                  |-NameIdentifierNode="Forest"
          |-ParameterNode annotations=Local(offset:u32#2)
            |-NameIdentifierNode="offset" type=(alias u32 (native u32))
            |-ReferenceNode type=(type (alias u32 (native u32)))
              |-QNameNode=u32
                |-NameIdentifierNode="u32"
          |-ReferenceNode type=(type (alias void (native void)))
            |-QNameNode=void
              |-NameIdentifierNode="void"
          |-WasmExpressionNode type=(never)
            |-WasmAtomNode
              |-WasmAtomNode
                |-WasmAtomNode
                  |-QNameNode=$offset
                    |-NameIdentifierNode="$offset"
                |-WasmAtomNode
                  |-ReferenceNode type=(fun "addressFromRef" ((alias ref)) (alias u32))
                    |-QNameNode=addressFromRef
                      |-NameIdentifierNode="addressFromRef"
                  |-WasmAtomNode
                    |-QNameNode=$self
                      |-NameIdentifierNode="$self"
              |-WasmAtomNode
                |-QNameNode=$value
                  |-NameIdentifierNode="$value"
    |-OverloadedFunctionNode type=(fun "is" ((union (alias Cons) (alias ref))) (alias boolean)) annotations=Injected
      |-NameIdentifierNode="is" type=(fun "is" ((union (alias Cons) (alias ref))) (alias boolean))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "is" ((union (alias Cons) (alias ref))) (alias boolean)) annotations=IsOverloaded
          |-NameIdentifierNode="is"
          |-ParameterNode annotations=Local(a:Cons | ref#0)
            |-NameIdentifierNode="a" type=(union (alias Cons (struct tree:<null>)) (alias ref (ref ?)))
            |-UnionTypeNode type=(type (union (alias Cons (struct tree:<null>)) (alias ref (ref ?))))
              |-ReferenceNode type=(type (alias Cons (struct tree:<null>)))
                |-QNameNode=Cons
                  |-NameIdentifierNode="Cons"
              |-ReferenceNode type=(type (alias ref (ref ?)))
                |-QNameNode=ref
                  |-NameIdentifierNode="ref"
          |-ReferenceNode type=(type (alias boolean (native boolean)))
            |-QNameNode=boolean
              |-NameIdentifierNode="boolean"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-WasmAtomNode
                  |-HexLiteral=18446744069414584000
                |-WasmAtomNode
                  |-QNameNode=$a
                    |-NameIdentifierNode="$a"
              |-WasmAtomNode
                |-ReferenceNode type=(fun "Cons$discriminant" () (alias u64))
                  |-QNameNode=Cons$discriminant
                    |-NameIdentifierNode="Cons$discriminant"
    |-OverloadedFunctionNode type=(fun "store" ((alias ref) (alias Cons) (alias u32)) (alias void)) annotations=Injected
      |-NameIdentifierNode="store" type=(fun "store" ((alias ref) (alias Cons) (alias u32)) (alias void))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "store" ((alias ref) (alias Cons) (alias u32)) (alias void)) annotations=IsOverloaded
          |-NameIdentifierNode="store"
          |-ParameterNode annotations=Local(lhs:ref#0)
            |-NameIdentifierNode="lhs" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ParameterNode annotations=Local(rhs:Cons#1)
            |-NameIdentifierNode="rhs" type=(alias Cons (struct tree:<null>))
            |-ReferenceNode type=(type (alias Cons (struct tree:<null>)))
              |-QNameNode=Cons
                |-NameIdentifierNode="Cons"
          |-ParameterNode annotations=Local(offset:u32#2)
            |-NameIdentifierNode="offset" type=(alias u32 (native u32))
            |-ReferenceNode type=(type (alias u32 (native u32)))
              |-QNameNode=u32
                |-NameIdentifierNode="u32"
          |-ReferenceNode type=(type (alias void (native void)))
            |-QNameNode=void
              |-NameIdentifierNode="void"
          |-WasmExpressionNode type=(never)
            |-WasmAtomNode
              |-WasmAtomNode
                |-WasmAtomNode
                  |-QNameNode=$offset
                    |-NameIdentifierNode="$offset"
                |-WasmAtomNode
                  |-ReferenceNode type=(fun "addressFromRef" ((alias ref)) (alias u32))
                    |-QNameNode=addressFromRef
                      |-NameIdentifierNode="addressFromRef"
                  |-WasmAtomNode
                    |-QNameNode=$lhs
                      |-NameIdentifierNode="$lhs"
              |-WasmAtomNode
                |-QNameNode=$rhs
                  |-NameIdentifierNode="$rhs"
    |-OverloadedFunctionNode type=(fun "load" ((alias ref) (alias u32)) (alias Cons)) annotations=Injected
      |-NameIdentifierNode="load" type=(fun "load" ((alias ref) (alias u32)) (alias Cons))
      |-FunDirectiveNode
        |-FunctionNode type=(fun "load" ((alias ref) (alias u32)) (alias Cons)) annotations=IsOverloaded
          |-NameIdentifierNode="load"
          |-ParameterNode annotations=Local(lhs:ref#0)
            |-NameIdentifierNode="lhs" type=(alias ref (ref ?))
            |-ReferenceNode type=(type (alias ref (ref ?)))
              |-QNameNode=ref
                |-NameIdentifierNode="ref"
          |-ParameterNode annotations=Local(offset:u32#1)
            |-NameIdentifierNode="offset" type=(alias u32 (native u32))
            |-ReferenceNode type=(type (alias u32 (native u32)))
              |-QNameNode=u32
                |-NameIdentifierNode="u32"
          |-ReferenceNode type=(type (alias Cons (struct tree:<null>)))
            |-QNameNode=Cons
              |-NameIdentifierNode="Cons"
          |-WasmExpressionNode type=(never) annotations=IsValueNode,IsReturnExpression
            |-WasmAtomNode
              |-WasmAtomNode
                |-WasmAtomNode
                  |-QNameNode=$offset
                    |-NameIdentifierNode="$offset"
                |-WasmAtomNode
                  |-ReferenceNode type=(fun "addressFromRef" ((alias ref)) (alias u32))
                    |-QNameNode=addressFromRef
                      |-NameIdentifierNode="addressFromRef"
                  |-WasmAtomNode
                    |-QNameNode=$lhs
                      |-NameIdentifierNode="$lhs"
  |-TypeDirectiveNode annotations=Injected
    |-NameIdentifierNode="Nil" type=(type (alias Nil (struct)))
    |-StructTypeNode type=(type (alias Nil (struct)))
  |-TypeDirectiveNode annotations=Injected
    |-NameIdentifierNode="Cons" type=(type (alias Cons (struct tree:<null>)))
    |-StructTypeNode type=(type (alias Cons (struct tree:<null>)))
      |-ParameterNode
        |-NameIdentifierNode="tree"
        |-UnionTypeNode
          |-ReferenceNode
            |-QNameNode=Tree
              |-NameIdentifierNode="Tree"
          |-ReferenceNode
            |-QNameNode=Forest
              |-NameIdentifierNode="Forest"
  |-OverloadedFunctionNode type=(fun "main" () (alias void)) annotations=Injected
    |-NameIdentifierNode="main" type=(fun "main" () (alias void))
    |-FunDirectiveNode
      |-DecoratorNode
        |-NameIdentifierNode="export"
      |-FunctionNode type=(fun "main" () (alias void)) annotations=IsOverloaded
        |-NameIdentifierNode="main" annotations=Export
        |-ReferenceNode type=(type (alias void (native void)))
          |-QNameNode=void
            |-NameIdentifierNode="void"
        |-BlockNode type=(native void)
          |-FunctionCallNode=(fun "START" ((alias bytes)) (alias void)) type=(alias void (native void))
            |-ReferenceNode type=(intersection (fun "START" ((alias u32)) (alias void)) (fun "START" ((alias bytes)) (alias void)))
              |-QNameNode=START
                |-NameIdentifierNode="START"
            |-StringLiteral="Forest & Tree tests" type=(alias bytes (native bytes)) annotations=IsValueNode
          |-VarDeclarationNode type=(native void) annotations=Local(test::fixtures::execution::recursiveStruct::a_6:Nil#0)
            |-NameIdentifierNode="a" type=(alias Nil (struct))
            |-ReferenceNode type=(alias Nil (struct)) annotations=IsValueNode,ImplicitCall(fun "apply" () (alias Nil))
              |-QNameNode=Nil
                |-NameIdentifierNode="Nil"
          |-VarDeclarationNode type=(native void) annotations=Local(test::fixtures::execution::recursiveStruct::b:Cons#1)
            |-NameIdentifierNode="b" type=(alias Cons (struct tree:<null>))
            |-FunctionCallNode=(fun "apply" ((union (alias Tree) (alias Forest))) (alias Cons)) type=(alias Cons (struct tree:<null>)) annotations=IsValueNode
              |-MemberNode type=(fun "apply" ((union (alias Tree) (alias Forest))) (alias Cons))
                |-ReferenceNode type=(type (alias Cons (struct tree:<null>)))
                  |-QNameNode=Cons
                    |-NameIdentifierNode="Cons"
                |-NameIdentifierNode="apply"
              |-ReferenceNode type=(alias Empty (struct)) annotations=IsValueNode,ImplicitCall(fun "apply" () (alias Empty))
                |-QNameNode=Empty
                  |-NameIdentifierNode="Empty"
          |-VarDeclarationNode type=(native void) annotations=Local(test::fixtures::execution::recursiveStruct::c:Cons#2)
            |-NameIdentifierNode="c" type=(alias Cons (struct tree:<null>))
            |-FunctionCallNode=(fun "apply" ((union (alias Tree) (alias Forest))) (alias Cons)) type=(alias Cons (struct tree:<null>)) annotations=IsValueNode
              |-MemberNode type=(fun "apply" ((union (alias Tree) (alias Forest))) (alias Cons))
                |-ReferenceNode type=(type (alias Cons (struct tree:<null>)))
                  |-QNameNode=Cons
                    |-NameIdentifierNode="Cons"
                |-NameIdentifierNode="apply"
              |-ReferenceNode type=(alias Nil (struct)) annotations=IsValueNode,ImplicitCall(fun "apply" () (alias Nil))
                |-QNameNode=Nil
                  |-NameIdentifierNode="Nil"
          |-VarDeclarationNode type=(native void) annotations=Local(test::fixtures::execution::recursiveStruct::d:Cons#3)
            |-NameIdentifierNode="d" type=(alias Cons (struct tree:<null>))
            |-FunctionCallNode=(fun "apply" ((union (alias Tree) (alias Forest))) (alias Cons)) type=(alias Cons (struct tree:<null>)) annotations=IsValueNode
              |-MemberNode type=(fun "apply" ((union (alias Tree) (alias Forest))) (alias Cons))
                |-ReferenceNode type=(type (alias Cons (struct tree:<null>)))
                  |-QNameNode=Cons
                    |-NameIdentifierNode="Cons"
                |-NameIdentifierNode="apply"
              |-FunctionCallNode=(fun "apply" ((union (alias Tree) (alias Forest))) (alias Node)) type=(alias Node (struct a:<null>)) annotations=IsValueNode
                |-MemberNode type=(fun "apply" ((union (alias Tree) (alias Forest))) (alias Node))
                  |-ReferenceNode type=(type (alias Node (struct a:<null>)))
                    |-QNameNode=Node
                      |-NameIdentifierNode="Node"
                  |-NameIdentifierNode="apply"
                |-ReferenceNode type=(alias Empty (struct)) annotations=IsValueNode,ImplicitCall(fun "apply" () (alias Empty))
                  |-QNameNode=Empty
                    |-NameIdentifierNode="Empty"
          |-VarDeclarationNode type=(native void) annotations=Local(test::fixtures::execution::recursiveStruct::e:Node#4)
            |-NameIdentifierNode="e" type=(alias Node (struct a:<null>))
            |-FunctionCallNode=(fun "apply" ((union (alias Tree) (alias Forest))) (alias Node)) type=(alias Node (struct a:<null>)) annotations=IsValueNode
              |-MemberNode type=(fun "apply" ((union (alias Tree) (alias Forest))) (alias Node))
                |-ReferenceNode type=(type (alias Node (struct a:<null>)))
                  |-QNameNode=Node
                    |-NameIdentifierNode="Node"
                |-NameIdentifierNode="apply"
              |-ReferenceNode type=(alias Nil (struct)) annotations=IsValueNode,ImplicitCall(fun "apply" () (alias Nil))
                |-QNameNode=Nil
                  |-NameIdentifierNode="Nil"
          |-FunctionCallNode=(fun "verify" ((alias boolean) (alias bytes)) (alias void)) type=(alias void (native void))
            |-ReferenceNode type=(intersection (fun "verify" ((alias boolean) (alias u32)) (alias void)) (fun "verify" ((alias boolean) (alias bytes)) (alias void)))
              |-QNameNode=verify
                |-NameIdentifierNode="verify"
            |-IsExpressionNode=(fun "is" ((union (alias Nil) (alias ref))) (alias boolean)) type=(alias boolean (native boolean)) annotations=IsValueNode
              |-ReferenceNode type=(alias Nil (struct)) annotations=IsValueNode,Local(test::fixtures::execution::recursiveStruct::a_6:Nil#0)
                |-QNameNode=a
                  |-NameIdentifierNode="a"
              |-ReferenceNode type=(type (alias Nil (struct)))
                |-QNameNode=Nil
                  |-NameIdentifierNode="Nil"
            |-StringLiteral="a is Nil" type=(alias bytes (native bytes)) annotations=IsValueNode
          |-FunctionCallNode=(fun "verify" ((alias boolean) (alias bytes)) (alias void)) type=(alias void (native void))
            |-ReferenceNode type=(intersection (fun "verify" ((alias boolean) (alias u32)) (alias void)) (fun "verify" ((alias boolean) (alias bytes)) (alias void)))
              |-QNameNode=verify
                |-NameIdentifierNode="verify"
            |-IsExpressionNode=(fun "is" ((union (alias Forest) (alias ref))) (alias boolean)) type=(alias boolean (native boolean)) annotations=IsValueNode
              |-ReferenceNode type=(alias Nil (struct)) annotations=IsValueNode,Local(test::fixtures::execution::recursiveStruct::a_6:Nil#0)
                |-QNameNode=a
                  |-NameIdentifierNode="a"
              |-ReferenceNode type=(type (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))))
                |-QNameNode=Forest
                  |-NameIdentifierNode="Forest"
            |-StringLiteral="a is Fores" type=(alias bytes (native bytes)) annotations=IsValueNode
          |-FunctionCallNode=(fun "verify" ((alias boolean) (alias bytes)) (alias void)) type=(alias void (native void))
            |-ReferenceNode type=(intersection (fun "verify" ((alias boolean) (alias u32)) (alias void)) (fun "verify" ((alias boolean) (alias bytes)) (alias void)))
              |-QNameNode=verify
                |-NameIdentifierNode="verify"
            |-IsExpressionNode=(fun "is" ((union (alias Forest) (alias ref))) (alias boolean)) type=(alias boolean (native boolean)) annotations=IsValueNode
              |-ReferenceNode type=(alias Cons (struct tree:<null>)) annotations=IsValueNode,Local(test::fixtures::execution::recursiveStruct::b:Cons#1)
                |-QNameNode=b
                  |-NameIdentifierNode="b"
              |-ReferenceNode type=(type (alias Forest (union (alias Nil (struct)) (alias Cons (struct tree:<null>)))))
                |-QNameNode=Forest
                  |-NameIdentifierNode="Forest"
            |-StringLiteral="b is Fores" type=(alias bytes (native bytes)) annotations=IsValueNode
          |-FunctionCallNode=(fun "verify" ((alias boolean) (alias bytes)) (alias void)) type=(alias void (native void))
            |-ReferenceNode type=(intersection (fun "verify" ((alias boolean) (alias u32)) (alias void)) (fun "verify" ((alias boolean) (alias bytes)) (alias void)))
              |-QNameNode=verify
                |-NameIdentifierNode="verify"
            |-IsExpressionNode=(fun "is" ((union (alias Cons) (alias ref))) (alias boolean)) type=(alias boolean (native boolean)) annotations=IsValueNode
              |-ReferenceNode type=(alias Cons (struct tree:<null>)) annotations=IsValueNode,Local(test::fixtures::execution::recursiveStruct::c:Cons#2)
                |-QNameNode=c
                  |-NameIdentifierNode="c"
              |-ReferenceNode type=(type (alias Cons (struct tree:<null>)))
                |-QNameNode=Cons
                  |-NameIdentifierNode="Cons"
            |-StringLiteral="c is Cons" type=(alias bytes (native bytes)) annotations=IsValueNode
          |-FunctionCallNode=(fun "verify" ((alias boolean) (alias bytes)) (alias void)) type=(alias void (native void))
            |-ReferenceNode type=(intersection (fun "verify" ((alias boolean) (alias u32)) (alias void)) (fun "verify" ((alias boolean) (alias bytes)) (alias void)))
              |-QNameNode=verify
                |-NameIdentifierNode="verify"
            |-IsExpressionNode=(fun "is" ((union (alias Node) (alias ref))) (alias boolean)) type=(alias boolean (native boolean)) annotations=IsValueNode
              |-ReferenceNode type=(alias Node (struct a:<null>)) annotations=IsValueNode,Local(test::fixtures::execution::recursiveStruct::e:Node#4)
                |-QNameNode=e
                  |-NameIdentifierNode="e"
              |-ReferenceNode type=(type (alias Node (struct a:<null>)))
                |-QNameNode=Node
                  |-NameIdentifierNode="Node"
            |-StringLiteral="e is Node" type=(alias bytes (native bytes)) annotations=IsValueNode
          |-FunctionCallNode=(fun "verify" ((alias boolean) (alias bytes)) (alias void)) type=(alias void (native void))
            |-ReferenceNode type=(intersection (fun "verify" ((alias boolean) (alias u32)) (alias void)) (fun "verify" ((alias boolean) (alias bytes)) (alias void)))
              |-QNameNode=verify
                |-NameIdentifierNode="verify"
            |-IsExpressionNode=(fun "is" ((union (alias Tree) (alias ref))) (alias boolean)) type=(alias boolean (native boolean)) annotations=IsValueNode
              |-ReferenceNode type=(alias Node (struct a:<null>)) annotations=IsValueNode,Local(test::fixtures::execution::recursiveStruct::e:Node#4)
                |-QNameNode=e
                  |-NameIdentifierNode="e"
              |-ReferenceNode type=(type (alias Tree (union (alias Empty (struct)) (alias Node (struct a:<null>)))))
                |-QNameNode=Tree
                  |-NameIdentifierNode="Tree"
            |-StringLiteral="e is Tree" type=(alias bytes (native bytes)) annotations=IsValueNode
          |-FunctionCallNode=(fun "END" () (alias void)) type=(alias void (native void))
            |-ReferenceNode type=(fun "END" () (alias void))
              |-QNameNode=END
                |-NameIdentifierNode="END"