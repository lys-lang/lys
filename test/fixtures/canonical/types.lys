type bool = %stack { lowLevelType="i32" }

enum Color {
  Red
  Green
  Blue
}

type theFn1 = A | B | C

type theFn1 = fun()-> void
type theFn2 = fun (bool)-> void
type theFn3 = fun(bool,bool)-> void
type theFn4 = fun   (x: bool)-> void
type theFn5 = fun( x : bool , b: i32)->void
type theFn6 = fun( x : bool ,  i32 ) ->i32

private fun compare(a: Color, b: Color): bool = {
  a == b
}

fun main(): i32 = compare(Red, Green)

var test: fun() -> void | fun( a : i32) -> i32 = 1
var test: a|b& c | d & b = 1
var test: _|_ = 1
var test: fun() -> void = 1
var test: fun() -> void & fun(i32) -> i32 = 1

var test: a|b& c | d & b = 1
var test: a|(b& c) | (d & b) = 1
var test: fun(a: i32) -> void = 1
var test: fun(a: i32,b: i32) -> (void | i32) = 1
var test: fun(i32,i32) -> (void | i32) = 1

enum Number {
  Infinity
  NDet
  Real(number: f32)
  Natural(number: i32)
  Complex(real: f32, imaginary: f32)
}