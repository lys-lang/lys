enum Option {
  Some(value: ref)
  None
}

/// Desugars to:

type None
type Some
type Option = Some | None

impl Option<T> {
  fun is(x: ref) = {
    Some.is(x) || None.is(x)
  }
}

impl Some {
  val determinant: u32 = 1
  val memorySize = ref.memorySize + ref.memorySize /* value: ref */
  fun is(x: ref) = x.determinant == determinant

  fun apply(value: ref): Some = {
    val ptr: Some = (determinant << 32 | core::memory::malloc(memorySize)) as Some
    set_value(ptr, value)
    ref as Celcius
  }

  fun get_value(ptr: Some): f32 = {
    val base = ref.base(ptr)
    ref.read(base + 0)
  }

  private fun set_value(ptr: Some, newValue: ref): void = {
    val base = ref.base(ptr)
    ref.store(base + 0, newValue)
  }

  fun ==(lhs: Some, rhs: Some): boolean = {
    get_value(lhs) == get_value(rhs)
  }

  fun !=(lhs: Some, rhs: Some): boolean = {
    !(lhs == rhs)
  }
}

impl None {
  val determinant: u32 = 2
  val staticInstance: ref = determinant
  fun is(x: ref) = x == staticInstance

  fun apply(): None = staticInstance

  fun ==(lhs: None, rhs: None): boolean = true
  fun !=(lhs: None, rhs: None): boolean = false
}
